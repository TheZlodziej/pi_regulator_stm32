
projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4fc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  0800c6d0  0800c6d0  0001c6d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cbdc  0800cbdc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800cbdc  0800cbdc  0001cbdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cbe4  0800cbe4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cbe4  0800cbe4  0001cbe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cbe8  0800cbe8  0001cbe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800cbec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  200001e0  0800cdcc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000464  0800cdcc  00020464  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001371c  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002680  00000000  00000000  0003392c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  00035fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa0  00000000  00000000  00037048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000277f9  00000000  00000000  00037fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d30  00000000  00000000  0005f7e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f498e  00000000  00000000  00073511  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00167e9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f70  00000000  00000000  00167ef0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c6b4 	.word	0x0800c6b4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800c6b4 	.word	0x0800c6b4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce6:	f000 b9f5 	b.w	80010d4 <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f883 	bl	8000e04 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f876 	bl	8000e04 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f865 	bl	8000e04 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f857 	bl	8000e04 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b9aa 	b.w	80010d4 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f83c 	bl	8000e04 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	460d      	mov	r5, r1
 8000da2:	f7ff febb 	bl	8000b1c <__aeabi_dcmplt>
 8000da6:	b928      	cbnz	r0, 8000db4 <__aeabi_d2lz+0x1c>
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db0:	f000 b80a 	b.w	8000dc8 <__aeabi_d2ulz>
 8000db4:	4620      	mov	r0, r4
 8000db6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dba:	f000 f805 	bl	8000dc8 <__aeabi_d2ulz>
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_d2ulz>:
 8000dc8:	b5d0      	push	{r4, r6, r7, lr}
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <__aeabi_d2ulz+0x34>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	f7ff fc31 	bl	8000638 <__aeabi_dmul>
 8000dd6:	f7ff ff07 	bl	8000be8 <__aeabi_d2uiz>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fbb2 	bl	8000544 <__aeabi_ui2d>
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <__aeabi_d2ulz+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f7ff fc28 	bl	8000638 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
 8000df0:	f7ff fa6a 	bl	80002c8 <__aeabi_dsub>
 8000df4:	f7ff fef8 	bl	8000be8 <__aeabi_d2uiz>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dfc:	3df00000 	.word	0x3df00000
 8000e00:	41f00000 	.word	0x41f00000

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9d08      	ldr	r5, [sp, #32]
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	468e      	mov	lr, r1
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d14d      	bne.n	8000eae <__udivmoddi4+0xaa>
 8000e12:	428a      	cmp	r2, r1
 8000e14:	4694      	mov	ip, r2
 8000e16:	d969      	bls.n	8000eec <__udivmoddi4+0xe8>
 8000e18:	fab2 f282 	clz	r2, r2
 8000e1c:	b152      	cbz	r2, 8000e34 <__udivmoddi4+0x30>
 8000e1e:	fa01 f302 	lsl.w	r3, r1, r2
 8000e22:	f1c2 0120 	rsb	r1, r2, #32
 8000e26:	fa20 f101 	lsr.w	r1, r0, r1
 8000e2a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2e:	ea41 0e03 	orr.w	lr, r1, r3
 8000e32:	4094      	lsls	r4, r2
 8000e34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e38:	0c21      	lsrs	r1, r4, #16
 8000e3a:	fbbe f6f8 	udiv	r6, lr, r8
 8000e3e:	fa1f f78c 	uxth.w	r7, ip
 8000e42:	fb08 e316 	mls	r3, r8, r6, lr
 8000e46:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e4a:	fb06 f107 	mul.w	r1, r6, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d90a      	bls.n	8000e68 <__udivmoddi4+0x64>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e5a:	f080 811f 	bcs.w	800109c <__udivmoddi4+0x298>
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	f240 811c 	bls.w	800109c <__udivmoddi4+0x298>
 8000e64:	3e02      	subs	r6, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1a5b      	subs	r3, r3, r1
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e78:	fb00 f707 	mul.w	r7, r0, r7
 8000e7c:	42a7      	cmp	r7, r4
 8000e7e:	d90a      	bls.n	8000e96 <__udivmoddi4+0x92>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	f080 810a 	bcs.w	80010a0 <__udivmoddi4+0x29c>
 8000e8c:	42a7      	cmp	r7, r4
 8000e8e:	f240 8107 	bls.w	80010a0 <__udivmoddi4+0x29c>
 8000e92:	4464      	add	r4, ip
 8000e94:	3802      	subs	r0, #2
 8000e96:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e9a:	1be4      	subs	r4, r4, r7
 8000e9c:	2600      	movs	r6, #0
 8000e9e:	b11d      	cbz	r5, 8000ea8 <__udivmoddi4+0xa4>
 8000ea0:	40d4      	lsrs	r4, r2
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ea8:	4631      	mov	r1, r6
 8000eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eae:	428b      	cmp	r3, r1
 8000eb0:	d909      	bls.n	8000ec6 <__udivmoddi4+0xc2>
 8000eb2:	2d00      	cmp	r5, #0
 8000eb4:	f000 80ef 	beq.w	8001096 <__udivmoddi4+0x292>
 8000eb8:	2600      	movs	r6, #0
 8000eba:	e9c5 0100 	strd	r0, r1, [r5]
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	4631      	mov	r1, r6
 8000ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec6:	fab3 f683 	clz	r6, r3
 8000eca:	2e00      	cmp	r6, #0
 8000ecc:	d14a      	bne.n	8000f64 <__udivmoddi4+0x160>
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	d302      	bcc.n	8000ed8 <__udivmoddi4+0xd4>
 8000ed2:	4282      	cmp	r2, r0
 8000ed4:	f200 80f9 	bhi.w	80010ca <__udivmoddi4+0x2c6>
 8000ed8:	1a84      	subs	r4, r0, r2
 8000eda:	eb61 0303 	sbc.w	r3, r1, r3
 8000ede:	2001      	movs	r0, #1
 8000ee0:	469e      	mov	lr, r3
 8000ee2:	2d00      	cmp	r5, #0
 8000ee4:	d0e0      	beq.n	8000ea8 <__udivmoddi4+0xa4>
 8000ee6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eea:	e7dd      	b.n	8000ea8 <__udivmoddi4+0xa4>
 8000eec:	b902      	cbnz	r2, 8000ef0 <__udivmoddi4+0xec>
 8000eee:	deff      	udf	#255	; 0xff
 8000ef0:	fab2 f282 	clz	r2, r2
 8000ef4:	2a00      	cmp	r2, #0
 8000ef6:	f040 8092 	bne.w	800101e <__udivmoddi4+0x21a>
 8000efa:	eba1 010c 	sub.w	r1, r1, ip
 8000efe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f02:	fa1f fe8c 	uxth.w	lr, ip
 8000f06:	2601      	movs	r6, #1
 8000f08:	0c20      	lsrs	r0, r4, #16
 8000f0a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000f0e:	fb07 1113 	mls	r1, r7, r3, r1
 8000f12:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f16:	fb0e f003 	mul.w	r0, lr, r3
 8000f1a:	4288      	cmp	r0, r1
 8000f1c:	d908      	bls.n	8000f30 <__udivmoddi4+0x12c>
 8000f1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f22:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f26:	d202      	bcs.n	8000f2e <__udivmoddi4+0x12a>
 8000f28:	4288      	cmp	r0, r1
 8000f2a:	f200 80cb 	bhi.w	80010c4 <__udivmoddi4+0x2c0>
 8000f2e:	4643      	mov	r3, r8
 8000f30:	1a09      	subs	r1, r1, r0
 8000f32:	b2a4      	uxth	r4, r4
 8000f34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f38:	fb07 1110 	mls	r1, r7, r0, r1
 8000f3c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f40:	fb0e fe00 	mul.w	lr, lr, r0
 8000f44:	45a6      	cmp	lr, r4
 8000f46:	d908      	bls.n	8000f5a <__udivmoddi4+0x156>
 8000f48:	eb1c 0404 	adds.w	r4, ip, r4
 8000f4c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f50:	d202      	bcs.n	8000f58 <__udivmoddi4+0x154>
 8000f52:	45a6      	cmp	lr, r4
 8000f54:	f200 80bb 	bhi.w	80010ce <__udivmoddi4+0x2ca>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	eba4 040e 	sub.w	r4, r4, lr
 8000f5e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f62:	e79c      	b.n	8000e9e <__udivmoddi4+0x9a>
 8000f64:	f1c6 0720 	rsb	r7, r6, #32
 8000f68:	40b3      	lsls	r3, r6
 8000f6a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f6e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f72:	fa20 f407 	lsr.w	r4, r0, r7
 8000f76:	fa01 f306 	lsl.w	r3, r1, r6
 8000f7a:	431c      	orrs	r4, r3
 8000f7c:	40f9      	lsrs	r1, r7
 8000f7e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f82:	fa00 f306 	lsl.w	r3, r0, r6
 8000f86:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f8a:	0c20      	lsrs	r0, r4, #16
 8000f8c:	fa1f fe8c 	uxth.w	lr, ip
 8000f90:	fb09 1118 	mls	r1, r9, r8, r1
 8000f94:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f98:	fb08 f00e 	mul.w	r0, r8, lr
 8000f9c:	4288      	cmp	r0, r1
 8000f9e:	fa02 f206 	lsl.w	r2, r2, r6
 8000fa2:	d90b      	bls.n	8000fbc <__udivmoddi4+0x1b8>
 8000fa4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fac:	f080 8088 	bcs.w	80010c0 <__udivmoddi4+0x2bc>
 8000fb0:	4288      	cmp	r0, r1
 8000fb2:	f240 8085 	bls.w	80010c0 <__udivmoddi4+0x2bc>
 8000fb6:	f1a8 0802 	sub.w	r8, r8, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	1a09      	subs	r1, r1, r0
 8000fbe:	b2a4      	uxth	r4, r4
 8000fc0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000fc4:	fb09 1110 	mls	r1, r9, r0, r1
 8000fc8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fcc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fd0:	458e      	cmp	lr, r1
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x1e2>
 8000fd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fdc:	d26c      	bcs.n	80010b8 <__udivmoddi4+0x2b4>
 8000fde:	458e      	cmp	lr, r1
 8000fe0:	d96a      	bls.n	80010b8 <__udivmoddi4+0x2b4>
 8000fe2:	3802      	subs	r0, #2
 8000fe4:	4461      	add	r1, ip
 8000fe6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fea:	fba0 9402 	umull	r9, r4, r0, r2
 8000fee:	eba1 010e 	sub.w	r1, r1, lr
 8000ff2:	42a1      	cmp	r1, r4
 8000ff4:	46c8      	mov	r8, r9
 8000ff6:	46a6      	mov	lr, r4
 8000ff8:	d356      	bcc.n	80010a8 <__udivmoddi4+0x2a4>
 8000ffa:	d053      	beq.n	80010a4 <__udivmoddi4+0x2a0>
 8000ffc:	b15d      	cbz	r5, 8001016 <__udivmoddi4+0x212>
 8000ffe:	ebb3 0208 	subs.w	r2, r3, r8
 8001002:	eb61 010e 	sbc.w	r1, r1, lr
 8001006:	fa01 f707 	lsl.w	r7, r1, r7
 800100a:	fa22 f306 	lsr.w	r3, r2, r6
 800100e:	40f1      	lsrs	r1, r6
 8001010:	431f      	orrs	r7, r3
 8001012:	e9c5 7100 	strd	r7, r1, [r5]
 8001016:	2600      	movs	r6, #0
 8001018:	4631      	mov	r1, r6
 800101a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800101e:	f1c2 0320 	rsb	r3, r2, #32
 8001022:	40d8      	lsrs	r0, r3
 8001024:	fa0c fc02 	lsl.w	ip, ip, r2
 8001028:	fa21 f303 	lsr.w	r3, r1, r3
 800102c:	4091      	lsls	r1, r2
 800102e:	4301      	orrs	r1, r0
 8001030:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001034:	fa1f fe8c 	uxth.w	lr, ip
 8001038:	fbb3 f0f7 	udiv	r0, r3, r7
 800103c:	fb07 3610 	mls	r6, r7, r0, r3
 8001040:	0c0b      	lsrs	r3, r1, #16
 8001042:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001046:	fb00 f60e 	mul.w	r6, r0, lr
 800104a:	429e      	cmp	r6, r3
 800104c:	fa04 f402 	lsl.w	r4, r4, r2
 8001050:	d908      	bls.n	8001064 <__udivmoddi4+0x260>
 8001052:	eb1c 0303 	adds.w	r3, ip, r3
 8001056:	f100 38ff 	add.w	r8, r0, #4294967295
 800105a:	d22f      	bcs.n	80010bc <__udivmoddi4+0x2b8>
 800105c:	429e      	cmp	r6, r3
 800105e:	d92d      	bls.n	80010bc <__udivmoddi4+0x2b8>
 8001060:	3802      	subs	r0, #2
 8001062:	4463      	add	r3, ip
 8001064:	1b9b      	subs	r3, r3, r6
 8001066:	b289      	uxth	r1, r1
 8001068:	fbb3 f6f7 	udiv	r6, r3, r7
 800106c:	fb07 3316 	mls	r3, r7, r6, r3
 8001070:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001074:	fb06 f30e 	mul.w	r3, r6, lr
 8001078:	428b      	cmp	r3, r1
 800107a:	d908      	bls.n	800108e <__udivmoddi4+0x28a>
 800107c:	eb1c 0101 	adds.w	r1, ip, r1
 8001080:	f106 38ff 	add.w	r8, r6, #4294967295
 8001084:	d216      	bcs.n	80010b4 <__udivmoddi4+0x2b0>
 8001086:	428b      	cmp	r3, r1
 8001088:	d914      	bls.n	80010b4 <__udivmoddi4+0x2b0>
 800108a:	3e02      	subs	r6, #2
 800108c:	4461      	add	r1, ip
 800108e:	1ac9      	subs	r1, r1, r3
 8001090:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001094:	e738      	b.n	8000f08 <__udivmoddi4+0x104>
 8001096:	462e      	mov	r6, r5
 8001098:	4628      	mov	r0, r5
 800109a:	e705      	b.n	8000ea8 <__udivmoddi4+0xa4>
 800109c:	4606      	mov	r6, r0
 800109e:	e6e3      	b.n	8000e68 <__udivmoddi4+0x64>
 80010a0:	4618      	mov	r0, r3
 80010a2:	e6f8      	b.n	8000e96 <__udivmoddi4+0x92>
 80010a4:	454b      	cmp	r3, r9
 80010a6:	d2a9      	bcs.n	8000ffc <__udivmoddi4+0x1f8>
 80010a8:	ebb9 0802 	subs.w	r8, r9, r2
 80010ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80010b0:	3801      	subs	r0, #1
 80010b2:	e7a3      	b.n	8000ffc <__udivmoddi4+0x1f8>
 80010b4:	4646      	mov	r6, r8
 80010b6:	e7ea      	b.n	800108e <__udivmoddi4+0x28a>
 80010b8:	4620      	mov	r0, r4
 80010ba:	e794      	b.n	8000fe6 <__udivmoddi4+0x1e2>
 80010bc:	4640      	mov	r0, r8
 80010be:	e7d1      	b.n	8001064 <__udivmoddi4+0x260>
 80010c0:	46d0      	mov	r8, sl
 80010c2:	e77b      	b.n	8000fbc <__udivmoddi4+0x1b8>
 80010c4:	3b02      	subs	r3, #2
 80010c6:	4461      	add	r1, ip
 80010c8:	e732      	b.n	8000f30 <__udivmoddi4+0x12c>
 80010ca:	4630      	mov	r0, r6
 80010cc:	e709      	b.n	8000ee2 <__udivmoddi4+0xde>
 80010ce:	4464      	add	r4, ip
 80010d0:	3802      	subs	r0, #2
 80010d2:	e742      	b.n	8000f5a <__udivmoddi4+0x156>

080010d4 <__aeabi_idiv0>:
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop

080010d8 <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af02      	add	r7, sp, #8
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
  return tmp;
#endif
#if(BMP_SPI == 1)
    uint8_t tmp[2];
	tmp[0] = addr;
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 80010e6:	7b3b      	ldrb	r3, [r7, #12]
 80010e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	2110      	movs	r1, #16
 80010f4:	480b      	ldr	r0, [pc, #44]	; (8001124 <BMP280_Read8+0x4c>)
 80010f6:	f001 ff8f 	bl	8003018 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
 80010fa:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <BMP280_Read8+0x50>)
 80010fc:	6818      	ldr	r0, [r3, #0]
 80010fe:	f107 020c 	add.w	r2, r7, #12
 8001102:	f107 010c 	add.w	r1, r7, #12
 8001106:	230a      	movs	r3, #10
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	2302      	movs	r3, #2
 800110c:	f003 f913 	bl	8004336 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 8001110:	2201      	movs	r2, #1
 8001112:	2110      	movs	r1, #16
 8001114:	4803      	ldr	r0, [pc, #12]	; (8001124 <BMP280_Read8+0x4c>)
 8001116:	f001 ff7f 	bl	8003018 <HAL_GPIO_WritePin>
	return tmp[1];
 800111a:	7b7b      	ldrb	r3, [r7, #13]
#endif
}
 800111c:	4618      	mov	r0, r3
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40020000 	.word	0x40020000
 8001128:	200001fc 	.word	0x200001fc

0800112c <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af02      	add	r7, sp, #8
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
	return ((tmp[0] << 8) | tmp[1]);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[3];
	tmp[0] = addr;
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 800113a:	7b3b      	ldrb	r3, [r7, #12]
 800113c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001140:	b2db      	uxtb	r3, r3
 8001142:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 8001144:	2200      	movs	r2, #0
 8001146:	2110      	movs	r1, #16
 8001148:	480f      	ldr	r0, [pc, #60]	; (8001188 <BMP280_Read16+0x5c>)
 800114a:	f001 ff65 	bl	8003018 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
 800114e:	4b0f      	ldr	r3, [pc, #60]	; (800118c <BMP280_Read16+0x60>)
 8001150:	6818      	ldr	r0, [r3, #0]
 8001152:	f107 020c 	add.w	r2, r7, #12
 8001156:	f107 010c 	add.w	r1, r7, #12
 800115a:	230a      	movs	r3, #10
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	2303      	movs	r3, #3
 8001160:	f003 f8e9 	bl	8004336 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 8001164:	2201      	movs	r2, #1
 8001166:	2110      	movs	r1, #16
 8001168:	4807      	ldr	r0, [pc, #28]	; (8001188 <BMP280_Read16+0x5c>)
 800116a:	f001 ff55 	bl	8003018 <HAL_GPIO_WritePin>
	return ((tmp[1] << 8) | tmp[2]);
 800116e:	7b7b      	ldrb	r3, [r7, #13]
 8001170:	021b      	lsls	r3, r3, #8
 8001172:	b21a      	sxth	r2, r3
 8001174:	7bbb      	ldrb	r3, [r7, #14]
 8001176:	b21b      	sxth	r3, r3
 8001178:	4313      	orrs	r3, r2
 800117a:	b21b      	sxth	r3, r3
 800117c:	b29b      	uxth	r3, r3
#endif
}
 800117e:	4618      	mov	r0, r3
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40020000 	.word	0x40020000
 800118c:	200001fc 	.word	0x200001fc

08001190 <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ffc5 	bl	800112c <BMP280_Read16>
 80011a2:	4603      	mov	r3, r0
 80011a4:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 80011a6:	89fb      	ldrh	r3, [r7, #14]
 80011a8:	0a1b      	lsrs	r3, r3, #8
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	b21a      	sxth	r2, r3
 80011ae:	89fb      	ldrh	r3, [r7, #14]
 80011b0:	021b      	lsls	r3, r3, #8
 80011b2:	b21b      	sxth	r3, r3
 80011b4:	4313      	orrs	r3, r2
 80011b6:	b21b      	sxth	r3, r3
 80011b8:	b29b      	uxth	r3, r3
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af02      	add	r7, sp, #8
 80011ca:	4603      	mov	r3, r0
 80011cc:	460a      	mov	r2, r1
 80011ce:	71fb      	strb	r3, [r7, #7]
 80011d0:	4613      	mov	r3, r2
 80011d2:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[2];
	tmp[0] = address;
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	733b      	strb	r3, [r7, #12]
	tmp[0] &= ~(1<<7);
 80011d8:	7b3b      	ldrb	r3, [r7, #12]
 80011da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	733b      	strb	r3, [r7, #12]
	tmp[1] = data;
 80011e2:	79bb      	ldrb	r3, [r7, #6]
 80011e4:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2110      	movs	r1, #16
 80011ea:	480b      	ldr	r0, [pc, #44]	; (8001218 <BMP280_Write8+0x54>)
 80011ec:	f001 ff14 	bl	8003018 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
 80011f0:	4b0a      	ldr	r3, [pc, #40]	; (800121c <BMP280_Write8+0x58>)
 80011f2:	6818      	ldr	r0, [r3, #0]
 80011f4:	f107 020c 	add.w	r2, r7, #12
 80011f8:	f107 010c 	add.w	r1, r7, #12
 80011fc:	230a      	movs	r3, #10
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	2302      	movs	r3, #2
 8001202:	f003 f898 	bl	8004336 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 8001206:	2201      	movs	r2, #1
 8001208:	2110      	movs	r1, #16
 800120a:	4803      	ldr	r0, [pc, #12]	; (8001218 <BMP280_Write8+0x54>)
 800120c:	f001 ff04 	bl	8003018 <HAL_GPIO_WritePin>
#endif
}
 8001210:	bf00      	nop
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40020000 	.word	0x40020000
 800121c:	200001fc 	.word	0x200001fc

08001220 <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af02      	add	r7, sp, #8
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[4];
	tmp[0] = addr;
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 800122e:	7b3b      	ldrb	r3, [r7, #12]
 8001230:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001234:	b2db      	uxtb	r3, r3
 8001236:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 8001238:	2200      	movs	r2, #0
 800123a:	2110      	movs	r1, #16
 800123c:	480e      	ldr	r0, [pc, #56]	; (8001278 <BMP280_Read24+0x58>)
 800123e:	f001 feeb 	bl	8003018 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <BMP280_Read24+0x5c>)
 8001244:	6818      	ldr	r0, [r3, #0]
 8001246:	f107 020c 	add.w	r2, r7, #12
 800124a:	f107 010c 	add.w	r1, r7, #12
 800124e:	230a      	movs	r3, #10
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	2303      	movs	r3, #3
 8001254:	f003 f86f 	bl	8004336 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 8001258:	2201      	movs	r2, #1
 800125a:	2110      	movs	r1, #16
 800125c:	4806      	ldr	r0, [pc, #24]	; (8001278 <BMP280_Read24+0x58>)
 800125e:	f001 fedb 	bl	8003018 <HAL_GPIO_WritePin>
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
 8001262:	7b7b      	ldrb	r3, [r7, #13]
 8001264:	041a      	lsls	r2, r3, #16
 8001266:	7bbb      	ldrb	r3, [r7, #14]
 8001268:	021b      	lsls	r3, r3, #8
 800126a:	4313      	orrs	r3, r2
 800126c:	7bfa      	ldrb	r2, [r7, #15]
 800126e:	4313      	orrs	r3, r2
#endif
}
 8001270:	4618      	mov	r0, r3
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40020000 	.word	0x40020000
 800127c:	200001fc 	.word	0x200001fc

08001280 <BMP280_Init>:
{
	i2c_h = i2c_handler;
#endif
#if(BMP_SPI == 1)
void BMP280_Init(SPI_HandleTypeDef *spi_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	4608      	mov	r0, r1
 800128a:	4611      	mov	r1, r2
 800128c:	461a      	mov	r2, r3
 800128e:	4603      	mov	r3, r0
 8001290:	70fb      	strb	r3, [r7, #3]
 8001292:	460b      	mov	r3, r1
 8001294:	70bb      	strb	r3, [r7, #2]
 8001296:	4613      	mov	r3, r2
 8001298:	707b      	strb	r3, [r7, #1]
	spi_h = spi_handler;
 800129a:	4a4e      	ldr	r2, [pc, #312]	; (80013d4 <BMP280_Init+0x154>)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2110      	movs	r1, #16
 80012a4:	484c      	ldr	r0, [pc, #304]	; (80013d8 <BMP280_Init+0x158>)
 80012a6:	f001 feb7 	bl	8003018 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80012aa:	2005      	movs	r0, #5
 80012ac:	f001 fb40 	bl	8002930 <HAL_Delay>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 80012b0:	2201      	movs	r2, #1
 80012b2:	2110      	movs	r1, #16
 80012b4:	4848      	ldr	r0, [pc, #288]	; (80013d8 <BMP280_Init+0x158>)
 80012b6:	f001 feaf 	bl	8003018 <HAL_GPIO_WritePin>
#endif
	if (mode > BMP280_NORMALMODE)
 80012ba:	787b      	ldrb	r3, [r7, #1]
 80012bc:	2b03      	cmp	r3, #3
 80012be:	d901      	bls.n	80012c4 <BMP280_Init+0x44>
	    mode = BMP280_NORMALMODE;
 80012c0:	2303      	movs	r3, #3
 80012c2:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 80012c4:	4a45      	ldr	r2, [pc, #276]	; (80013dc <BMP280_Init+0x15c>)
 80012c6:	787b      	ldrb	r3, [r7, #1]
 80012c8:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 80012ca:	787b      	ldrb	r3, [r7, #1]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d101      	bne.n	80012d4 <BMP280_Init+0x54>
		mode = BMP280_SLEEPMODE;
 80012d0:	2300      	movs	r3, #0
 80012d2:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 80012d4:	78fb      	ldrb	r3, [r7, #3]
 80012d6:	2b05      	cmp	r3, #5
 80012d8:	d901      	bls.n	80012de <BMP280_Init+0x5e>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 80012da:	2305      	movs	r3, #5
 80012dc:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 80012de:	4a40      	ldr	r2, [pc, #256]	; (80013e0 <BMP280_Init+0x160>)
 80012e0:	78fb      	ldrb	r3, [r7, #3]
 80012e2:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 80012e4:	78bb      	ldrb	r3, [r7, #2]
 80012e6:	2b05      	cmp	r3, #5
 80012e8:	d901      	bls.n	80012ee <BMP280_Init+0x6e>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 80012ea:	2305      	movs	r3, #5
 80012ec:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 80012ee:	4a3d      	ldr	r2, [pc, #244]	; (80013e4 <BMP280_Init+0x164>)
 80012f0:	78bb      	ldrb	r3, [r7, #2]
 80012f2:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 80012f4:	bf00      	nop
 80012f6:	20d0      	movs	r0, #208	; 0xd0
 80012f8:	f7ff feee 	bl	80010d8 <BMP280_Read8>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b58      	cmp	r3, #88	; 0x58
 8001300:	d1f9      	bne.n	80012f6 <BMP280_Init+0x76>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 8001302:	2088      	movs	r0, #136	; 0x88
 8001304:	f7ff ff44 	bl	8001190 <BMP280_Read16LE>
 8001308:	4603      	mov	r3, r0
 800130a:	461a      	mov	r2, r3
 800130c:	4b36      	ldr	r3, [pc, #216]	; (80013e8 <BMP280_Init+0x168>)
 800130e:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 8001310:	208a      	movs	r0, #138	; 0x8a
 8001312:	f7ff ff3d 	bl	8001190 <BMP280_Read16LE>
 8001316:	4603      	mov	r3, r0
 8001318:	b21a      	sxth	r2, r3
 800131a:	4b34      	ldr	r3, [pc, #208]	; (80013ec <BMP280_Init+0x16c>)
 800131c:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 800131e:	208c      	movs	r0, #140	; 0x8c
 8001320:	f7ff ff36 	bl	8001190 <BMP280_Read16LE>
 8001324:	4603      	mov	r3, r0
 8001326:	b21a      	sxth	r2, r3
 8001328:	4b31      	ldr	r3, [pc, #196]	; (80013f0 <BMP280_Init+0x170>)
 800132a:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 800132c:	208e      	movs	r0, #142	; 0x8e
 800132e:	f7ff ff2f 	bl	8001190 <BMP280_Read16LE>
 8001332:	4603      	mov	r3, r0
 8001334:	461a      	mov	r2, r3
 8001336:	4b2f      	ldr	r3, [pc, #188]	; (80013f4 <BMP280_Init+0x174>)
 8001338:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 800133a:	2090      	movs	r0, #144	; 0x90
 800133c:	f7ff ff28 	bl	8001190 <BMP280_Read16LE>
 8001340:	4603      	mov	r3, r0
 8001342:	b21a      	sxth	r2, r3
 8001344:	4b2c      	ldr	r3, [pc, #176]	; (80013f8 <BMP280_Init+0x178>)
 8001346:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 8001348:	2092      	movs	r0, #146	; 0x92
 800134a:	f7ff ff21 	bl	8001190 <BMP280_Read16LE>
 800134e:	4603      	mov	r3, r0
 8001350:	b21a      	sxth	r2, r3
 8001352:	4b2a      	ldr	r3, [pc, #168]	; (80013fc <BMP280_Init+0x17c>)
 8001354:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 8001356:	2094      	movs	r0, #148	; 0x94
 8001358:	f7ff ff1a 	bl	8001190 <BMP280_Read16LE>
 800135c:	4603      	mov	r3, r0
 800135e:	b21a      	sxth	r2, r3
 8001360:	4b27      	ldr	r3, [pc, #156]	; (8001400 <BMP280_Init+0x180>)
 8001362:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 8001364:	2096      	movs	r0, #150	; 0x96
 8001366:	f7ff ff13 	bl	8001190 <BMP280_Read16LE>
 800136a:	4603      	mov	r3, r0
 800136c:	b21a      	sxth	r2, r3
 800136e:	4b25      	ldr	r3, [pc, #148]	; (8001404 <BMP280_Init+0x184>)
 8001370:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 8001372:	2098      	movs	r0, #152	; 0x98
 8001374:	f7ff ff0c 	bl	8001190 <BMP280_Read16LE>
 8001378:	4603      	mov	r3, r0
 800137a:	b21a      	sxth	r2, r3
 800137c:	4b22      	ldr	r3, [pc, #136]	; (8001408 <BMP280_Init+0x188>)
 800137e:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 8001380:	209a      	movs	r0, #154	; 0x9a
 8001382:	f7ff ff05 	bl	8001190 <BMP280_Read16LE>
 8001386:	4603      	mov	r3, r0
 8001388:	b21a      	sxth	r2, r3
 800138a:	4b20      	ldr	r3, [pc, #128]	; (800140c <BMP280_Init+0x18c>)
 800138c:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 800138e:	209c      	movs	r0, #156	; 0x9c
 8001390:	f7ff fefe 	bl	8001190 <BMP280_Read16LE>
 8001394:	4603      	mov	r3, r0
 8001396:	b21a      	sxth	r2, r3
 8001398:	4b1d      	ldr	r3, [pc, #116]	; (8001410 <BMP280_Init+0x190>)
 800139a:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 800139c:	209e      	movs	r0, #158	; 0x9e
 800139e:	f7ff fef7 	bl	8001190 <BMP280_Read16LE>
 80013a2:	4603      	mov	r3, r0
 80013a4:	b21a      	sxth	r2, r3
 80013a6:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <BMP280_Init+0x194>)
 80013a8:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 80013aa:	78fb      	ldrb	r3, [r7, #3]
 80013ac:	015b      	lsls	r3, r3, #5
 80013ae:	b25a      	sxtb	r2, r3
 80013b0:	78bb      	ldrb	r3, [r7, #2]
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	b25b      	sxtb	r3, r3
 80013b6:	4313      	orrs	r3, r2
 80013b8:	b25a      	sxtb	r2, r3
 80013ba:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80013be:	4313      	orrs	r3, r2
 80013c0:	b25b      	sxtb	r3, r3
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	4619      	mov	r1, r3
 80013c6:	20f4      	movs	r0, #244	; 0xf4
 80013c8:	f7ff fefc 	bl	80011c4 <BMP280_Write8>
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	200001fc 	.word	0x200001fc
 80013d8:	40020000 	.word	0x40020000
 80013dc:	20000202 	.word	0x20000202
 80013e0:	20000200 	.word	0x20000200
 80013e4:	20000201 	.word	0x20000201
 80013e8:	20000218 	.word	0x20000218
 80013ec:	20000204 	.word	0x20000204
 80013f0:	20000206 	.word	0x20000206
 80013f4:	2000021a 	.word	0x2000021a
 80013f8:	20000208 	.word	0x20000208
 80013fc:	2000020a 	.word	0x2000020a
 8001400:	2000020c 	.word	0x2000020c
 8001404:	2000020e 	.word	0x2000020e
 8001408:	20000210 	.word	0x20000210
 800140c:	20000212 	.word	0x20000212
 8001410:	20000214 	.word	0x20000214
 8001414:	20000216 	.word	0x20000216

08001418 <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 800141e:	4b3d      	ldr	r3, [pc, #244]	; (8001514 <BMP280_ReadTemperature+0xfc>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d16d      	bne.n	8001502 <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 8001426:	20f4      	movs	r0, #244	; 0xf4
 8001428:	f7ff fe56 	bl	80010d8 <BMP280_Read8>
 800142c:	4603      	mov	r3, r0
 800142e:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 8001430:	7dfb      	ldrb	r3, [r7, #23]
 8001432:	f023 0303 	bic.w	r3, r3, #3
 8001436:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 8001438:	7dfb      	ldrb	r3, [r7, #23]
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 8001440:	7dfb      	ldrb	r3, [r7, #23]
 8001442:	4619      	mov	r1, r3
 8001444:	20f4      	movs	r0, #244	; 0xf4
 8001446:	f7ff febd 	bl	80011c4 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 800144a:	20f4      	movs	r0, #244	; 0xf4
 800144c:	f7ff fe44 	bl	80010d8 <BMP280_Read8>
 8001450:	4603      	mov	r3, r0
 8001452:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 8001454:	7dbb      	ldrb	r3, [r7, #22]
 8001456:	f003 0303 	and.w	r3, r3, #3
 800145a:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 800145c:	7dbb      	ldrb	r3, [r7, #22]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d14f      	bne.n	8001502 <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 8001462:	20f4      	movs	r0, #244	; 0xf4
 8001464:	f7ff fe38 	bl	80010d8 <BMP280_Read8>
 8001468:	4603      	mov	r3, r0
 800146a:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 800146c:	7dbb      	ldrb	r3, [r7, #22]
 800146e:	f003 0303 	and.w	r3, r3, #3
 8001472:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 8001474:	7dbb      	ldrb	r3, [r7, #22]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d000      	beq.n	800147c <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 800147a:	e7f2      	b.n	8001462 <BMP280_ReadTemperature+0x4a>
				  break;
 800147c:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 800147e:	20fa      	movs	r0, #250	; 0xfa
 8001480:	f7ff fece 	bl	8001220 <BMP280_Read24>
 8001484:	4603      	mov	r3, r0
 8001486:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	111b      	asrs	r3, r3, #4
 800148c:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	10da      	asrs	r2, r3, #3
 8001492:	4b21      	ldr	r3, [pc, #132]	; (8001518 <BMP280_ReadTemperature+0x100>)
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 800149a:	4a20      	ldr	r2, [pc, #128]	; (800151c <BMP280_ReadTemperature+0x104>)
 800149c:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80014a0:	fb02 f303 	mul.w	r3, r2, r3
 80014a4:	12db      	asrs	r3, r3, #11
 80014a6:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	111b      	asrs	r3, r3, #4
 80014ac:	4a1a      	ldr	r2, [pc, #104]	; (8001518 <BMP280_ReadTemperature+0x100>)
 80014ae:	8812      	ldrh	r2, [r2, #0]
 80014b0:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	1112      	asrs	r2, r2, #4
 80014b6:	4918      	ldr	r1, [pc, #96]	; (8001518 <BMP280_ReadTemperature+0x100>)
 80014b8:	8809      	ldrh	r1, [r1, #0]
 80014ba:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80014bc:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80014c0:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 80014c2:	4a17      	ldr	r2, [pc, #92]	; (8001520 <BMP280_ReadTemperature+0x108>)
 80014c4:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80014c8:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80014cc:	139b      	asrs	r3, r3, #14
 80014ce:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 80014d0:	68fa      	ldr	r2, [r7, #12]
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	4413      	add	r3, r2
 80014d6:	4a13      	ldr	r2, [pc, #76]	; (8001524 <BMP280_ReadTemperature+0x10c>)
 80014d8:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 80014da:	4b12      	ldr	r3, [pc, #72]	; (8001524 <BMP280_ReadTemperature+0x10c>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	3380      	adds	r3, #128	; 0x80
 80014e6:	121b      	asrs	r3, r3, #8
 80014e8:	ee07 3a90 	vmov	s15, r3
 80014ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014f0:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 80014f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80014f8:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001528 <BMP280_ReadTemperature+0x110>
 80014fc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001500:	e001      	b.n	8001506 <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 8001502:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800152c <BMP280_ReadTemperature+0x114>
}
 8001506:	eef0 7a47 	vmov.f32	s15, s14
 800150a:	eeb0 0a67 	vmov.f32	s0, s15
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000202 	.word	0x20000202
 8001518:	20000218 	.word	0x20000218
 800151c:	20000204 	.word	0x20000204
 8001520:	20000206 	.word	0x20000206
 8001524:	2000021c 	.word	0x2000021c
 8001528:	42c80000 	.word	0x42c80000
 800152c:	c2c60000 	.word	0xc2c60000

08001530 <BMP280_ReadTemperatureAndPressure>:
}
#endif

#ifdef BMP280
uint8_t BMP280_ReadTemperatureAndPressure(float *temperature, int32_t *pressure)
{
 8001530:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001534:	b0cc      	sub	sp, #304	; 0x130
 8001536:	af00      	add	r7, sp, #0
 8001538:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 800153c:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  *temperature = BMP280_ReadTemperature();
 8001540:	f7ff ff6a 	bl	8001418 <BMP280_ReadTemperature>
 8001544:	eef0 7a40 	vmov.f32	s15, s0
 8001548:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800154c:	edc3 7a00 	vstr	s15, [r3]

	  if(*temperature == -99)
 8001550:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001554:	edd3 7a00 	vldr	s15, [r3]
 8001558:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 8001828 <BMP280_ReadTemperatureAndPressure+0x2f8>
 800155c:	eef4 7a47 	vcmp.f32	s15, s14
 8001560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001564:	d101      	bne.n	800156a <BMP280_ReadTemperatureAndPressure+0x3a>
		  return -1;
 8001566:	23ff      	movs	r3, #255	; 0xff
 8001568:	e2bf      	b.n	8001aea <BMP280_ReadTemperatureAndPressure+0x5ba>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA);
 800156a:	20f7      	movs	r0, #247	; 0xf7
 800156c:	f7ff fe58 	bl	8001220 <BMP280_Read24>
 8001570:	4603      	mov	r3, r0
 8001572:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	  adc_P >>= 4;
 8001576:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800157a:	111b      	asrs	r3, r3, #4
 800157c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	  var1 = ((int64_t)t_fine) - 128000;
 8001580:	4baa      	ldr	r3, [pc, #680]	; (800182c <BMP280_ReadTemperatureAndPressure+0x2fc>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	17da      	asrs	r2, r3, #31
 8001586:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800158a:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800158e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8001592:	460b      	mov	r3, r1
 8001594:	f5b3 33fa 	subs.w	r3, r3, #128000	; 0x1f400
 8001598:	64bb      	str	r3, [r7, #72]	; 0x48
 800159a:	4613      	mov	r3, r2
 800159c:	f143 33ff 	adc.w	r3, r3, #4294967295
 80015a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80015a2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80015a6:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	  var2 = var1 * var1 * (int64_t)p6;
 80015aa:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80015ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015b2:	fb03 f102 	mul.w	r1, r3, r2
 80015b6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80015ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015be:	fb02 f303 	mul.w	r3, r2, r3
 80015c2:	18ca      	adds	r2, r1, r3
 80015c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015c8:	fba3 4503 	umull	r4, r5, r3, r3
 80015cc:	1953      	adds	r3, r2, r5
 80015ce:	461d      	mov	r5, r3
 80015d0:	4b97      	ldr	r3, [pc, #604]	; (8001830 <BMP280_ReadTemperatureAndPressure+0x300>)
 80015d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	17da      	asrs	r2, r3, #31
 80015da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80015de:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80015e2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80015e6:	4603      	mov	r3, r0
 80015e8:	fb03 f205 	mul.w	r2, r3, r5
 80015ec:	460b      	mov	r3, r1
 80015ee:	fb04 f303 	mul.w	r3, r4, r3
 80015f2:	4413      	add	r3, r2
 80015f4:	4602      	mov	r2, r0
 80015f6:	fba4 8902 	umull	r8, r9, r4, r2
 80015fa:	444b      	add	r3, r9
 80015fc:	4699      	mov	r9, r3
 80015fe:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
 8001602:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
	  var2 = var2 + ((var1*(int64_t)p5)<<17);
 8001606:	4b8b      	ldr	r3, [pc, #556]	; (8001834 <BMP280_ReadTemperatureAndPressure+0x304>)
 8001608:	f9b3 3000 	ldrsh.w	r3, [r3]
 800160c:	b21b      	sxth	r3, r3
 800160e:	17da      	asrs	r2, r3, #31
 8001610:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001614:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001618:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800161c:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8001620:	462a      	mov	r2, r5
 8001622:	fb02 f203 	mul.w	r2, r2, r3
 8001626:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800162a:	4621      	mov	r1, r4
 800162c:	fb01 f303 	mul.w	r3, r1, r3
 8001630:	441a      	add	r2, r3
 8001632:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001636:	4621      	mov	r1, r4
 8001638:	fba3 ab01 	umull	sl, fp, r3, r1
 800163c:	eb02 030b 	add.w	r3, r2, fp
 8001640:	469b      	mov	fp, r3
 8001642:	f04f 0000 	mov.w	r0, #0
 8001646:	f04f 0100 	mov.w	r1, #0
 800164a:	ea4f 414b 	mov.w	r1, fp, lsl #17
 800164e:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 8001652:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8001656:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800165a:	1814      	adds	r4, r2, r0
 800165c:	643c      	str	r4, [r7, #64]	; 0x40
 800165e:	414b      	adcs	r3, r1
 8001660:	647b      	str	r3, [r7, #68]	; 0x44
 8001662:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001666:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	  var2 = var2 + (((int64_t)p4)<<35);
 800166a:	4b73      	ldr	r3, [pc, #460]	; (8001838 <BMP280_ReadTemperatureAndPressure+0x308>)
 800166c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001670:	b21b      	sxth	r3, r3
 8001672:	17da      	asrs	r2, r3, #31
 8001674:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001678:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800167c:	f04f 0000 	mov.w	r0, #0
 8001680:	f04f 0100 	mov.w	r1, #0
 8001684:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001688:	00d9      	lsls	r1, r3, #3
 800168a:	2000      	movs	r0, #0
 800168c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001690:	1814      	adds	r4, r2, r0
 8001692:	63bc      	str	r4, [r7, #56]	; 0x38
 8001694:	414b      	adcs	r3, r1
 8001696:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001698:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800169c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 80016a0:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80016a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016a8:	fb03 f102 	mul.w	r1, r3, r2
 80016ac:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80016b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016b4:	fb02 f303 	mul.w	r3, r2, r3
 80016b8:	18ca      	adds	r2, r1, r3
 80016ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016be:	fba3 1303 	umull	r1, r3, r3, r3
 80016c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80016c6:	460b      	mov	r3, r1
 80016c8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80016cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80016d0:	18d3      	adds	r3, r2, r3
 80016d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80016d6:	4b59      	ldr	r3, [pc, #356]	; (800183c <BMP280_ReadTemperatureAndPressure+0x30c>)
 80016d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016dc:	b21b      	sxth	r3, r3
 80016de:	17da      	asrs	r2, r3, #31
 80016e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80016e4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80016e8:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80016ec:	462b      	mov	r3, r5
 80016ee:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 80016f2:	4642      	mov	r2, r8
 80016f4:	fb02 f203 	mul.w	r2, r2, r3
 80016f8:	464b      	mov	r3, r9
 80016fa:	4621      	mov	r1, r4
 80016fc:	fb01 f303 	mul.w	r3, r1, r3
 8001700:	4413      	add	r3, r2
 8001702:	4622      	mov	r2, r4
 8001704:	4641      	mov	r1, r8
 8001706:	fba2 1201 	umull	r1, r2, r2, r1
 800170a:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800170e:	460a      	mov	r2, r1
 8001710:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8001714:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8001718:	4413      	add	r3, r2
 800171a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800171e:	f04f 0000 	mov.w	r0, #0
 8001722:	f04f 0100 	mov.w	r1, #0
 8001726:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 800172a:	4623      	mov	r3, r4
 800172c:	0a18      	lsrs	r0, r3, #8
 800172e:	462b      	mov	r3, r5
 8001730:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001734:	462b      	mov	r3, r5
 8001736:	1219      	asrs	r1, r3, #8
	    ((var1 * (int64_t)p2)<<12);
 8001738:	4b41      	ldr	r3, [pc, #260]	; (8001840 <BMP280_ReadTemperatureAndPressure+0x310>)
 800173a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800173e:	b21b      	sxth	r3, r3
 8001740:	17da      	asrs	r2, r3, #31
 8001742:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001746:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800174a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800174e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001752:	464a      	mov	r2, r9
 8001754:	fb02 f203 	mul.w	r2, r2, r3
 8001758:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800175c:	4644      	mov	r4, r8
 800175e:	fb04 f303 	mul.w	r3, r4, r3
 8001762:	441a      	add	r2, r3
 8001764:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001768:	4644      	mov	r4, r8
 800176a:	fba3 4304 	umull	r4, r3, r3, r4
 800176e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001772:	4623      	mov	r3, r4
 8001774:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800177c:	18d3      	adds	r3, r2, r3
 800177e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	f04f 0300 	mov.w	r3, #0
 800178a:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 800178e:	464c      	mov	r4, r9
 8001790:	0323      	lsls	r3, r4, #12
 8001792:	4644      	mov	r4, r8
 8001794:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001798:	4644      	mov	r4, r8
 800179a:	0322      	lsls	r2, r4, #12
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 800179c:	1884      	adds	r4, r0, r2
 800179e:	633c      	str	r4, [r7, #48]	; 0x30
 80017a0:	eb41 0303 	adc.w	r3, r1, r3
 80017a4:	637b      	str	r3, [r7, #52]	; 0x34
 80017a6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80017aa:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 80017ae:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80017b2:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80017b6:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 80017ba:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 80017be:	4b21      	ldr	r3, [pc, #132]	; (8001844 <BMP280_ReadTemperatureAndPressure+0x314>)
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	2200      	movs	r2, #0
 80017c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80017ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80017ce:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 80017d2:	462b      	mov	r3, r5
 80017d4:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 80017d8:	4642      	mov	r2, r8
 80017da:	fb02 f203 	mul.w	r2, r2, r3
 80017de:	464b      	mov	r3, r9
 80017e0:	4621      	mov	r1, r4
 80017e2:	fb01 f303 	mul.w	r3, r1, r3
 80017e6:	4413      	add	r3, r2
 80017e8:	4622      	mov	r2, r4
 80017ea:	4641      	mov	r1, r8
 80017ec:	fba2 1201 	umull	r1, r2, r2, r1
 80017f0:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80017f4:	460a      	mov	r2, r1
 80017f6:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 80017fa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80017fe:	4413      	add	r3, r2
 8001800:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001804:	f04f 0200 	mov.w	r2, #0
 8001808:	f04f 0300 	mov.w	r3, #0
 800180c:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001810:	4629      	mov	r1, r5
 8001812:	104a      	asrs	r2, r1, #1
 8001814:	4629      	mov	r1, r5
 8001816:	17cb      	asrs	r3, r1, #31
 8001818:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	  if (var1 == 0) {
 800181c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001820:	4313      	orrs	r3, r2
 8001822:	d111      	bne.n	8001848 <BMP280_ReadTemperatureAndPressure+0x318>
	    return 0;  // avoid exception caused by division by zero
 8001824:	2300      	movs	r3, #0
 8001826:	e160      	b.n	8001aea <BMP280_ReadTemperatureAndPressure+0x5ba>
 8001828:	c2c60000 	.word	0xc2c60000
 800182c:	2000021c 	.word	0x2000021c
 8001830:	20000210 	.word	0x20000210
 8001834:	2000020e 	.word	0x2000020e
 8001838:	2000020c 	.word	0x2000020c
 800183c:	2000020a 	.word	0x2000020a
 8001840:	20000208 	.word	0x20000208
 8001844:	2000021a 	.word	0x2000021a
	  }
	  p = 1048576 - adc_P;
 8001848:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800184c:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001850:	17da      	asrs	r2, r3, #31
 8001852:	62bb      	str	r3, [r7, #40]	; 0x28
 8001854:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001856:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800185a:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	  p = (((p<<31) - var2)*3125) / var1;
 800185e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001862:	105b      	asrs	r3, r3, #1
 8001864:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001868:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800186c:	07db      	lsls	r3, r3, #31
 800186e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001872:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001876:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800187a:	4621      	mov	r1, r4
 800187c:	1a89      	subs	r1, r1, r2
 800187e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8001882:	4629      	mov	r1, r5
 8001884:	eb61 0303 	sbc.w	r3, r1, r3
 8001888:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800188c:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001890:	4622      	mov	r2, r4
 8001892:	462b      	mov	r3, r5
 8001894:	1891      	adds	r1, r2, r2
 8001896:	6239      	str	r1, [r7, #32]
 8001898:	415b      	adcs	r3, r3
 800189a:	627b      	str	r3, [r7, #36]	; 0x24
 800189c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018a0:	4621      	mov	r1, r4
 80018a2:	1851      	adds	r1, r2, r1
 80018a4:	61b9      	str	r1, [r7, #24]
 80018a6:	4629      	mov	r1, r5
 80018a8:	414b      	adcs	r3, r1
 80018aa:	61fb      	str	r3, [r7, #28]
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80018b8:	4649      	mov	r1, r9
 80018ba:	018b      	lsls	r3, r1, #6
 80018bc:	4641      	mov	r1, r8
 80018be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018c2:	4641      	mov	r1, r8
 80018c4:	018a      	lsls	r2, r1, #6
 80018c6:	4641      	mov	r1, r8
 80018c8:	1889      	adds	r1, r1, r2
 80018ca:	6139      	str	r1, [r7, #16]
 80018cc:	4649      	mov	r1, r9
 80018ce:	eb43 0101 	adc.w	r1, r3, r1
 80018d2:	6179      	str	r1, [r7, #20]
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	f04f 0300 	mov.w	r3, #0
 80018dc:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80018e0:	4649      	mov	r1, r9
 80018e2:	008b      	lsls	r3, r1, #2
 80018e4:	4641      	mov	r1, r8
 80018e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018ea:	4641      	mov	r1, r8
 80018ec:	008a      	lsls	r2, r1, #2
 80018ee:	4610      	mov	r0, r2
 80018f0:	4619      	mov	r1, r3
 80018f2:	4603      	mov	r3, r0
 80018f4:	4622      	mov	r2, r4
 80018f6:	189b      	adds	r3, r3, r2
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	460b      	mov	r3, r1
 80018fc:	462a      	mov	r2, r5
 80018fe:	eb42 0303 	adc.w	r3, r2, r3
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	f04f 0300 	mov.w	r3, #0
 800190c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001910:	4649      	mov	r1, r9
 8001912:	008b      	lsls	r3, r1, #2
 8001914:	4641      	mov	r1, r8
 8001916:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800191a:	4641      	mov	r1, r8
 800191c:	008a      	lsls	r2, r1, #2
 800191e:	4610      	mov	r0, r2
 8001920:	4619      	mov	r1, r3
 8001922:	4603      	mov	r3, r0
 8001924:	4622      	mov	r2, r4
 8001926:	189b      	adds	r3, r3, r2
 8001928:	67bb      	str	r3, [r7, #120]	; 0x78
 800192a:	462b      	mov	r3, r5
 800192c:	460a      	mov	r2, r1
 800192e:	eb42 0303 	adc.w	r3, r2, r3
 8001932:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001934:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001938:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800193c:	f7ff f9c4 	bl	8000cc8 <__aeabi_ldivmod>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	  var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 8001948:	4b6b      	ldr	r3, [pc, #428]	; (8001af8 <BMP280_ReadTemperatureAndPressure+0x5c8>)
 800194a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800194e:	b21b      	sxth	r3, r3
 8001950:	17da      	asrs	r2, r3, #31
 8001952:	673b      	str	r3, [r7, #112]	; 0x70
 8001954:	677a      	str	r2, [r7, #116]	; 0x74
 8001956:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800195a:	f04f 0000 	mov.w	r0, #0
 800195e:	f04f 0100 	mov.w	r1, #0
 8001962:	0b50      	lsrs	r0, r2, #13
 8001964:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001968:	1359      	asrs	r1, r3, #13
 800196a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 800196e:	462b      	mov	r3, r5
 8001970:	fb00 f203 	mul.w	r2, r0, r3
 8001974:	4623      	mov	r3, r4
 8001976:	fb03 f301 	mul.w	r3, r3, r1
 800197a:	4413      	add	r3, r2
 800197c:	4622      	mov	r2, r4
 800197e:	fba2 1200 	umull	r1, r2, r2, r0
 8001982:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001986:	460a      	mov	r2, r1
 8001988:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800198c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001990:	4413      	add	r3, r2
 8001992:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001996:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800199a:	f04f 0000 	mov.w	r0, #0
 800199e:	f04f 0100 	mov.w	r1, #0
 80019a2:	0b50      	lsrs	r0, r2, #13
 80019a4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80019a8:	1359      	asrs	r1, r3, #13
 80019aa:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80019ae:	462b      	mov	r3, r5
 80019b0:	fb00 f203 	mul.w	r2, r0, r3
 80019b4:	4623      	mov	r3, r4
 80019b6:	fb03 f301 	mul.w	r3, r3, r1
 80019ba:	4413      	add	r3, r2
 80019bc:	4622      	mov	r2, r4
 80019be:	fba2 1200 	umull	r1, r2, r2, r0
 80019c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80019c6:	460a      	mov	r2, r1
 80019c8:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80019cc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80019d0:	4413      	add	r3, r2
 80019d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	f04f 0300 	mov.w	r3, #0
 80019de:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80019e2:	4621      	mov	r1, r4
 80019e4:	0e4a      	lsrs	r2, r1, #25
 80019e6:	4629      	mov	r1, r5
 80019e8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80019ec:	4629      	mov	r1, r5
 80019ee:	164b      	asrs	r3, r1, #25
 80019f0:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	  var2 = (((int64_t)p8) * p) >> 19;
 80019f4:	4b41      	ldr	r3, [pc, #260]	; (8001afc <BMP280_ReadTemperatureAndPressure+0x5cc>)
 80019f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019fa:	b21b      	sxth	r3, r3
 80019fc:	17da      	asrs	r2, r3, #31
 80019fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8001a00:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001a02:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a06:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001a0a:	462a      	mov	r2, r5
 8001a0c:	fb02 f203 	mul.w	r2, r2, r3
 8001a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a14:	4621      	mov	r1, r4
 8001a16:	fb01 f303 	mul.w	r3, r1, r3
 8001a1a:	4413      	add	r3, r2
 8001a1c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001a20:	4621      	mov	r1, r4
 8001a22:	fba2 1201 	umull	r1, r2, r2, r1
 8001a26:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001a2a:	460a      	mov	r2, r1
 8001a2c:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001a30:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001a34:	4413      	add	r3, r2
 8001a36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	f04f 0300 	mov.w	r3, #0
 8001a42:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001a46:	4621      	mov	r1, r4
 8001a48:	0cca      	lsrs	r2, r1, #19
 8001a4a:	4629      	mov	r1, r5
 8001a4c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001a50:	4629      	mov	r1, r5
 8001a52:	14cb      	asrs	r3, r1, #19
 8001a54:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

	  p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8001a58:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001a5c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001a60:	1884      	adds	r4, r0, r2
 8001a62:	663c      	str	r4, [r7, #96]	; 0x60
 8001a64:	eb41 0303 	adc.w	r3, r1, r3
 8001a68:	667b      	str	r3, [r7, #100]	; 0x64
 8001a6a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001a6e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001a72:	4621      	mov	r1, r4
 8001a74:	1889      	adds	r1, r1, r2
 8001a76:	65b9      	str	r1, [r7, #88]	; 0x58
 8001a78:	4629      	mov	r1, r5
 8001a7a:	eb43 0101 	adc.w	r1, r3, r1
 8001a7e:	65f9      	str	r1, [r7, #92]	; 0x5c
 8001a80:	f04f 0000 	mov.w	r0, #0
 8001a84:	f04f 0100 	mov.w	r1, #0
 8001a88:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001a8c:	4623      	mov	r3, r4
 8001a8e:	0a18      	lsrs	r0, r3, #8
 8001a90:	462b      	mov	r3, r5
 8001a92:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001a96:	462b      	mov	r3, r5
 8001a98:	1219      	asrs	r1, r3, #8
 8001a9a:	4b19      	ldr	r3, [pc, #100]	; (8001b00 <BMP280_ReadTemperatureAndPressure+0x5d0>)
 8001a9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aa0:	b21b      	sxth	r3, r3
 8001aa2:	17da      	asrs	r2, r3, #31
 8001aa4:	653b      	str	r3, [r7, #80]	; 0x50
 8001aa6:	657a      	str	r2, [r7, #84]	; 0x54
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	f04f 0300 	mov.w	r3, #0
 8001ab0:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001ab4:	464c      	mov	r4, r9
 8001ab6:	0123      	lsls	r3, r4, #4
 8001ab8:	4644      	mov	r4, r8
 8001aba:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001abe:	4644      	mov	r4, r8
 8001ac0:	0122      	lsls	r2, r4, #4
 8001ac2:	1884      	adds	r4, r0, r2
 8001ac4:	603c      	str	r4, [r7, #0]
 8001ac6:	eb41 0303 	adc.w	r3, r1, r3
 8001aca:	607b      	str	r3, [r7, #4]
 8001acc:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001ad0:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	  *pressure = (int32_t)p/256;
 8001ad4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	da00      	bge.n	8001ade <BMP280_ReadTemperatureAndPressure+0x5ae>
 8001adc:	33ff      	adds	r3, #255	; 0xff
 8001ade:	121b      	asrs	r3, r3, #8
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001ae6:	601a      	str	r2, [r3, #0]

	  return 0;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001af0:	46bd      	mov	sp, r7
 8001af2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001af6:	bf00      	nop
 8001af8:	20000216 	.word	0x20000216
 8001afc:	20000214 	.word	0x20000214
 8001b00:	20000212 	.word	0x20000212

08001b04 <map>:
static void MX_USART3_UART_Init(void);
static void MX_SPI1_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */
uint32_t map(float x, float in_min, float in_max, uint32_t out_min, uint32_t out_max) {
 8001b04:	b480      	push	{r7}
 8001b06:	b087      	sub	sp, #28
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	ed87 0a05 	vstr	s0, [r7, #20]
 8001b0e:	edc7 0a04 	vstr	s1, [r7, #16]
 8001b12:	ed87 1a03 	vstr	s2, [r7, #12]
 8001b16:	60b8      	str	r0, [r7, #8]
 8001b18:	6079      	str	r1, [r7, #4]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001b1a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b1e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b22:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	ee07 3a90 	vmov	s15, r3
 8001b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b34:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001b38:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b3c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	ee07 3a90 	vmov	s15, r3
 8001b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b5a:	ee17 3a90 	vmov	r3, s15
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	371c      	adds	r7, #28
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
	...

08001b6c <init_params>:

void init_params() {
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
	Kp = 1.823f;
 8001b70:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <init_params+0x20>)
 8001b72:	4a07      	ldr	r2, [pc, #28]	; (8001b90 <init_params+0x24>)
 8001b74:	601a      	str	r2, [r3, #0]
	Ti = 35.9047f;
 8001b76:	4b07      	ldr	r3, [pc, #28]	; (8001b94 <init_params+0x28>)
 8001b78:	4a07      	ldr	r2, [pc, #28]	; (8001b98 <init_params+0x2c>)
 8001b7a:	601a      	str	r2, [r3, #0]
	u_ref = 25.f;
 8001b7c:	4b07      	ldr	r3, [pc, #28]	; (8001b9c <init_params+0x30>)
 8001b7e:	4a08      	ldr	r2, [pc, #32]	; (8001ba0 <init_params+0x34>)
 8001b80:	601a      	str	r2, [r3, #0]
}
 8001b82:	bf00      	nop
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	20000438 	.word	0x20000438
 8001b90:	3fe95810 	.word	0x3fe95810
 8001b94:	2000043c 	.word	0x2000043c
 8001b98:	420f9e6a 	.word	0x420f9e6a
 8001b9c:	20000440 	.word	0x20000440
 8001ba0:	41c80000 	.word	0x41c80000

08001ba4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ba8:	f000 fe65 	bl	8002876 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bac:	f000 f82c 	bl	8001c08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bb0:	f000 f9c6 	bl	8001f40 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001bb4:	f000 f994 	bl	8001ee0 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8001bb8:	f000 f88e 	bl	8001cd8 <MX_SPI1_Init>
  MX_TIM3_Init();
 8001bbc:	f000 f940 	bl	8001e40 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001bc0:	f000 f8c8 	bl	8001d54 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  init_params();
 8001bc4:	f7ff ffd2 	bl	8001b6c <init_params>
  HAL_UART_Receive_IT(&huart3, rx_buffer, sizeof(rx_buffer));
 8001bc8:	2210      	movs	r2, #16
 8001bca:	490a      	ldr	r1, [pc, #40]	; (8001bf4 <main+0x50>)
 8001bcc:	480a      	ldr	r0, [pc, #40]	; (8001bf8 <main+0x54>)
 8001bce:	f004 f9ea 	bl	8005fa6 <HAL_UART_Receive_IT>
  BMP280_Init(&hspi1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	2203      	movs	r2, #3
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	4808      	ldr	r0, [pc, #32]	; (8001bfc <main+0x58>)
 8001bda:	f7ff fb51 	bl	8001280 <BMP280_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 8001bde:	4808      	ldr	r0, [pc, #32]	; (8001c00 <main+0x5c>)
 8001be0:	f002 ff9c 	bl	8004b1c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001be4:	210c      	movs	r1, #12
 8001be6:	4807      	ldr	r0, [pc, #28]	; (8001c04 <main+0x60>)
 8001be8:	f003 f872 	bl	8004cd0 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_Delay(1);
 8001bec:	2001      	movs	r0, #1
 8001bee:	f000 fe9f 	bl	8002930 <HAL_Delay>
 8001bf2:	e7fb      	b.n	8001bec <main+0x48>
 8001bf4:	20000428 	.word	0x20000428
 8001bf8:	2000031c 	.word	0x2000031c
 8001bfc:	20000220 	.word	0x20000220
 8001c00:	200002d0 	.word	0x200002d0
 8001c04:	20000284 	.word	0x20000284

08001c08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b094      	sub	sp, #80	; 0x50
 8001c0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c0e:	f107 0320 	add.w	r3, r7, #32
 8001c12:	2230      	movs	r2, #48	; 0x30
 8001c14:	2100      	movs	r1, #0
 8001c16:	4618      	mov	r0, r3
 8001c18:	f005 fc68 	bl	80074ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c1c:	f107 030c 	add.w	r3, r7, #12
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	60da      	str	r2, [r3, #12]
 8001c2a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001c2c:	f001 fa0e 	bl	800304c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c30:	4b27      	ldr	r3, [pc, #156]	; (8001cd0 <SystemClock_Config+0xc8>)
 8001c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c34:	4a26      	ldr	r2, [pc, #152]	; (8001cd0 <SystemClock_Config+0xc8>)
 8001c36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c3a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c3c:	4b24      	ldr	r3, [pc, #144]	; (8001cd0 <SystemClock_Config+0xc8>)
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c48:	4b22      	ldr	r3, [pc, #136]	; (8001cd4 <SystemClock_Config+0xcc>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c50:	4a20      	ldr	r2, [pc, #128]	; (8001cd4 <SystemClock_Config+0xcc>)
 8001c52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c56:	6013      	str	r3, [r2, #0]
 8001c58:	4b1e      	ldr	r3, [pc, #120]	; (8001cd4 <SystemClock_Config+0xcc>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c60:	607b      	str	r3, [r7, #4]
 8001c62:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c64:	2301      	movs	r3, #1
 8001c66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001c68:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c78:	2304      	movs	r3, #4
 8001c7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001c7c:	2348      	movs	r3, #72	; 0x48
 8001c7e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c80:	2302      	movs	r3, #2
 8001c82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001c84:	2303      	movs	r3, #3
 8001c86:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c88:	f107 0320 	add.w	r3, r7, #32
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f001 f9ed 	bl	800306c <HAL_RCC_OscConfig>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c98:	f000 fb4c 	bl	8002334 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c9c:	230f      	movs	r3, #15
 8001c9e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001cb2:	f107 030c 	add.w	r3, r7, #12
 8001cb6:	2102      	movs	r1, #2
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f001 fc7b 	bl	80035b4 <HAL_RCC_ClockConfig>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001cc4:	f000 fb36 	bl	8002334 <Error_Handler>
  }
}
 8001cc8:	bf00      	nop
 8001cca:	3750      	adds	r7, #80	; 0x50
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40007000 	.word	0x40007000

08001cd8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001cdc:	4b1b      	ldr	r3, [pc, #108]	; (8001d4c <MX_SPI1_Init+0x74>)
 8001cde:	4a1c      	ldr	r2, [pc, #112]	; (8001d50 <MX_SPI1_Init+0x78>)
 8001ce0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ce2:	4b1a      	ldr	r3, [pc, #104]	; (8001d4c <MX_SPI1_Init+0x74>)
 8001ce4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ce8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cea:	4b18      	ldr	r3, [pc, #96]	; (8001d4c <MX_SPI1_Init+0x74>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cf0:	4b16      	ldr	r3, [pc, #88]	; (8001d4c <MX_SPI1_Init+0x74>)
 8001cf2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001cf6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cf8:	4b14      	ldr	r3, [pc, #80]	; (8001d4c <MX_SPI1_Init+0x74>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cfe:	4b13      	ldr	r3, [pc, #76]	; (8001d4c <MX_SPI1_Init+0x74>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d04:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <MX_SPI1_Init+0x74>)
 8001d06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d0a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001d0c:	4b0f      	ldr	r3, [pc, #60]	; (8001d4c <MX_SPI1_Init+0x74>)
 8001d0e:	2218      	movs	r2, #24
 8001d10:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d12:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <MX_SPI1_Init+0x74>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d18:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <MX_SPI1_Init+0x74>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d1e:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <MX_SPI1_Init+0x74>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001d24:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <MX_SPI1_Init+0x74>)
 8001d26:	2207      	movs	r2, #7
 8001d28:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d2a:	4b08      	ldr	r3, [pc, #32]	; (8001d4c <MX_SPI1_Init+0x74>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d30:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <MX_SPI1_Init+0x74>)
 8001d32:	2208      	movs	r2, #8
 8001d34:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d36:	4805      	ldr	r0, [pc, #20]	; (8001d4c <MX_SPI1_Init+0x74>)
 8001d38:	f002 fa52 	bl	80041e0 <HAL_SPI_Init>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001d42:	f000 faf7 	bl	8002334 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000220 	.word	0x20000220
 8001d50:	40013000 	.word	0x40013000

08001d54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08e      	sub	sp, #56	; 0x38
 8001d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	609a      	str	r2, [r3, #8]
 8001d66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d68:	f107 031c 	add.w	r3, r7, #28
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d74:	463b      	mov	r3, r7
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	605a      	str	r2, [r3, #4]
 8001d7c:	609a      	str	r2, [r3, #8]
 8001d7e:	60da      	str	r2, [r3, #12]
 8001d80:	611a      	str	r2, [r3, #16]
 8001d82:	615a      	str	r2, [r3, #20]
 8001d84:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d86:	4b2d      	ldr	r3, [pc, #180]	; (8001e3c <MX_TIM2_Init+0xe8>)
 8001d88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d8c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001d8e:	4b2b      	ldr	r3, [pc, #172]	; (8001e3c <MX_TIM2_Init+0xe8>)
 8001d90:	2247      	movs	r2, #71	; 0x47
 8001d92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d94:	4b29      	ldr	r3, [pc, #164]	; (8001e3c <MX_TIM2_Init+0xe8>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001d9a:	4b28      	ldr	r3, [pc, #160]	; (8001e3c <MX_TIM2_Init+0xe8>)
 8001d9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001da0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001da2:	4b26      	ldr	r3, [pc, #152]	; (8001e3c <MX_TIM2_Init+0xe8>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001da8:	4b24      	ldr	r3, [pc, #144]	; (8001e3c <MX_TIM2_Init+0xe8>)
 8001daa:	2280      	movs	r2, #128	; 0x80
 8001dac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001dae:	4823      	ldr	r0, [pc, #140]	; (8001e3c <MX_TIM2_Init+0xe8>)
 8001db0:	f002 fe5c 	bl	8004a6c <HAL_TIM_Base_Init>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001dba:	f000 fabb 	bl	8002334 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001dc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dc8:	4619      	mov	r1, r3
 8001dca:	481c      	ldr	r0, [pc, #112]	; (8001e3c <MX_TIM2_Init+0xe8>)
 8001dcc:	f003 faae 	bl	800532c <HAL_TIM_ConfigClockSource>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001dd6:	f000 faad 	bl	8002334 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001dda:	4818      	ldr	r0, [pc, #96]	; (8001e3c <MX_TIM2_Init+0xe8>)
 8001ddc:	f002 ff16 	bl	8004c0c <HAL_TIM_PWM_Init>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001de6:	f000 faa5 	bl	8002334 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dee:	2300      	movs	r3, #0
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001df2:	f107 031c 	add.w	r3, r7, #28
 8001df6:	4619      	mov	r1, r3
 8001df8:	4810      	ldr	r0, [pc, #64]	; (8001e3c <MX_TIM2_Init+0xe8>)
 8001dfa:	f003 ff47 	bl	8005c8c <HAL_TIMEx_MasterConfigSynchronization>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001e04:	f000 fa96 	bl	8002334 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e08:	2360      	movs	r3, #96	; 0x60
 8001e0a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e10:	2300      	movs	r3, #0
 8001e12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e14:	2300      	movs	r3, #0
 8001e16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e18:	463b      	mov	r3, r7
 8001e1a:	220c      	movs	r2, #12
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4807      	ldr	r0, [pc, #28]	; (8001e3c <MX_TIM2_Init+0xe8>)
 8001e20:	f003 f970 	bl	8005104 <HAL_TIM_PWM_ConfigChannel>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001e2a:	f000 fa83 	bl	8002334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e2e:	4803      	ldr	r0, [pc, #12]	; (8001e3c <MX_TIM2_Init+0xe8>)
 8001e30:	f000 fb44 	bl	80024bc <HAL_TIM_MspPostInit>

}
 8001e34:	bf00      	nop
 8001e36:	3738      	adds	r7, #56	; 0x38
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	20000284 	.word	0x20000284

08001e40 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b088      	sub	sp, #32
 8001e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e46:	f107 0310 	add.w	r3, r7, #16
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	605a      	str	r2, [r3, #4]
 8001e50:	609a      	str	r2, [r3, #8]
 8001e52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e54:	1d3b      	adds	r3, r7, #4
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	605a      	str	r2, [r3, #4]
 8001e5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e5e:	4b1e      	ldr	r3, [pc, #120]	; (8001ed8 <MX_TIM3_Init+0x98>)
 8001e60:	4a1e      	ldr	r2, [pc, #120]	; (8001edc <MX_TIM3_Init+0x9c>)
 8001e62:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1440-1;
 8001e64:	4b1c      	ldr	r3, [pc, #112]	; (8001ed8 <MX_TIM3_Init+0x98>)
 8001e66:	f240 529f 	movw	r2, #1439	; 0x59f
 8001e6a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e6c:	4b1a      	ldr	r3, [pc, #104]	; (8001ed8 <MX_TIM3_Init+0x98>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8001e72:	4b19      	ldr	r3, [pc, #100]	; (8001ed8 <MX_TIM3_Init+0x98>)
 8001e74:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001e78:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e7a:	4b17      	ldr	r3, [pc, #92]	; (8001ed8 <MX_TIM3_Init+0x98>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e80:	4b15      	ldr	r3, [pc, #84]	; (8001ed8 <MX_TIM3_Init+0x98>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e86:	4814      	ldr	r0, [pc, #80]	; (8001ed8 <MX_TIM3_Init+0x98>)
 8001e88:	f002 fdf0 	bl	8004a6c <HAL_TIM_Base_Init>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001e92:	f000 fa4f 	bl	8002334 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e9c:	f107 0310 	add.w	r3, r7, #16
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	480d      	ldr	r0, [pc, #52]	; (8001ed8 <MX_TIM3_Init+0x98>)
 8001ea4:	f003 fa42 	bl	800532c <HAL_TIM_ConfigClockSource>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001eae:	f000 fa41 	bl	8002334 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001eba:	1d3b      	adds	r3, r7, #4
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4806      	ldr	r0, [pc, #24]	; (8001ed8 <MX_TIM3_Init+0x98>)
 8001ec0:	f003 fee4 	bl	8005c8c <HAL_TIMEx_MasterConfigSynchronization>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001eca:	f000 fa33 	bl	8002334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ece:	bf00      	nop
 8001ed0:	3720      	adds	r7, #32
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	200002d0 	.word	0x200002d0
 8001edc:	40000400 	.word	0x40000400

08001ee0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ee4:	4b14      	ldr	r3, [pc, #80]	; (8001f38 <MX_USART3_UART_Init+0x58>)
 8001ee6:	4a15      	ldr	r2, [pc, #84]	; (8001f3c <MX_USART3_UART_Init+0x5c>)
 8001ee8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001eea:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <MX_USART3_UART_Init+0x58>)
 8001eec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ef0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ef2:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <MX_USART3_UART_Init+0x58>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ef8:	4b0f      	ldr	r3, [pc, #60]	; (8001f38 <MX_USART3_UART_Init+0x58>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001efe:	4b0e      	ldr	r3, [pc, #56]	; (8001f38 <MX_USART3_UART_Init+0x58>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f04:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <MX_USART3_UART_Init+0x58>)
 8001f06:	220c      	movs	r2, #12
 8001f08:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f0a:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <MX_USART3_UART_Init+0x58>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f10:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <MX_USART3_UART_Init+0x58>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f16:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <MX_USART3_UART_Init+0x58>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f1c:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <MX_USART3_UART_Init+0x58>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f22:	4805      	ldr	r0, [pc, #20]	; (8001f38 <MX_USART3_UART_Init+0x58>)
 8001f24:	f003 ff5e 	bl	8005de4 <HAL_UART_Init>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001f2e:	f000 fa01 	bl	8002334 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	2000031c 	.word	0x2000031c
 8001f3c:	40004800 	.word	0x40004800

08001f40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08c      	sub	sp, #48	; 0x30
 8001f44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f46:	f107 031c 	add.w	r3, r7, #28
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	605a      	str	r2, [r3, #4]
 8001f50:	609a      	str	r2, [r3, #8]
 8001f52:	60da      	str	r2, [r3, #12]
 8001f54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f56:	4b80      	ldr	r3, [pc, #512]	; (8002158 <MX_GPIO_Init+0x218>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	4a7f      	ldr	r2, [pc, #508]	; (8002158 <MX_GPIO_Init+0x218>)
 8001f5c:	f043 0304 	orr.w	r3, r3, #4
 8001f60:	6313      	str	r3, [r2, #48]	; 0x30
 8001f62:	4b7d      	ldr	r3, [pc, #500]	; (8002158 <MX_GPIO_Init+0x218>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	f003 0304 	and.w	r3, r3, #4
 8001f6a:	61bb      	str	r3, [r7, #24]
 8001f6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f6e:	4b7a      	ldr	r3, [pc, #488]	; (8002158 <MX_GPIO_Init+0x218>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	4a79      	ldr	r2, [pc, #484]	; (8002158 <MX_GPIO_Init+0x218>)
 8001f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f78:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7a:	4b77      	ldr	r3, [pc, #476]	; (8002158 <MX_GPIO_Init+0x218>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f82:	617b      	str	r3, [r7, #20]
 8001f84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f86:	4b74      	ldr	r3, [pc, #464]	; (8002158 <MX_GPIO_Init+0x218>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	4a73      	ldr	r2, [pc, #460]	; (8002158 <MX_GPIO_Init+0x218>)
 8001f8c:	f043 0301 	orr.w	r3, r3, #1
 8001f90:	6313      	str	r3, [r2, #48]	; 0x30
 8001f92:	4b71      	ldr	r3, [pc, #452]	; (8002158 <MX_GPIO_Init+0x218>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f9e:	4b6e      	ldr	r3, [pc, #440]	; (8002158 <MX_GPIO_Init+0x218>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	4a6d      	ldr	r2, [pc, #436]	; (8002158 <MX_GPIO_Init+0x218>)
 8001fa4:	f043 0302 	orr.w	r3, r3, #2
 8001fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001faa:	4b6b      	ldr	r3, [pc, #428]	; (8002158 <MX_GPIO_Init+0x218>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fb6:	4b68      	ldr	r3, [pc, #416]	; (8002158 <MX_GPIO_Init+0x218>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	4a67      	ldr	r2, [pc, #412]	; (8002158 <MX_GPIO_Init+0x218>)
 8001fbc:	f043 0308 	orr.w	r3, r3, #8
 8001fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc2:	4b65      	ldr	r3, [pc, #404]	; (8002158 <MX_GPIO_Init+0x218>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f003 0308 	and.w	r3, r3, #8
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001fce:	4b62      	ldr	r3, [pc, #392]	; (8002158 <MX_GPIO_Init+0x218>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	4a61      	ldr	r2, [pc, #388]	; (8002158 <MX_GPIO_Init+0x218>)
 8001fd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fda:	4b5f      	ldr	r3, [pc, #380]	; (8002158 <MX_GPIO_Init+0x218>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe2:	607b      	str	r3, [r7, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	2110      	movs	r1, #16
 8001fea:	485c      	ldr	r0, [pc, #368]	; (800215c <MX_GPIO_Init+0x21c>)
 8001fec:	f001 f814 	bl	8003018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f244 0181 	movw	r1, #16513	; 0x4081
 8001ff6:	485a      	ldr	r0, [pc, #360]	; (8002160 <MX_GPIO_Init+0x220>)
 8001ff8:	f001 f80e 	bl	8003018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	2140      	movs	r1, #64	; 0x40
 8002000:	4858      	ldr	r0, [pc, #352]	; (8002164 <MX_GPIO_Init+0x224>)
 8002002:	f001 f809 	bl	8003018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002006:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800200a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800200c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002010:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002012:	2300      	movs	r3, #0
 8002014:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002016:	f107 031c 	add.w	r3, r7, #28
 800201a:	4619      	mov	r1, r3
 800201c:	4852      	ldr	r0, [pc, #328]	; (8002168 <MX_GPIO_Init+0x228>)
 800201e:	f000 fe4f 	bl	8002cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002022:	2332      	movs	r3, #50	; 0x32
 8002024:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002026:	2302      	movs	r3, #2
 8002028:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202e:	2303      	movs	r3, #3
 8002030:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002032:	230b      	movs	r3, #11
 8002034:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002036:	f107 031c 	add.w	r3, r7, #28
 800203a:	4619      	mov	r1, r3
 800203c:	484a      	ldr	r0, [pc, #296]	; (8002168 <MX_GPIO_Init+0x228>)
 800203e:	f000 fe3f 	bl	8002cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002042:	2386      	movs	r3, #134	; 0x86
 8002044:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002046:	2302      	movs	r3, #2
 8002048:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204a:	2300      	movs	r3, #0
 800204c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204e:	2303      	movs	r3, #3
 8002050:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002052:	230b      	movs	r3, #11
 8002054:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002056:	f107 031c 	add.w	r3, r7, #28
 800205a:	4619      	mov	r1, r3
 800205c:	483f      	ldr	r0, [pc, #252]	; (800215c <MX_GPIO_Init+0x21c>)
 800205e:	f000 fe2f 	bl	8002cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002062:	2310      	movs	r3, #16
 8002064:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002066:	2301      	movs	r3, #1
 8002068:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206e:	2300      	movs	r3, #0
 8002070:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002072:	f107 031c 	add.w	r3, r7, #28
 8002076:	4619      	mov	r1, r3
 8002078:	4838      	ldr	r0, [pc, #224]	; (800215c <MX_GPIO_Init+0x21c>)
 800207a:	f000 fe21 	bl	8002cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800207e:	f244 0381 	movw	r3, #16513	; 0x4081
 8002082:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002084:	2301      	movs	r3, #1
 8002086:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208c:	2300      	movs	r3, #0
 800208e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002090:	f107 031c 	add.w	r3, r7, #28
 8002094:	4619      	mov	r1, r3
 8002096:	4832      	ldr	r0, [pc, #200]	; (8002160 <MX_GPIO_Init+0x220>)
 8002098:	f000 fe12 	bl	8002cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800209c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a2:	2302      	movs	r3, #2
 80020a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020aa:	2303      	movs	r3, #3
 80020ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020ae:	230b      	movs	r3, #11
 80020b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80020b2:	f107 031c 	add.w	r3, r7, #28
 80020b6:	4619      	mov	r1, r3
 80020b8:	4829      	ldr	r0, [pc, #164]	; (8002160 <MX_GPIO_Init+0x220>)
 80020ba:	f000 fe01 	bl	8002cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80020be:	2340      	movs	r3, #64	; 0x40
 80020c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020c2:	2301      	movs	r3, #1
 80020c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c6:	2300      	movs	r3, #0
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ca:	2300      	movs	r3, #0
 80020cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80020ce:	f107 031c 	add.w	r3, r7, #28
 80020d2:	4619      	mov	r1, r3
 80020d4:	4823      	ldr	r0, [pc, #140]	; (8002164 <MX_GPIO_Init+0x224>)
 80020d6:	f000 fdf3 	bl	8002cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80020da:	2380      	movs	r3, #128	; 0x80
 80020dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020de:	2300      	movs	r3, #0
 80020e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80020e6:	f107 031c 	add.w	r3, r7, #28
 80020ea:	4619      	mov	r1, r3
 80020ec:	481d      	ldr	r0, [pc, #116]	; (8002164 <MX_GPIO_Init+0x224>)
 80020ee:	f000 fde7 	bl	8002cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80020f2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80020f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f8:	2302      	movs	r3, #2
 80020fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002100:	2303      	movs	r3, #3
 8002102:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002104:	230a      	movs	r3, #10
 8002106:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002108:	f107 031c 	add.w	r3, r7, #28
 800210c:	4619      	mov	r1, r3
 800210e:	4813      	ldr	r0, [pc, #76]	; (800215c <MX_GPIO_Init+0x21c>)
 8002110:	f000 fdd6 	bl	8002cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002114:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002118:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800211a:	2300      	movs	r3, #0
 800211c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211e:	2300      	movs	r3, #0
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002122:	f107 031c 	add.w	r3, r7, #28
 8002126:	4619      	mov	r1, r3
 8002128:	480c      	ldr	r0, [pc, #48]	; (800215c <MX_GPIO_Init+0x21c>)
 800212a:	f000 fdc9 	bl	8002cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800212e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002132:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002134:	2302      	movs	r3, #2
 8002136:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002138:	2300      	movs	r3, #0
 800213a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213c:	2303      	movs	r3, #3
 800213e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002140:	230b      	movs	r3, #11
 8002142:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002144:	f107 031c 	add.w	r3, r7, #28
 8002148:	4619      	mov	r1, r3
 800214a:	4806      	ldr	r0, [pc, #24]	; (8002164 <MX_GPIO_Init+0x224>)
 800214c:	f000 fdb8 	bl	8002cc0 <HAL_GPIO_Init>

}
 8002150:	bf00      	nop
 8002152:	3730      	adds	r7, #48	; 0x30
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40023800 	.word	0x40023800
 800215c:	40020000 	.word	0x40020000
 8002160:	40020400 	.word	0x40020400
 8002164:	40021800 	.word	0x40021800
 8002168:	40020800 	.word	0x40020800

0800216c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3) {
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a0a      	ldr	r2, [pc, #40]	; (80021a4 <HAL_UART_RxCpltCallback+0x38>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d10e      	bne.n	800219c <HAL_UART_RxCpltCallback+0x30>
		sscanf(rx_buffer, "{\"Uref\":%f}", &u_ref);
 800217e:	4a0a      	ldr	r2, [pc, #40]	; (80021a8 <HAL_UART_RxCpltCallback+0x3c>)
 8002180:	490a      	ldr	r1, [pc, #40]	; (80021ac <HAL_UART_RxCpltCallback+0x40>)
 8002182:	480b      	ldr	r0, [pc, #44]	; (80021b0 <HAL_UART_RxCpltCallback+0x44>)
 8002184:	f006 f88e 	bl	80082a4 <siscanf>
		memset(rx_buffer, 0, sizeof(rx_buffer));
 8002188:	2210      	movs	r2, #16
 800218a:	2100      	movs	r1, #0
 800218c:	4808      	ldr	r0, [pc, #32]	; (80021b0 <HAL_UART_RxCpltCallback+0x44>)
 800218e:	f005 f9ad 	bl	80074ec <memset>

		HAL_UART_Receive_IT(&huart3, rx_buffer, sizeof(rx_buffer));
 8002192:	2210      	movs	r2, #16
 8002194:	4906      	ldr	r1, [pc, #24]	; (80021b0 <HAL_UART_RxCpltCallback+0x44>)
 8002196:	4807      	ldr	r0, [pc, #28]	; (80021b4 <HAL_UART_RxCpltCallback+0x48>)
 8002198:	f003 ff05 	bl	8005fa6 <HAL_UART_Receive_IT>
	}
}
 800219c:	bf00      	nop
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40004800 	.word	0x40004800
 80021a8:	20000440 	.word	0x20000440
 80021ac:	0800c6d0 	.word	0x0800c6d0
 80021b0:	20000428 	.word	0x20000428
 80021b4:	2000031c 	.word	0x2000031c

080021b8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 80021b8:	b5b0      	push	{r4, r5, r7, lr}
 80021ba:	b08a      	sub	sp, #40	; 0x28
 80021bc:	af04      	add	r7, sp, #16
 80021be:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3) {
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a4e      	ldr	r2, [pc, #312]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	f040 8092 	bne.w	80022f0 <HAL_TIM_PeriodElapsedCallback+0x138>
		// poprzednie wartosci
		static float et_prev = 0.f;
		static float ut_prev = 0.f;

		// pomiar aktualnej wartosci
		BMP280_ReadTemperatureAndPressure(&temp_reading, &pressure);
 80021cc:	494d      	ldr	r1, [pc, #308]	; (8002304 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80021ce:	484e      	ldr	r0, [pc, #312]	; (8002308 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80021d0:	f7ff f9ae 	bl	8001530 <BMP280_ReadTemperatureAndPressure>

		// obl wartosci sterowania
		float et = u_ref - temp_reading;
 80021d4:	4b4d      	ldr	r3, [pc, #308]	; (800230c <HAL_TIM_PeriodElapsedCallback+0x154>)
 80021d6:	ed93 7a00 	vldr	s14, [r3]
 80021da:	4b4b      	ldr	r3, [pc, #300]	; (8002308 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80021dc:	edd3 7a00 	vldr	s15, [r3]
 80021e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021e4:	edc7 7a05 	vstr	s15, [r7, #20]
		float ut = ut_prev + Kp*(1+Tp/Ti)*et-Kp*et_prev;
 80021e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021ec:	4b48      	ldr	r3, [pc, #288]	; (8002310 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80021ee:	ed93 7a00 	vldr	s14, [r3]
 80021f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80021fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80021fe:	4b45      	ldr	r3, [pc, #276]	; (8002314 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002200:	edd3 7a00 	vldr	s15, [r3]
 8002204:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002208:	edd7 7a05 	vldr	s15, [r7, #20]
 800220c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002210:	4b41      	ldr	r3, [pc, #260]	; (8002318 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002212:	edd3 7a00 	vldr	s15, [r3]
 8002216:	ee37 7a27 	vadd.f32	s14, s14, s15
 800221a:	4b3e      	ldr	r3, [pc, #248]	; (8002314 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800221c:	edd3 6a00 	vldr	s13, [r3]
 8002220:	4b3e      	ldr	r3, [pc, #248]	; (800231c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002222:	edd3 7a00 	vldr	s15, [r3]
 8002226:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800222a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800222e:	edc7 7a04 	vstr	s15, [r7, #16]

		// ograniczenie sterowania
		ut = fmax(fmin(ut, u_sat), 0.f);
 8002232:	6938      	ldr	r0, [r7, #16]
 8002234:	f7fe f9a8 	bl	8000588 <__aeabi_f2d>
 8002238:	4604      	mov	r4, r0
 800223a:	460d      	mov	r5, r1
 800223c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002240:	4618      	mov	r0, r3
 8002242:	f7fe f9a1 	bl	8000588 <__aeabi_f2d>
 8002246:	4602      	mov	r2, r0
 8002248:	460b      	mov	r3, r1
 800224a:	ec43 2b11 	vmov	d1, r2, r3
 800224e:	ec45 4b10 	vmov	d0, r4, r5
 8002252:	f005 f8cf 	bl	80073f4 <fmin>
 8002256:	eeb0 7a40 	vmov.f32	s14, s0
 800225a:	eef0 7a60 	vmov.f32	s15, s1
 800225e:	ed9f 1b26 	vldr	d1, [pc, #152]	; 80022f8 <HAL_TIM_PeriodElapsedCallback+0x140>
 8002262:	eeb0 0a47 	vmov.f32	s0, s14
 8002266:	eef0 0a67 	vmov.f32	s1, s15
 800226a:	f005 f89c 	bl	80073a6 <fmax>
 800226e:	ec53 2b10 	vmov	r2, r3, d0
 8002272:	4610      	mov	r0, r2
 8002274:	4619      	mov	r1, r3
 8002276:	f7fe fcd7 	bl	8000c28 <__aeabi_d2f>
 800227a:	4603      	mov	r3, r0
 800227c:	613b      	str	r3, [r7, #16]

		// przeliczenie wypelnienia na pulsy
		uint32_t tim_pulse = map(ut, 0.f, u_sat, 0u, max_tim_pulse);
 800227e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002282:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002286:	4619      	mov	r1, r3
 8002288:	2000      	movs	r0, #0
 800228a:	eeb0 1a67 	vmov.f32	s2, s15
 800228e:	eddf 0a24 	vldr	s1, [pc, #144]	; 8002320 <HAL_TIM_PeriodElapsedCallback+0x168>
 8002292:	ed97 0a04 	vldr	s0, [r7, #16]
 8002296:	f7ff fc35 	bl	8001b04 <map>
 800229a:	60f8      	str	r0, [r7, #12]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, tim_pulse);
 800229c:	4b21      	ldr	r3, [pc, #132]	; (8002324 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	641a      	str	r2, [r3, #64]	; 0x40

		// zapisanie aktualnej wartosci uchybu i sterowania
		et_prev = et;
 80022a4:	4a1d      	ldr	r2, [pc, #116]	; (800231c <HAL_TIM_PeriodElapsedCallback+0x164>)
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	6013      	str	r3, [r2, #0]
		ut_prev = ut;
 80022aa:	4a1b      	ldr	r2, [pc, #108]	; (8002318 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	6013      	str	r3, [r2, #0]

		// odeslanie wartosc po uart
		int len = snprintf(buffer, sizeof(buffer)-1, "{\"Temp\":%.2f, \"Uref\":%.2f}\r\n", temp_reading, u_ref);
 80022b0:	4b15      	ldr	r3, [pc, #84]	; (8002308 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7fe f967 	bl	8000588 <__aeabi_f2d>
 80022ba:	4604      	mov	r4, r0
 80022bc:	460d      	mov	r5, r1
 80022be:	4b13      	ldr	r3, [pc, #76]	; (800230c <HAL_TIM_PeriodElapsedCallback+0x154>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7fe f960 	bl	8000588 <__aeabi_f2d>
 80022c8:	4602      	mov	r2, r0
 80022ca:	460b      	mov	r3, r1
 80022cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80022d0:	e9cd 4500 	strd	r4, r5, [sp]
 80022d4:	4a14      	ldr	r2, [pc, #80]	; (8002328 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80022d6:	217f      	movs	r1, #127	; 0x7f
 80022d8:	4814      	ldr	r0, [pc, #80]	; (800232c <HAL_TIM_PeriodElapsedCallback+0x174>)
 80022da:	f005 ff8f 	bl	80081fc <sniprintf>
 80022de:	60b8      	str	r0, [r7, #8]
		HAL_UART_Transmit(&huart3, buffer, len, HAL_MAX_DELAY);
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	f04f 33ff 	mov.w	r3, #4294967295
 80022e8:	4910      	ldr	r1, [pc, #64]	; (800232c <HAL_TIM_PeriodElapsedCallback+0x174>)
 80022ea:	4811      	ldr	r0, [pc, #68]	; (8002330 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80022ec:	f003 fdc8 	bl	8005e80 <HAL_UART_Transmit>
	}
}
 80022f0:	bf00      	nop
 80022f2:	3718      	adds	r7, #24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bdb0      	pop	{r4, r5, r7, pc}
	...
 8002300:	40000400 	.word	0x40000400
 8002304:	200003a4 	.word	0x200003a4
 8002308:	200003a0 	.word	0x200003a0
 800230c:	20000440 	.word	0x20000440
 8002310:	2000043c 	.word	0x2000043c
 8002314:	20000438 	.word	0x20000438
 8002318:	20000444 	.word	0x20000444
 800231c:	20000448 	.word	0x20000448
 8002320:	00000000 	.word	0x00000000
 8002324:	20000284 	.word	0x20000284
 8002328:	0800c6dc 	.word	0x0800c6dc
 800232c:	200003a8 	.word	0x200003a8
 8002330:	2000031c 	.word	0x2000031c

08002334 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002338:	b672      	cpsid	i
}
 800233a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800233c:	e7fe      	b.n	800233c <Error_Handler+0x8>
	...

08002340 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002346:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <HAL_MspInit+0x44>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	4a0e      	ldr	r2, [pc, #56]	; (8002384 <HAL_MspInit+0x44>)
 800234c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002350:	6413      	str	r3, [r2, #64]	; 0x40
 8002352:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <HAL_MspInit+0x44>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235a:	607b      	str	r3, [r7, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800235e:	4b09      	ldr	r3, [pc, #36]	; (8002384 <HAL_MspInit+0x44>)
 8002360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002362:	4a08      	ldr	r2, [pc, #32]	; (8002384 <HAL_MspInit+0x44>)
 8002364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002368:	6453      	str	r3, [r2, #68]	; 0x44
 800236a:	4b06      	ldr	r3, [pc, #24]	; (8002384 <HAL_MspInit+0x44>)
 800236c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002372:	603b      	str	r3, [r7, #0]
 8002374:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	40023800 	.word	0x40023800

08002388 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b08a      	sub	sp, #40	; 0x28
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002390:	f107 0314 	add.w	r3, r7, #20
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	60da      	str	r2, [r3, #12]
 800239e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a25      	ldr	r2, [pc, #148]	; (800243c <HAL_SPI_MspInit+0xb4>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d143      	bne.n	8002432 <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023aa:	4b25      	ldr	r3, [pc, #148]	; (8002440 <HAL_SPI_MspInit+0xb8>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	4a24      	ldr	r2, [pc, #144]	; (8002440 <HAL_SPI_MspInit+0xb8>)
 80023b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023b4:	6453      	str	r3, [r2, #68]	; 0x44
 80023b6:	4b22      	ldr	r3, [pc, #136]	; (8002440 <HAL_SPI_MspInit+0xb8>)
 80023b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023be:	613b      	str	r3, [r7, #16]
 80023c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c2:	4b1f      	ldr	r3, [pc, #124]	; (8002440 <HAL_SPI_MspInit+0xb8>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	4a1e      	ldr	r2, [pc, #120]	; (8002440 <HAL_SPI_MspInit+0xb8>)
 80023c8:	f043 0301 	orr.w	r3, r3, #1
 80023cc:	6313      	str	r3, [r2, #48]	; 0x30
 80023ce:	4b1c      	ldr	r3, [pc, #112]	; (8002440 <HAL_SPI_MspInit+0xb8>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023da:	4b19      	ldr	r3, [pc, #100]	; (8002440 <HAL_SPI_MspInit+0xb8>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	4a18      	ldr	r2, [pc, #96]	; (8002440 <HAL_SPI_MspInit+0xb8>)
 80023e0:	f043 0302 	orr.w	r3, r3, #2
 80023e4:	6313      	str	r3, [r2, #48]	; 0x30
 80023e6:	4b16      	ldr	r3, [pc, #88]	; (8002440 <HAL_SPI_MspInit+0xb8>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	60bb      	str	r3, [r7, #8]
 80023f0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80023f2:	2360      	movs	r3, #96	; 0x60
 80023f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f6:	2302      	movs	r3, #2
 80023f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023fe:	2303      	movs	r3, #3
 8002400:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002402:	2305      	movs	r3, #5
 8002404:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002406:	f107 0314 	add.w	r3, r7, #20
 800240a:	4619      	mov	r1, r3
 800240c:	480d      	ldr	r0, [pc, #52]	; (8002444 <HAL_SPI_MspInit+0xbc>)
 800240e:	f000 fc57 	bl	8002cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002412:	2320      	movs	r3, #32
 8002414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002416:	2302      	movs	r3, #2
 8002418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241a:	2300      	movs	r3, #0
 800241c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800241e:	2303      	movs	r3, #3
 8002420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002422:	2305      	movs	r3, #5
 8002424:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002426:	f107 0314 	add.w	r3, r7, #20
 800242a:	4619      	mov	r1, r3
 800242c:	4806      	ldr	r0, [pc, #24]	; (8002448 <HAL_SPI_MspInit+0xc0>)
 800242e:	f000 fc47 	bl	8002cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002432:	bf00      	nop
 8002434:	3728      	adds	r7, #40	; 0x28
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40013000 	.word	0x40013000
 8002440:	40023800 	.word	0x40023800
 8002444:	40020000 	.word	0x40020000
 8002448:	40020400 	.word	0x40020400

0800244c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800245c:	d10c      	bne.n	8002478 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800245e:	4b15      	ldr	r3, [pc, #84]	; (80024b4 <HAL_TIM_Base_MspInit+0x68>)
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	4a14      	ldr	r2, [pc, #80]	; (80024b4 <HAL_TIM_Base_MspInit+0x68>)
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	6413      	str	r3, [r2, #64]	; 0x40
 800246a:	4b12      	ldr	r3, [pc, #72]	; (80024b4 <HAL_TIM_Base_MspInit+0x68>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002476:	e018      	b.n	80024aa <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a0e      	ldr	r2, [pc, #56]	; (80024b8 <HAL_TIM_Base_MspInit+0x6c>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d113      	bne.n	80024aa <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002482:	4b0c      	ldr	r3, [pc, #48]	; (80024b4 <HAL_TIM_Base_MspInit+0x68>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	4a0b      	ldr	r2, [pc, #44]	; (80024b4 <HAL_TIM_Base_MspInit+0x68>)
 8002488:	f043 0302 	orr.w	r3, r3, #2
 800248c:	6413      	str	r3, [r2, #64]	; 0x40
 800248e:	4b09      	ldr	r3, [pc, #36]	; (80024b4 <HAL_TIM_Base_MspInit+0x68>)
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	60bb      	str	r3, [r7, #8]
 8002498:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800249a:	2200      	movs	r2, #0
 800249c:	2100      	movs	r1, #0
 800249e:	201d      	movs	r0, #29
 80024a0:	f000 fb45 	bl	8002b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80024a4:	201d      	movs	r0, #29
 80024a6:	f000 fb5e 	bl	8002b66 <HAL_NVIC_EnableIRQ>
}
 80024aa:	bf00      	nop
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40023800 	.word	0x40023800
 80024b8:	40000400 	.word	0x40000400

080024bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b088      	sub	sp, #32
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c4:	f107 030c 	add.w	r3, r7, #12
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	605a      	str	r2, [r3, #4]
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	60da      	str	r2, [r3, #12]
 80024d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024dc:	d11b      	bne.n	8002516 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024de:	4b10      	ldr	r3, [pc, #64]	; (8002520 <HAL_TIM_MspPostInit+0x64>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	4a0f      	ldr	r2, [pc, #60]	; (8002520 <HAL_TIM_MspPostInit+0x64>)
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ea:	4b0d      	ldr	r3, [pc, #52]	; (8002520 <HAL_TIM_MspPostInit+0x64>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	60bb      	str	r3, [r7, #8]
 80024f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80024f6:	2308      	movs	r3, #8
 80024f8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fa:	2302      	movs	r3, #2
 80024fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fe:	2300      	movs	r3, #0
 8002500:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002502:	2300      	movs	r3, #0
 8002504:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002506:	2301      	movs	r3, #1
 8002508:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800250a:	f107 030c 	add.w	r3, r7, #12
 800250e:	4619      	mov	r1, r3
 8002510:	4804      	ldr	r0, [pc, #16]	; (8002524 <HAL_TIM_MspPostInit+0x68>)
 8002512:	f000 fbd5 	bl	8002cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002516:	bf00      	nop
 8002518:	3720      	adds	r7, #32
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40023800 	.word	0x40023800
 8002524:	40020000 	.word	0x40020000

08002528 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b0aa      	sub	sp, #168	; 0xa8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002530:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	605a      	str	r2, [r3, #4]
 800253a:	609a      	str	r2, [r3, #8]
 800253c:	60da      	str	r2, [r3, #12]
 800253e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002540:	f107 0310 	add.w	r3, r7, #16
 8002544:	2284      	movs	r2, #132	; 0x84
 8002546:	2100      	movs	r1, #0
 8002548:	4618      	mov	r0, r3
 800254a:	f004 ffcf 	bl	80074ec <memset>
  if(huart->Instance==USART3)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a26      	ldr	r2, [pc, #152]	; (80025ec <HAL_UART_MspInit+0xc4>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d144      	bne.n	80025e2 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002558:	f44f 7380 	mov.w	r3, #256	; 0x100
 800255c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800255e:	2300      	movs	r3, #0
 8002560:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002562:	f107 0310 	add.w	r3, r7, #16
 8002566:	4618      	mov	r0, r3
 8002568:	f001 fa4a 	bl	8003a00 <HAL_RCCEx_PeriphCLKConfig>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002572:	f7ff fedf 	bl	8002334 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002576:	4b1e      	ldr	r3, [pc, #120]	; (80025f0 <HAL_UART_MspInit+0xc8>)
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	4a1d      	ldr	r2, [pc, #116]	; (80025f0 <HAL_UART_MspInit+0xc8>)
 800257c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002580:	6413      	str	r3, [r2, #64]	; 0x40
 8002582:	4b1b      	ldr	r3, [pc, #108]	; (80025f0 <HAL_UART_MspInit+0xc8>)
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800258e:	4b18      	ldr	r3, [pc, #96]	; (80025f0 <HAL_UART_MspInit+0xc8>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	4a17      	ldr	r2, [pc, #92]	; (80025f0 <HAL_UART_MspInit+0xc8>)
 8002594:	f043 0308 	orr.w	r3, r3, #8
 8002598:	6313      	str	r3, [r2, #48]	; 0x30
 800259a:	4b15      	ldr	r3, [pc, #84]	; (80025f0 <HAL_UART_MspInit+0xc8>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	f003 0308 	and.w	r3, r3, #8
 80025a2:	60bb      	str	r3, [r7, #8]
 80025a4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80025a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ae:	2302      	movs	r3, #2
 80025b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ba:	2303      	movs	r3, #3
 80025bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80025c0:	2307      	movs	r3, #7
 80025c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025c6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80025ca:	4619      	mov	r1, r3
 80025cc:	4809      	ldr	r0, [pc, #36]	; (80025f4 <HAL_UART_MspInit+0xcc>)
 80025ce:	f000 fb77 	bl	8002cc0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80025d2:	2200      	movs	r2, #0
 80025d4:	2100      	movs	r1, #0
 80025d6:	2027      	movs	r0, #39	; 0x27
 80025d8:	f000 faa9 	bl	8002b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80025dc:	2027      	movs	r0, #39	; 0x27
 80025de:	f000 fac2 	bl	8002b66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80025e2:	bf00      	nop
 80025e4:	37a8      	adds	r7, #168	; 0xa8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40004800 	.word	0x40004800
 80025f0:	40023800 	.word	0x40023800
 80025f4:	40020c00 	.word	0x40020c00

080025f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025fc:	e7fe      	b.n	80025fc <NMI_Handler+0x4>

080025fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025fe:	b480      	push	{r7}
 8002600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002602:	e7fe      	b.n	8002602 <HardFault_Handler+0x4>

08002604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002608:	e7fe      	b.n	8002608 <MemManage_Handler+0x4>

0800260a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800260a:	b480      	push	{r7}
 800260c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800260e:	e7fe      	b.n	800260e <BusFault_Handler+0x4>

08002610 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002614:	e7fe      	b.n	8002614 <UsageFault_Handler+0x4>

08002616 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002616:	b480      	push	{r7}
 8002618:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800261a:	bf00      	nop
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002628:	bf00      	nop
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002632:	b480      	push	{r7}
 8002634:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002636:	bf00      	nop
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002644:	f000 f954 	bl	80028f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002648:	bf00      	nop
 800264a:	bd80      	pop	{r7, pc}

0800264c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002650:	4802      	ldr	r0, [pc, #8]	; (800265c <TIM3_IRQHandler+0x10>)
 8002652:	f002 fc37 	bl	8004ec4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	200002d0 	.word	0x200002d0

08002660 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002664:	4802      	ldr	r0, [pc, #8]	; (8002670 <USART3_IRQHandler+0x10>)
 8002666:	f003 fced 	bl	8006044 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	2000031c 	.word	0x2000031c

08002674 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
	return 1;
 8002678:	2301      	movs	r3, #1
}
 800267a:	4618      	mov	r0, r3
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <_kill>:

int _kill(int pid, int sig)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800268e:	f004 ff03 	bl	8007498 <__errno>
 8002692:	4603      	mov	r3, r0
 8002694:	2216      	movs	r2, #22
 8002696:	601a      	str	r2, [r3, #0]
	return -1;
 8002698:	f04f 33ff 	mov.w	r3, #4294967295
}
 800269c:	4618      	mov	r0, r3
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <_exit>:

void _exit (int status)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80026ac:	f04f 31ff 	mov.w	r1, #4294967295
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f7ff ffe7 	bl	8002684 <_kill>
	while (1) {}		/* Make sure we hang here */
 80026b6:	e7fe      	b.n	80026b6 <_exit+0x12>

080026b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026c4:	2300      	movs	r3, #0
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	e00a      	b.n	80026e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80026ca:	f3af 8000 	nop.w
 80026ce:	4601      	mov	r1, r0
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	1c5a      	adds	r2, r3, #1
 80026d4:	60ba      	str	r2, [r7, #8]
 80026d6:	b2ca      	uxtb	r2, r1
 80026d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	3301      	adds	r3, #1
 80026de:	617b      	str	r3, [r7, #20]
 80026e0:	697a      	ldr	r2, [r7, #20]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	dbf0      	blt.n	80026ca <_read+0x12>
	}

return len;
 80026e8:	687b      	ldr	r3, [r7, #4]
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3718      	adds	r7, #24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b086      	sub	sp, #24
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	60f8      	str	r0, [r7, #12]
 80026fa:	60b9      	str	r1, [r7, #8]
 80026fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026fe:	2300      	movs	r3, #0
 8002700:	617b      	str	r3, [r7, #20]
 8002702:	e009      	b.n	8002718 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	1c5a      	adds	r2, r3, #1
 8002708:	60ba      	str	r2, [r7, #8]
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	3301      	adds	r3, #1
 8002716:	617b      	str	r3, [r7, #20]
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	429a      	cmp	r2, r3
 800271e:	dbf1      	blt.n	8002704 <_write+0x12>
	}
	return len;
 8002720:	687b      	ldr	r3, [r7, #4]
}
 8002722:	4618      	mov	r0, r3
 8002724:	3718      	adds	r7, #24
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <_close>:

int _close(int file)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
	return -1;
 8002732:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002736:	4618      	mov	r0, r3
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
 800274a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002752:	605a      	str	r2, [r3, #4]
	return 0;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <_isatty>:

int _isatty(int file)
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
	return 1;
 800276a:	2301      	movs	r3, #1
}
 800276c:	4618      	mov	r0, r3
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
	return 0;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
	...

08002794 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800279c:	4a14      	ldr	r2, [pc, #80]	; (80027f0 <_sbrk+0x5c>)
 800279e:	4b15      	ldr	r3, [pc, #84]	; (80027f4 <_sbrk+0x60>)
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027a8:	4b13      	ldr	r3, [pc, #76]	; (80027f8 <_sbrk+0x64>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d102      	bne.n	80027b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027b0:	4b11      	ldr	r3, [pc, #68]	; (80027f8 <_sbrk+0x64>)
 80027b2:	4a12      	ldr	r2, [pc, #72]	; (80027fc <_sbrk+0x68>)
 80027b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027b6:	4b10      	ldr	r3, [pc, #64]	; (80027f8 <_sbrk+0x64>)
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4413      	add	r3, r2
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d207      	bcs.n	80027d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027c4:	f004 fe68 	bl	8007498 <__errno>
 80027c8:	4603      	mov	r3, r0
 80027ca:	220c      	movs	r2, #12
 80027cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027ce:	f04f 33ff 	mov.w	r3, #4294967295
 80027d2:	e009      	b.n	80027e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027d4:	4b08      	ldr	r3, [pc, #32]	; (80027f8 <_sbrk+0x64>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027da:	4b07      	ldr	r3, [pc, #28]	; (80027f8 <_sbrk+0x64>)
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4413      	add	r3, r2
 80027e2:	4a05      	ldr	r2, [pc, #20]	; (80027f8 <_sbrk+0x64>)
 80027e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027e6:	68fb      	ldr	r3, [r7, #12]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3718      	adds	r7, #24
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	20050000 	.word	0x20050000
 80027f4:	00000400 	.word	0x00000400
 80027f8:	2000044c 	.word	0x2000044c
 80027fc:	20000468 	.word	0x20000468

08002800 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002804:	4b06      	ldr	r3, [pc, #24]	; (8002820 <SystemInit+0x20>)
 8002806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280a:	4a05      	ldr	r2, [pc, #20]	; (8002820 <SystemInit+0x20>)
 800280c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002810:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002814:	bf00      	nop
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	e000ed00 	.word	0xe000ed00

08002824 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002824:	f8df d034 	ldr.w	sp, [pc, #52]	; 800285c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002828:	480d      	ldr	r0, [pc, #52]	; (8002860 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800282a:	490e      	ldr	r1, [pc, #56]	; (8002864 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800282c:	4a0e      	ldr	r2, [pc, #56]	; (8002868 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800282e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002830:	e002      	b.n	8002838 <LoopCopyDataInit>

08002832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002836:	3304      	adds	r3, #4

08002838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800283a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800283c:	d3f9      	bcc.n	8002832 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800283e:	4a0b      	ldr	r2, [pc, #44]	; (800286c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002840:	4c0b      	ldr	r4, [pc, #44]	; (8002870 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002844:	e001      	b.n	800284a <LoopFillZerobss>

08002846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002848:	3204      	adds	r2, #4

0800284a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800284a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800284c:	d3fb      	bcc.n	8002846 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800284e:	f7ff ffd7 	bl	8002800 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002852:	f004 fe27 	bl	80074a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002856:	f7ff f9a5 	bl	8001ba4 <main>
  bx  lr    
 800285a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800285c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002864:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002868:	0800cbec 	.word	0x0800cbec
  ldr r2, =_sbss
 800286c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002870:	20000464 	.word	0x20000464

08002874 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002874:	e7fe      	b.n	8002874 <ADC_IRQHandler>

08002876 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800287a:	2003      	movs	r0, #3
 800287c:	f000 f94c 	bl	8002b18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002880:	2000      	movs	r0, #0
 8002882:	f000 f805 	bl	8002890 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002886:	f7ff fd5b 	bl	8002340 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002898:	4b12      	ldr	r3, [pc, #72]	; (80028e4 <HAL_InitTick+0x54>)
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	4b12      	ldr	r3, [pc, #72]	; (80028e8 <HAL_InitTick+0x58>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	4619      	mov	r1, r3
 80028a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80028aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ae:	4618      	mov	r0, r3
 80028b0:	f000 f967 	bl	8002b82 <HAL_SYSTICK_Config>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e00e      	b.n	80028dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2b0f      	cmp	r3, #15
 80028c2:	d80a      	bhi.n	80028da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028c4:	2200      	movs	r2, #0
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	f04f 30ff 	mov.w	r0, #4294967295
 80028cc:	f000 f92f 	bl	8002b2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028d0:	4a06      	ldr	r2, [pc, #24]	; (80028ec <HAL_InitTick+0x5c>)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
 80028d8:	e000      	b.n	80028dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	20000000 	.word	0x20000000
 80028e8:	20000008 	.word	0x20000008
 80028ec:	20000004 	.word	0x20000004

080028f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028f4:	4b06      	ldr	r3, [pc, #24]	; (8002910 <HAL_IncTick+0x20>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	461a      	mov	r2, r3
 80028fa:	4b06      	ldr	r3, [pc, #24]	; (8002914 <HAL_IncTick+0x24>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4413      	add	r3, r2
 8002900:	4a04      	ldr	r2, [pc, #16]	; (8002914 <HAL_IncTick+0x24>)
 8002902:	6013      	str	r3, [r2, #0]
}
 8002904:	bf00      	nop
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	20000008 	.word	0x20000008
 8002914:	20000450 	.word	0x20000450

08002918 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  return uwTick;
 800291c:	4b03      	ldr	r3, [pc, #12]	; (800292c <HAL_GetTick+0x14>)
 800291e:	681b      	ldr	r3, [r3, #0]
}
 8002920:	4618      	mov	r0, r3
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	20000450 	.word	0x20000450

08002930 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002938:	f7ff ffee 	bl	8002918 <HAL_GetTick>
 800293c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002948:	d005      	beq.n	8002956 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800294a:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <HAL_Delay+0x44>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	461a      	mov	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4413      	add	r3, r2
 8002954:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002956:	bf00      	nop
 8002958:	f7ff ffde 	bl	8002918 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	429a      	cmp	r2, r3
 8002966:	d8f7      	bhi.n	8002958 <HAL_Delay+0x28>
  {
  }
}
 8002968:	bf00      	nop
 800296a:	bf00      	nop
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	20000008 	.word	0x20000008

08002978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002988:	4b0b      	ldr	r3, [pc, #44]	; (80029b8 <__NVIC_SetPriorityGrouping+0x40>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002994:	4013      	ands	r3, r2
 8002996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80029a0:	4b06      	ldr	r3, [pc, #24]	; (80029bc <__NVIC_SetPriorityGrouping+0x44>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029a6:	4a04      	ldr	r2, [pc, #16]	; (80029b8 <__NVIC_SetPriorityGrouping+0x40>)
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	60d3      	str	r3, [r2, #12]
}
 80029ac:	bf00      	nop
 80029ae:	3714      	adds	r7, #20
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	e000ed00 	.word	0xe000ed00
 80029bc:	05fa0000 	.word	0x05fa0000

080029c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029c4:	4b04      	ldr	r3, [pc, #16]	; (80029d8 <__NVIC_GetPriorityGrouping+0x18>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	0a1b      	lsrs	r3, r3, #8
 80029ca:	f003 0307 	and.w	r3, r3, #7
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	e000ed00 	.word	0xe000ed00

080029dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	db0b      	blt.n	8002a06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ee:	79fb      	ldrb	r3, [r7, #7]
 80029f0:	f003 021f 	and.w	r2, r3, #31
 80029f4:	4907      	ldr	r1, [pc, #28]	; (8002a14 <__NVIC_EnableIRQ+0x38>)
 80029f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fa:	095b      	lsrs	r3, r3, #5
 80029fc:	2001      	movs	r0, #1
 80029fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	e000e100 	.word	0xe000e100

08002a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	6039      	str	r1, [r7, #0]
 8002a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	db0a      	blt.n	8002a42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	b2da      	uxtb	r2, r3
 8002a30:	490c      	ldr	r1, [pc, #48]	; (8002a64 <__NVIC_SetPriority+0x4c>)
 8002a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a36:	0112      	lsls	r2, r2, #4
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	440b      	add	r3, r1
 8002a3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a40:	e00a      	b.n	8002a58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	4908      	ldr	r1, [pc, #32]	; (8002a68 <__NVIC_SetPriority+0x50>)
 8002a48:	79fb      	ldrb	r3, [r7, #7]
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	3b04      	subs	r3, #4
 8002a50:	0112      	lsls	r2, r2, #4
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	440b      	add	r3, r1
 8002a56:	761a      	strb	r2, [r3, #24]
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	e000e100 	.word	0xe000e100
 8002a68:	e000ed00 	.word	0xe000ed00

08002a6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b089      	sub	sp, #36	; 0x24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	f1c3 0307 	rsb	r3, r3, #7
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	bf28      	it	cs
 8002a8a:	2304      	movcs	r3, #4
 8002a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	3304      	adds	r3, #4
 8002a92:	2b06      	cmp	r3, #6
 8002a94:	d902      	bls.n	8002a9c <NVIC_EncodePriority+0x30>
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	3b03      	subs	r3, #3
 8002a9a:	e000      	b.n	8002a9e <NVIC_EncodePriority+0x32>
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	43da      	mvns	r2, r3
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	401a      	ands	r2, r3
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	fa01 f303 	lsl.w	r3, r1, r3
 8002abe:	43d9      	mvns	r1, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ac4:	4313      	orrs	r3, r2
         );
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3724      	adds	r7, #36	; 0x24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
	...

08002ad4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ae4:	d301      	bcc.n	8002aea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e00f      	b.n	8002b0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aea:	4a0a      	ldr	r2, [pc, #40]	; (8002b14 <SysTick_Config+0x40>)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3b01      	subs	r3, #1
 8002af0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002af2:	210f      	movs	r1, #15
 8002af4:	f04f 30ff 	mov.w	r0, #4294967295
 8002af8:	f7ff ff8e 	bl	8002a18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002afc:	4b05      	ldr	r3, [pc, #20]	; (8002b14 <SysTick_Config+0x40>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b02:	4b04      	ldr	r3, [pc, #16]	; (8002b14 <SysTick_Config+0x40>)
 8002b04:	2207      	movs	r2, #7
 8002b06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	e000e010 	.word	0xe000e010

08002b18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f7ff ff29 	bl	8002978 <__NVIC_SetPriorityGrouping>
}
 8002b26:	bf00      	nop
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b086      	sub	sp, #24
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	4603      	mov	r3, r0
 8002b36:	60b9      	str	r1, [r7, #8]
 8002b38:	607a      	str	r2, [r7, #4]
 8002b3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b40:	f7ff ff3e 	bl	80029c0 <__NVIC_GetPriorityGrouping>
 8002b44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	68b9      	ldr	r1, [r7, #8]
 8002b4a:	6978      	ldr	r0, [r7, #20]
 8002b4c:	f7ff ff8e 	bl	8002a6c <NVIC_EncodePriority>
 8002b50:	4602      	mov	r2, r0
 8002b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b56:	4611      	mov	r1, r2
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff ff5d 	bl	8002a18 <__NVIC_SetPriority>
}
 8002b5e:	bf00      	nop
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b082      	sub	sp, #8
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff ff31 	bl	80029dc <__NVIC_EnableIRQ>
}
 8002b7a:	bf00      	nop
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b082      	sub	sp, #8
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7ff ffa2 	bl	8002ad4 <SysTick_Config>
 8002b90:	4603      	mov	r3, r0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b084      	sub	sp, #16
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ba8:	f7ff feb6 	bl	8002918 <HAL_GetTick>
 8002bac:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d008      	beq.n	8002bcc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2280      	movs	r2, #128	; 0x80
 8002bbe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e052      	b.n	8002c72 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 0216 	bic.w	r2, r2, #22
 8002bda:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	695a      	ldr	r2, [r3, #20]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bea:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d103      	bne.n	8002bfc <HAL_DMA_Abort+0x62>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d007      	beq.n	8002c0c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0208 	bic.w	r2, r2, #8
 8002c0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 0201 	bic.w	r2, r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c1c:	e013      	b.n	8002c46 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c1e:	f7ff fe7b 	bl	8002918 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b05      	cmp	r3, #5
 8002c2a:	d90c      	bls.n	8002c46 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2203      	movs	r2, #3
 8002c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e015      	b.n	8002c72 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1e4      	bne.n	8002c1e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c58:	223f      	movs	r2, #63	; 0x3f
 8002c5a:	409a      	lsls	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d004      	beq.n	8002c98 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2280      	movs	r2, #128	; 0x80
 8002c92:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e00c      	b.n	8002cb2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2205      	movs	r2, #5
 8002c9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 0201 	bic.w	r2, r2, #1
 8002cae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
	...

08002cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b089      	sub	sp, #36	; 0x24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002cda:	2300      	movs	r3, #0
 8002cdc:	61fb      	str	r3, [r7, #28]
 8002cde:	e175      	b.n	8002fcc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	f040 8164 	bne.w	8002fc6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d005      	beq.n	8002d16 <HAL_GPIO_Init+0x56>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f003 0303 	and.w	r3, r3, #3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d130      	bne.n	8002d78 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	2203      	movs	r2, #3
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	43db      	mvns	r3, r3
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	68da      	ldr	r2, [r3, #12]
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	43db      	mvns	r3, r3
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	091b      	lsrs	r3, r3, #4
 8002d62:	f003 0201 	and.w	r2, r3, #1
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f003 0303 	and.w	r3, r3, #3
 8002d80:	2b03      	cmp	r3, #3
 8002d82:	d017      	beq.n	8002db4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	2203      	movs	r2, #3
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	43db      	mvns	r3, r3
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f003 0303 	and.w	r3, r3, #3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d123      	bne.n	8002e08 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	08da      	lsrs	r2, r3, #3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	3208      	adds	r2, #8
 8002dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	220f      	movs	r2, #15
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	4013      	ands	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	691a      	ldr	r2, [r3, #16]
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	f003 0307 	and.w	r3, r3, #7
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	08da      	lsrs	r2, r3, #3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	3208      	adds	r2, #8
 8002e02:	69b9      	ldr	r1, [r7, #24]
 8002e04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	2203      	movs	r2, #3
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f003 0203 	and.w	r2, r3, #3
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 80be 	beq.w	8002fc6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e4a:	4b66      	ldr	r3, [pc, #408]	; (8002fe4 <HAL_GPIO_Init+0x324>)
 8002e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4e:	4a65      	ldr	r2, [pc, #404]	; (8002fe4 <HAL_GPIO_Init+0x324>)
 8002e50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e54:	6453      	str	r3, [r2, #68]	; 0x44
 8002e56:	4b63      	ldr	r3, [pc, #396]	; (8002fe4 <HAL_GPIO_Init+0x324>)
 8002e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002e62:	4a61      	ldr	r2, [pc, #388]	; (8002fe8 <HAL_GPIO_Init+0x328>)
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	089b      	lsrs	r3, r3, #2
 8002e68:	3302      	adds	r3, #2
 8002e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	f003 0303 	and.w	r3, r3, #3
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	220f      	movs	r2, #15
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	4013      	ands	r3, r2
 8002e84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a58      	ldr	r2, [pc, #352]	; (8002fec <HAL_GPIO_Init+0x32c>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d037      	beq.n	8002efe <HAL_GPIO_Init+0x23e>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a57      	ldr	r2, [pc, #348]	; (8002ff0 <HAL_GPIO_Init+0x330>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d031      	beq.n	8002efa <HAL_GPIO_Init+0x23a>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a56      	ldr	r2, [pc, #344]	; (8002ff4 <HAL_GPIO_Init+0x334>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d02b      	beq.n	8002ef6 <HAL_GPIO_Init+0x236>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a55      	ldr	r2, [pc, #340]	; (8002ff8 <HAL_GPIO_Init+0x338>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d025      	beq.n	8002ef2 <HAL_GPIO_Init+0x232>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a54      	ldr	r2, [pc, #336]	; (8002ffc <HAL_GPIO_Init+0x33c>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d01f      	beq.n	8002eee <HAL_GPIO_Init+0x22e>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a53      	ldr	r2, [pc, #332]	; (8003000 <HAL_GPIO_Init+0x340>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d019      	beq.n	8002eea <HAL_GPIO_Init+0x22a>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a52      	ldr	r2, [pc, #328]	; (8003004 <HAL_GPIO_Init+0x344>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d013      	beq.n	8002ee6 <HAL_GPIO_Init+0x226>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a51      	ldr	r2, [pc, #324]	; (8003008 <HAL_GPIO_Init+0x348>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d00d      	beq.n	8002ee2 <HAL_GPIO_Init+0x222>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a50      	ldr	r2, [pc, #320]	; (800300c <HAL_GPIO_Init+0x34c>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d007      	beq.n	8002ede <HAL_GPIO_Init+0x21e>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a4f      	ldr	r2, [pc, #316]	; (8003010 <HAL_GPIO_Init+0x350>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d101      	bne.n	8002eda <HAL_GPIO_Init+0x21a>
 8002ed6:	2309      	movs	r3, #9
 8002ed8:	e012      	b.n	8002f00 <HAL_GPIO_Init+0x240>
 8002eda:	230a      	movs	r3, #10
 8002edc:	e010      	b.n	8002f00 <HAL_GPIO_Init+0x240>
 8002ede:	2308      	movs	r3, #8
 8002ee0:	e00e      	b.n	8002f00 <HAL_GPIO_Init+0x240>
 8002ee2:	2307      	movs	r3, #7
 8002ee4:	e00c      	b.n	8002f00 <HAL_GPIO_Init+0x240>
 8002ee6:	2306      	movs	r3, #6
 8002ee8:	e00a      	b.n	8002f00 <HAL_GPIO_Init+0x240>
 8002eea:	2305      	movs	r3, #5
 8002eec:	e008      	b.n	8002f00 <HAL_GPIO_Init+0x240>
 8002eee:	2304      	movs	r3, #4
 8002ef0:	e006      	b.n	8002f00 <HAL_GPIO_Init+0x240>
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e004      	b.n	8002f00 <HAL_GPIO_Init+0x240>
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	e002      	b.n	8002f00 <HAL_GPIO_Init+0x240>
 8002efa:	2301      	movs	r3, #1
 8002efc:	e000      	b.n	8002f00 <HAL_GPIO_Init+0x240>
 8002efe:	2300      	movs	r3, #0
 8002f00:	69fa      	ldr	r2, [r7, #28]
 8002f02:	f002 0203 	and.w	r2, r2, #3
 8002f06:	0092      	lsls	r2, r2, #2
 8002f08:	4093      	lsls	r3, r2
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002f10:	4935      	ldr	r1, [pc, #212]	; (8002fe8 <HAL_GPIO_Init+0x328>)
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	089b      	lsrs	r3, r3, #2
 8002f16:	3302      	adds	r3, #2
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f1e:	4b3d      	ldr	r3, [pc, #244]	; (8003014 <HAL_GPIO_Init+0x354>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	43db      	mvns	r3, r3
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f42:	4a34      	ldr	r2, [pc, #208]	; (8003014 <HAL_GPIO_Init+0x354>)
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f48:	4b32      	ldr	r3, [pc, #200]	; (8003014 <HAL_GPIO_Init+0x354>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	43db      	mvns	r3, r3
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	4013      	ands	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d003      	beq.n	8002f6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f6c:	4a29      	ldr	r2, [pc, #164]	; (8003014 <HAL_GPIO_Init+0x354>)
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f72:	4b28      	ldr	r3, [pc, #160]	; (8003014 <HAL_GPIO_Init+0x354>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f96:	4a1f      	ldr	r2, [pc, #124]	; (8003014 <HAL_GPIO_Init+0x354>)
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f9c:	4b1d      	ldr	r3, [pc, #116]	; (8003014 <HAL_GPIO_Init+0x354>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d003      	beq.n	8002fc0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fc0:	4a14      	ldr	r2, [pc, #80]	; (8003014 <HAL_GPIO_Init+0x354>)
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	61fb      	str	r3, [r7, #28]
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	2b0f      	cmp	r3, #15
 8002fd0:	f67f ae86 	bls.w	8002ce0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002fd4:	bf00      	nop
 8002fd6:	bf00      	nop
 8002fd8:	3724      	adds	r7, #36	; 0x24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	40013800 	.word	0x40013800
 8002fec:	40020000 	.word	0x40020000
 8002ff0:	40020400 	.word	0x40020400
 8002ff4:	40020800 	.word	0x40020800
 8002ff8:	40020c00 	.word	0x40020c00
 8002ffc:	40021000 	.word	0x40021000
 8003000:	40021400 	.word	0x40021400
 8003004:	40021800 	.word	0x40021800
 8003008:	40021c00 	.word	0x40021c00
 800300c:	40022000 	.word	0x40022000
 8003010:	40022400 	.word	0x40022400
 8003014:	40013c00 	.word	0x40013c00

08003018 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	460b      	mov	r3, r1
 8003022:	807b      	strh	r3, [r7, #2]
 8003024:	4613      	mov	r3, r2
 8003026:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003028:	787b      	ldrb	r3, [r7, #1]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800302e:	887a      	ldrh	r2, [r7, #2]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003034:	e003      	b.n	800303e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003036:	887b      	ldrh	r3, [r7, #2]
 8003038:	041a      	lsls	r2, r3, #16
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	619a      	str	r2, [r3, #24]
}
 800303e:	bf00      	nop
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
	...

0800304c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003050:	4b05      	ldr	r3, [pc, #20]	; (8003068 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a04      	ldr	r2, [pc, #16]	; (8003068 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800305a:	6013      	str	r3, [r2, #0]
}
 800305c:	bf00      	nop
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	40007000 	.word	0x40007000

0800306c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003074:	2300      	movs	r3, #0
 8003076:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e291      	b.n	80035a6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	f000 8087 	beq.w	800319e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003090:	4b96      	ldr	r3, [pc, #600]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 030c 	and.w	r3, r3, #12
 8003098:	2b04      	cmp	r3, #4
 800309a:	d00c      	beq.n	80030b6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800309c:	4b93      	ldr	r3, [pc, #588]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f003 030c 	and.w	r3, r3, #12
 80030a4:	2b08      	cmp	r3, #8
 80030a6:	d112      	bne.n	80030ce <HAL_RCC_OscConfig+0x62>
 80030a8:	4b90      	ldr	r3, [pc, #576]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030b4:	d10b      	bne.n	80030ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b6:	4b8d      	ldr	r3, [pc, #564]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d06c      	beq.n	800319c <HAL_RCC_OscConfig+0x130>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d168      	bne.n	800319c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e26b      	b.n	80035a6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030d6:	d106      	bne.n	80030e6 <HAL_RCC_OscConfig+0x7a>
 80030d8:	4b84      	ldr	r3, [pc, #528]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a83      	ldr	r2, [pc, #524]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 80030de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030e2:	6013      	str	r3, [r2, #0]
 80030e4:	e02e      	b.n	8003144 <HAL_RCC_OscConfig+0xd8>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10c      	bne.n	8003108 <HAL_RCC_OscConfig+0x9c>
 80030ee:	4b7f      	ldr	r3, [pc, #508]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a7e      	ldr	r2, [pc, #504]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 80030f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030f8:	6013      	str	r3, [r2, #0]
 80030fa:	4b7c      	ldr	r3, [pc, #496]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a7b      	ldr	r2, [pc, #492]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 8003100:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003104:	6013      	str	r3, [r2, #0]
 8003106:	e01d      	b.n	8003144 <HAL_RCC_OscConfig+0xd8>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003110:	d10c      	bne.n	800312c <HAL_RCC_OscConfig+0xc0>
 8003112:	4b76      	ldr	r3, [pc, #472]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a75      	ldr	r2, [pc, #468]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 8003118:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800311c:	6013      	str	r3, [r2, #0]
 800311e:	4b73      	ldr	r3, [pc, #460]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a72      	ldr	r2, [pc, #456]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 8003124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003128:	6013      	str	r3, [r2, #0]
 800312a:	e00b      	b.n	8003144 <HAL_RCC_OscConfig+0xd8>
 800312c:	4b6f      	ldr	r3, [pc, #444]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a6e      	ldr	r2, [pc, #440]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 8003132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003136:	6013      	str	r3, [r2, #0]
 8003138:	4b6c      	ldr	r3, [pc, #432]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a6b      	ldr	r2, [pc, #428]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 800313e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003142:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d013      	beq.n	8003174 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314c:	f7ff fbe4 	bl	8002918 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003154:	f7ff fbe0 	bl	8002918 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b64      	cmp	r3, #100	; 0x64
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e21f      	b.n	80035a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003166:	4b61      	ldr	r3, [pc, #388]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d0f0      	beq.n	8003154 <HAL_RCC_OscConfig+0xe8>
 8003172:	e014      	b.n	800319e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003174:	f7ff fbd0 	bl	8002918 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800317c:	f7ff fbcc 	bl	8002918 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b64      	cmp	r3, #100	; 0x64
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e20b      	b.n	80035a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800318e:	4b57      	ldr	r3, [pc, #348]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1f0      	bne.n	800317c <HAL_RCC_OscConfig+0x110>
 800319a:	e000      	b.n	800319e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800319c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d069      	beq.n	800327e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031aa:	4b50      	ldr	r3, [pc, #320]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 030c 	and.w	r3, r3, #12
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00b      	beq.n	80031ce <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031b6:	4b4d      	ldr	r3, [pc, #308]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 030c 	and.w	r3, r3, #12
 80031be:	2b08      	cmp	r3, #8
 80031c0:	d11c      	bne.n	80031fc <HAL_RCC_OscConfig+0x190>
 80031c2:	4b4a      	ldr	r3, [pc, #296]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d116      	bne.n	80031fc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ce:	4b47      	ldr	r3, [pc, #284]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d005      	beq.n	80031e6 <HAL_RCC_OscConfig+0x17a>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d001      	beq.n	80031e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e1df      	b.n	80035a6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e6:	4b41      	ldr	r3, [pc, #260]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	493d      	ldr	r1, [pc, #244]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031fa:	e040      	b.n	800327e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d023      	beq.n	800324c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003204:	4b39      	ldr	r3, [pc, #228]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a38      	ldr	r2, [pc, #224]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 800320a:	f043 0301 	orr.w	r3, r3, #1
 800320e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003210:	f7ff fb82 	bl	8002918 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003218:	f7ff fb7e 	bl	8002918 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e1bd      	b.n	80035a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800322a:	4b30      	ldr	r3, [pc, #192]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0f0      	beq.n	8003218 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003236:	4b2d      	ldr	r3, [pc, #180]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	4929      	ldr	r1, [pc, #164]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 8003246:	4313      	orrs	r3, r2
 8003248:	600b      	str	r3, [r1, #0]
 800324a:	e018      	b.n	800327e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800324c:	4b27      	ldr	r3, [pc, #156]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a26      	ldr	r2, [pc, #152]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 8003252:	f023 0301 	bic.w	r3, r3, #1
 8003256:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003258:	f7ff fb5e 	bl	8002918 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003260:	f7ff fb5a 	bl	8002918 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e199      	b.n	80035a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003272:	4b1e      	ldr	r3, [pc, #120]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f0      	bne.n	8003260 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	2b00      	cmp	r3, #0
 8003288:	d038      	beq.n	80032fc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d019      	beq.n	80032c6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003292:	4b16      	ldr	r3, [pc, #88]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 8003294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003296:	4a15      	ldr	r2, [pc, #84]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 8003298:	f043 0301 	orr.w	r3, r3, #1
 800329c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800329e:	f7ff fb3b 	bl	8002918 <HAL_GetTick>
 80032a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032a4:	e008      	b.n	80032b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032a6:	f7ff fb37 	bl	8002918 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d901      	bls.n	80032b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e176      	b.n	80035a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032b8:	4b0c      	ldr	r3, [pc, #48]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 80032ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d0f0      	beq.n	80032a6 <HAL_RCC_OscConfig+0x23a>
 80032c4:	e01a      	b.n	80032fc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032c6:	4b09      	ldr	r3, [pc, #36]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 80032c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ca:	4a08      	ldr	r2, [pc, #32]	; (80032ec <HAL_RCC_OscConfig+0x280>)
 80032cc:	f023 0301 	bic.w	r3, r3, #1
 80032d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d2:	f7ff fb21 	bl	8002918 <HAL_GetTick>
 80032d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d8:	e00a      	b.n	80032f0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032da:	f7ff fb1d 	bl	8002918 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d903      	bls.n	80032f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e15c      	b.n	80035a6 <HAL_RCC_OscConfig+0x53a>
 80032ec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032f0:	4b91      	ldr	r3, [pc, #580]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 80032f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1ee      	bne.n	80032da <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 80a4 	beq.w	8003452 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800330a:	4b8b      	ldr	r3, [pc, #556]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10d      	bne.n	8003332 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003316:	4b88      	ldr	r3, [pc, #544]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	4a87      	ldr	r2, [pc, #540]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 800331c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003320:	6413      	str	r3, [r2, #64]	; 0x40
 8003322:	4b85      	ldr	r3, [pc, #532]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800332a:	60bb      	str	r3, [r7, #8]
 800332c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800332e:	2301      	movs	r3, #1
 8003330:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003332:	4b82      	ldr	r3, [pc, #520]	; (800353c <HAL_RCC_OscConfig+0x4d0>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333a:	2b00      	cmp	r3, #0
 800333c:	d118      	bne.n	8003370 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800333e:	4b7f      	ldr	r3, [pc, #508]	; (800353c <HAL_RCC_OscConfig+0x4d0>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a7e      	ldr	r2, [pc, #504]	; (800353c <HAL_RCC_OscConfig+0x4d0>)
 8003344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003348:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800334a:	f7ff fae5 	bl	8002918 <HAL_GetTick>
 800334e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003350:	e008      	b.n	8003364 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003352:	f7ff fae1 	bl	8002918 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b64      	cmp	r3, #100	; 0x64
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e120      	b.n	80035a6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003364:	4b75      	ldr	r3, [pc, #468]	; (800353c <HAL_RCC_OscConfig+0x4d0>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0f0      	beq.n	8003352 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d106      	bne.n	8003386 <HAL_RCC_OscConfig+0x31a>
 8003378:	4b6f      	ldr	r3, [pc, #444]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 800337a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337c:	4a6e      	ldr	r2, [pc, #440]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 800337e:	f043 0301 	orr.w	r3, r3, #1
 8003382:	6713      	str	r3, [r2, #112]	; 0x70
 8003384:	e02d      	b.n	80033e2 <HAL_RCC_OscConfig+0x376>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10c      	bne.n	80033a8 <HAL_RCC_OscConfig+0x33c>
 800338e:	4b6a      	ldr	r3, [pc, #424]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 8003390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003392:	4a69      	ldr	r2, [pc, #420]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 8003394:	f023 0301 	bic.w	r3, r3, #1
 8003398:	6713      	str	r3, [r2, #112]	; 0x70
 800339a:	4b67      	ldr	r3, [pc, #412]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 800339c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339e:	4a66      	ldr	r2, [pc, #408]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 80033a0:	f023 0304 	bic.w	r3, r3, #4
 80033a4:	6713      	str	r3, [r2, #112]	; 0x70
 80033a6:	e01c      	b.n	80033e2 <HAL_RCC_OscConfig+0x376>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	2b05      	cmp	r3, #5
 80033ae:	d10c      	bne.n	80033ca <HAL_RCC_OscConfig+0x35e>
 80033b0:	4b61      	ldr	r3, [pc, #388]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 80033b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b4:	4a60      	ldr	r2, [pc, #384]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 80033b6:	f043 0304 	orr.w	r3, r3, #4
 80033ba:	6713      	str	r3, [r2, #112]	; 0x70
 80033bc:	4b5e      	ldr	r3, [pc, #376]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 80033be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c0:	4a5d      	ldr	r2, [pc, #372]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 80033c2:	f043 0301 	orr.w	r3, r3, #1
 80033c6:	6713      	str	r3, [r2, #112]	; 0x70
 80033c8:	e00b      	b.n	80033e2 <HAL_RCC_OscConfig+0x376>
 80033ca:	4b5b      	ldr	r3, [pc, #364]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 80033cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ce:	4a5a      	ldr	r2, [pc, #360]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 80033d0:	f023 0301 	bic.w	r3, r3, #1
 80033d4:	6713      	str	r3, [r2, #112]	; 0x70
 80033d6:	4b58      	ldr	r3, [pc, #352]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 80033d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033da:	4a57      	ldr	r2, [pc, #348]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 80033dc:	f023 0304 	bic.w	r3, r3, #4
 80033e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d015      	beq.n	8003416 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ea:	f7ff fa95 	bl	8002918 <HAL_GetTick>
 80033ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f0:	e00a      	b.n	8003408 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033f2:	f7ff fa91 	bl	8002918 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003400:	4293      	cmp	r3, r2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e0ce      	b.n	80035a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003408:	4b4b      	ldr	r3, [pc, #300]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 800340a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d0ee      	beq.n	80033f2 <HAL_RCC_OscConfig+0x386>
 8003414:	e014      	b.n	8003440 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003416:	f7ff fa7f 	bl	8002918 <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800341c:	e00a      	b.n	8003434 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800341e:	f7ff fa7b 	bl	8002918 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	f241 3288 	movw	r2, #5000	; 0x1388
 800342c:	4293      	cmp	r3, r2
 800342e:	d901      	bls.n	8003434 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e0b8      	b.n	80035a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003434:	4b40      	ldr	r3, [pc, #256]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 8003436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1ee      	bne.n	800341e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003440:	7dfb      	ldrb	r3, [r7, #23]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d105      	bne.n	8003452 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003446:	4b3c      	ldr	r3, [pc, #240]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	4a3b      	ldr	r2, [pc, #236]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 800344c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003450:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 80a4 	beq.w	80035a4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800345c:	4b36      	ldr	r3, [pc, #216]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f003 030c 	and.w	r3, r3, #12
 8003464:	2b08      	cmp	r3, #8
 8003466:	d06b      	beq.n	8003540 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	2b02      	cmp	r3, #2
 800346e:	d149      	bne.n	8003504 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003470:	4b31      	ldr	r3, [pc, #196]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a30      	ldr	r2, [pc, #192]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 8003476:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800347a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347c:	f7ff fa4c 	bl	8002918 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003484:	f7ff fa48 	bl	8002918 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e087      	b.n	80035a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003496:	4b28      	ldr	r3, [pc, #160]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f0      	bne.n	8003484 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	69da      	ldr	r2, [r3, #28]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	431a      	orrs	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b0:	019b      	lsls	r3, r3, #6
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b8:	085b      	lsrs	r3, r3, #1
 80034ba:	3b01      	subs	r3, #1
 80034bc:	041b      	lsls	r3, r3, #16
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c4:	061b      	lsls	r3, r3, #24
 80034c6:	4313      	orrs	r3, r2
 80034c8:	4a1b      	ldr	r2, [pc, #108]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 80034ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80034ce:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034d0:	4b19      	ldr	r3, [pc, #100]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a18      	ldr	r2, [pc, #96]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 80034d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034dc:	f7ff fa1c 	bl	8002918 <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e4:	f7ff fa18 	bl	8002918 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e057      	b.n	80035a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034f6:	4b10      	ldr	r3, [pc, #64]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d0f0      	beq.n	80034e4 <HAL_RCC_OscConfig+0x478>
 8003502:	e04f      	b.n	80035a4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003504:	4b0c      	ldr	r3, [pc, #48]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a0b      	ldr	r2, [pc, #44]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 800350a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800350e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003510:	f7ff fa02 	bl	8002918 <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003518:	f7ff f9fe 	bl	8002918 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e03d      	b.n	80035a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800352a:	4b03      	ldr	r3, [pc, #12]	; (8003538 <HAL_RCC_OscConfig+0x4cc>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1f0      	bne.n	8003518 <HAL_RCC_OscConfig+0x4ac>
 8003536:	e035      	b.n	80035a4 <HAL_RCC_OscConfig+0x538>
 8003538:	40023800 	.word	0x40023800
 800353c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003540:	4b1b      	ldr	r3, [pc, #108]	; (80035b0 <HAL_RCC_OscConfig+0x544>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d028      	beq.n	80035a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003558:	429a      	cmp	r2, r3
 800355a:	d121      	bne.n	80035a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003566:	429a      	cmp	r2, r3
 8003568:	d11a      	bne.n	80035a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003570:	4013      	ands	r3, r2
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003576:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003578:	4293      	cmp	r3, r2
 800357a:	d111      	bne.n	80035a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003586:	085b      	lsrs	r3, r3, #1
 8003588:	3b01      	subs	r3, #1
 800358a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800358c:	429a      	cmp	r2, r3
 800358e:	d107      	bne.n	80035a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800359c:	429a      	cmp	r2, r3
 800359e:	d001      	beq.n	80035a4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e000      	b.n	80035a6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3718      	adds	r7, #24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	40023800 	.word	0x40023800

080035b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80035be:	2300      	movs	r3, #0
 80035c0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d101      	bne.n	80035cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e0d0      	b.n	800376e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035cc:	4b6a      	ldr	r3, [pc, #424]	; (8003778 <HAL_RCC_ClockConfig+0x1c4>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 030f 	and.w	r3, r3, #15
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d910      	bls.n	80035fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035da:	4b67      	ldr	r3, [pc, #412]	; (8003778 <HAL_RCC_ClockConfig+0x1c4>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f023 020f 	bic.w	r2, r3, #15
 80035e2:	4965      	ldr	r1, [pc, #404]	; (8003778 <HAL_RCC_ClockConfig+0x1c4>)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ea:	4b63      	ldr	r3, [pc, #396]	; (8003778 <HAL_RCC_ClockConfig+0x1c4>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d001      	beq.n	80035fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e0b8      	b.n	800376e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d020      	beq.n	800364a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0304 	and.w	r3, r3, #4
 8003610:	2b00      	cmp	r3, #0
 8003612:	d005      	beq.n	8003620 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003614:	4b59      	ldr	r3, [pc, #356]	; (800377c <HAL_RCC_ClockConfig+0x1c8>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	4a58      	ldr	r2, [pc, #352]	; (800377c <HAL_RCC_ClockConfig+0x1c8>)
 800361a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800361e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0308 	and.w	r3, r3, #8
 8003628:	2b00      	cmp	r3, #0
 800362a:	d005      	beq.n	8003638 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800362c:	4b53      	ldr	r3, [pc, #332]	; (800377c <HAL_RCC_ClockConfig+0x1c8>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	4a52      	ldr	r2, [pc, #328]	; (800377c <HAL_RCC_ClockConfig+0x1c8>)
 8003632:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003636:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003638:	4b50      	ldr	r3, [pc, #320]	; (800377c <HAL_RCC_ClockConfig+0x1c8>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	494d      	ldr	r1, [pc, #308]	; (800377c <HAL_RCC_ClockConfig+0x1c8>)
 8003646:	4313      	orrs	r3, r2
 8003648:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d040      	beq.n	80036d8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d107      	bne.n	800366e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800365e:	4b47      	ldr	r3, [pc, #284]	; (800377c <HAL_RCC_ClockConfig+0x1c8>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d115      	bne.n	8003696 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e07f      	b.n	800376e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	2b02      	cmp	r3, #2
 8003674:	d107      	bne.n	8003686 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003676:	4b41      	ldr	r3, [pc, #260]	; (800377c <HAL_RCC_ClockConfig+0x1c8>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d109      	bne.n	8003696 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e073      	b.n	800376e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003686:	4b3d      	ldr	r3, [pc, #244]	; (800377c <HAL_RCC_ClockConfig+0x1c8>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e06b      	b.n	800376e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003696:	4b39      	ldr	r3, [pc, #228]	; (800377c <HAL_RCC_ClockConfig+0x1c8>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f023 0203 	bic.w	r2, r3, #3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	4936      	ldr	r1, [pc, #216]	; (800377c <HAL_RCC_ClockConfig+0x1c8>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036a8:	f7ff f936 	bl	8002918 <HAL_GetTick>
 80036ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ae:	e00a      	b.n	80036c6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036b0:	f7ff f932 	bl	8002918 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80036be:	4293      	cmp	r3, r2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e053      	b.n	800376e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c6:	4b2d      	ldr	r3, [pc, #180]	; (800377c <HAL_RCC_ClockConfig+0x1c8>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f003 020c 	and.w	r2, r3, #12
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d1eb      	bne.n	80036b0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036d8:	4b27      	ldr	r3, [pc, #156]	; (8003778 <HAL_RCC_ClockConfig+0x1c4>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 030f 	and.w	r3, r3, #15
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d210      	bcs.n	8003708 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036e6:	4b24      	ldr	r3, [pc, #144]	; (8003778 <HAL_RCC_ClockConfig+0x1c4>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f023 020f 	bic.w	r2, r3, #15
 80036ee:	4922      	ldr	r1, [pc, #136]	; (8003778 <HAL_RCC_ClockConfig+0x1c4>)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036f6:	4b20      	ldr	r3, [pc, #128]	; (8003778 <HAL_RCC_ClockConfig+0x1c4>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 030f 	and.w	r3, r3, #15
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	429a      	cmp	r2, r3
 8003702:	d001      	beq.n	8003708 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e032      	b.n	800376e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0304 	and.w	r3, r3, #4
 8003710:	2b00      	cmp	r3, #0
 8003712:	d008      	beq.n	8003726 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003714:	4b19      	ldr	r3, [pc, #100]	; (800377c <HAL_RCC_ClockConfig+0x1c8>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	4916      	ldr	r1, [pc, #88]	; (800377c <HAL_RCC_ClockConfig+0x1c8>)
 8003722:	4313      	orrs	r3, r2
 8003724:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0308 	and.w	r3, r3, #8
 800372e:	2b00      	cmp	r3, #0
 8003730:	d009      	beq.n	8003746 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003732:	4b12      	ldr	r3, [pc, #72]	; (800377c <HAL_RCC_ClockConfig+0x1c8>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	490e      	ldr	r1, [pc, #56]	; (800377c <HAL_RCC_ClockConfig+0x1c8>)
 8003742:	4313      	orrs	r3, r2
 8003744:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003746:	f000 f821 	bl	800378c <HAL_RCC_GetSysClockFreq>
 800374a:	4602      	mov	r2, r0
 800374c:	4b0b      	ldr	r3, [pc, #44]	; (800377c <HAL_RCC_ClockConfig+0x1c8>)
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	091b      	lsrs	r3, r3, #4
 8003752:	f003 030f 	and.w	r3, r3, #15
 8003756:	490a      	ldr	r1, [pc, #40]	; (8003780 <HAL_RCC_ClockConfig+0x1cc>)
 8003758:	5ccb      	ldrb	r3, [r1, r3]
 800375a:	fa22 f303 	lsr.w	r3, r2, r3
 800375e:	4a09      	ldr	r2, [pc, #36]	; (8003784 <HAL_RCC_ClockConfig+0x1d0>)
 8003760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003762:	4b09      	ldr	r3, [pc, #36]	; (8003788 <HAL_RCC_ClockConfig+0x1d4>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff f892 	bl	8002890 <HAL_InitTick>

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	40023c00 	.word	0x40023c00
 800377c:	40023800 	.word	0x40023800
 8003780:	0800c708 	.word	0x0800c708
 8003784:	20000000 	.word	0x20000000
 8003788:	20000004 	.word	0x20000004

0800378c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800378c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003790:	b094      	sub	sp, #80	; 0x50
 8003792:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003794:	2300      	movs	r3, #0
 8003796:	647b      	str	r3, [r7, #68]	; 0x44
 8003798:	2300      	movs	r3, #0
 800379a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800379c:	2300      	movs	r3, #0
 800379e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80037a0:	2300      	movs	r3, #0
 80037a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037a4:	4b79      	ldr	r3, [pc, #484]	; (800398c <HAL_RCC_GetSysClockFreq+0x200>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f003 030c 	and.w	r3, r3, #12
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d00d      	beq.n	80037cc <HAL_RCC_GetSysClockFreq+0x40>
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	f200 80e1 	bhi.w	8003978 <HAL_RCC_GetSysClockFreq+0x1ec>
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d002      	beq.n	80037c0 <HAL_RCC_GetSysClockFreq+0x34>
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	d003      	beq.n	80037c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80037be:	e0db      	b.n	8003978 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037c0:	4b73      	ldr	r3, [pc, #460]	; (8003990 <HAL_RCC_GetSysClockFreq+0x204>)
 80037c2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037c4:	e0db      	b.n	800397e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037c6:	4b73      	ldr	r3, [pc, #460]	; (8003994 <HAL_RCC_GetSysClockFreq+0x208>)
 80037c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037ca:	e0d8      	b.n	800397e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037cc:	4b6f      	ldr	r3, [pc, #444]	; (800398c <HAL_RCC_GetSysClockFreq+0x200>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037d4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80037d6:	4b6d      	ldr	r3, [pc, #436]	; (800398c <HAL_RCC_GetSysClockFreq+0x200>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d063      	beq.n	80038aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037e2:	4b6a      	ldr	r3, [pc, #424]	; (800398c <HAL_RCC_GetSysClockFreq+0x200>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	099b      	lsrs	r3, r3, #6
 80037e8:	2200      	movs	r2, #0
 80037ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80037ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80037ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037f4:	633b      	str	r3, [r7, #48]	; 0x30
 80037f6:	2300      	movs	r3, #0
 80037f8:	637b      	str	r3, [r7, #52]	; 0x34
 80037fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80037fe:	4622      	mov	r2, r4
 8003800:	462b      	mov	r3, r5
 8003802:	f04f 0000 	mov.w	r0, #0
 8003806:	f04f 0100 	mov.w	r1, #0
 800380a:	0159      	lsls	r1, r3, #5
 800380c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003810:	0150      	lsls	r0, r2, #5
 8003812:	4602      	mov	r2, r0
 8003814:	460b      	mov	r3, r1
 8003816:	4621      	mov	r1, r4
 8003818:	1a51      	subs	r1, r2, r1
 800381a:	6139      	str	r1, [r7, #16]
 800381c:	4629      	mov	r1, r5
 800381e:	eb63 0301 	sbc.w	r3, r3, r1
 8003822:	617b      	str	r3, [r7, #20]
 8003824:	f04f 0200 	mov.w	r2, #0
 8003828:	f04f 0300 	mov.w	r3, #0
 800382c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003830:	4659      	mov	r1, fp
 8003832:	018b      	lsls	r3, r1, #6
 8003834:	4651      	mov	r1, sl
 8003836:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800383a:	4651      	mov	r1, sl
 800383c:	018a      	lsls	r2, r1, #6
 800383e:	4651      	mov	r1, sl
 8003840:	ebb2 0801 	subs.w	r8, r2, r1
 8003844:	4659      	mov	r1, fp
 8003846:	eb63 0901 	sbc.w	r9, r3, r1
 800384a:	f04f 0200 	mov.w	r2, #0
 800384e:	f04f 0300 	mov.w	r3, #0
 8003852:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003856:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800385a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800385e:	4690      	mov	r8, r2
 8003860:	4699      	mov	r9, r3
 8003862:	4623      	mov	r3, r4
 8003864:	eb18 0303 	adds.w	r3, r8, r3
 8003868:	60bb      	str	r3, [r7, #8]
 800386a:	462b      	mov	r3, r5
 800386c:	eb49 0303 	adc.w	r3, r9, r3
 8003870:	60fb      	str	r3, [r7, #12]
 8003872:	f04f 0200 	mov.w	r2, #0
 8003876:	f04f 0300 	mov.w	r3, #0
 800387a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800387e:	4629      	mov	r1, r5
 8003880:	024b      	lsls	r3, r1, #9
 8003882:	4621      	mov	r1, r4
 8003884:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003888:	4621      	mov	r1, r4
 800388a:	024a      	lsls	r2, r1, #9
 800388c:	4610      	mov	r0, r2
 800388e:	4619      	mov	r1, r3
 8003890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003892:	2200      	movs	r2, #0
 8003894:	62bb      	str	r3, [r7, #40]	; 0x28
 8003896:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003898:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800389c:	f7fd fa64 	bl	8000d68 <__aeabi_uldivmod>
 80038a0:	4602      	mov	r2, r0
 80038a2:	460b      	mov	r3, r1
 80038a4:	4613      	mov	r3, r2
 80038a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038a8:	e058      	b.n	800395c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038aa:	4b38      	ldr	r3, [pc, #224]	; (800398c <HAL_RCC_GetSysClockFreq+0x200>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	099b      	lsrs	r3, r3, #6
 80038b0:	2200      	movs	r2, #0
 80038b2:	4618      	mov	r0, r3
 80038b4:	4611      	mov	r1, r2
 80038b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80038ba:	623b      	str	r3, [r7, #32]
 80038bc:	2300      	movs	r3, #0
 80038be:	627b      	str	r3, [r7, #36]	; 0x24
 80038c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80038c4:	4642      	mov	r2, r8
 80038c6:	464b      	mov	r3, r9
 80038c8:	f04f 0000 	mov.w	r0, #0
 80038cc:	f04f 0100 	mov.w	r1, #0
 80038d0:	0159      	lsls	r1, r3, #5
 80038d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038d6:	0150      	lsls	r0, r2, #5
 80038d8:	4602      	mov	r2, r0
 80038da:	460b      	mov	r3, r1
 80038dc:	4641      	mov	r1, r8
 80038de:	ebb2 0a01 	subs.w	sl, r2, r1
 80038e2:	4649      	mov	r1, r9
 80038e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80038e8:	f04f 0200 	mov.w	r2, #0
 80038ec:	f04f 0300 	mov.w	r3, #0
 80038f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038fc:	ebb2 040a 	subs.w	r4, r2, sl
 8003900:	eb63 050b 	sbc.w	r5, r3, fp
 8003904:	f04f 0200 	mov.w	r2, #0
 8003908:	f04f 0300 	mov.w	r3, #0
 800390c:	00eb      	lsls	r3, r5, #3
 800390e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003912:	00e2      	lsls	r2, r4, #3
 8003914:	4614      	mov	r4, r2
 8003916:	461d      	mov	r5, r3
 8003918:	4643      	mov	r3, r8
 800391a:	18e3      	adds	r3, r4, r3
 800391c:	603b      	str	r3, [r7, #0]
 800391e:	464b      	mov	r3, r9
 8003920:	eb45 0303 	adc.w	r3, r5, r3
 8003924:	607b      	str	r3, [r7, #4]
 8003926:	f04f 0200 	mov.w	r2, #0
 800392a:	f04f 0300 	mov.w	r3, #0
 800392e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003932:	4629      	mov	r1, r5
 8003934:	028b      	lsls	r3, r1, #10
 8003936:	4621      	mov	r1, r4
 8003938:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800393c:	4621      	mov	r1, r4
 800393e:	028a      	lsls	r2, r1, #10
 8003940:	4610      	mov	r0, r2
 8003942:	4619      	mov	r1, r3
 8003944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003946:	2200      	movs	r2, #0
 8003948:	61bb      	str	r3, [r7, #24]
 800394a:	61fa      	str	r2, [r7, #28]
 800394c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003950:	f7fd fa0a 	bl	8000d68 <__aeabi_uldivmod>
 8003954:	4602      	mov	r2, r0
 8003956:	460b      	mov	r3, r1
 8003958:	4613      	mov	r3, r2
 800395a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800395c:	4b0b      	ldr	r3, [pc, #44]	; (800398c <HAL_RCC_GetSysClockFreq+0x200>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	0c1b      	lsrs	r3, r3, #16
 8003962:	f003 0303 	and.w	r3, r3, #3
 8003966:	3301      	adds	r3, #1
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800396c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800396e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003970:	fbb2 f3f3 	udiv	r3, r2, r3
 8003974:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003976:	e002      	b.n	800397e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003978:	4b05      	ldr	r3, [pc, #20]	; (8003990 <HAL_RCC_GetSysClockFreq+0x204>)
 800397a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800397c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800397e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003980:	4618      	mov	r0, r3
 8003982:	3750      	adds	r7, #80	; 0x50
 8003984:	46bd      	mov	sp, r7
 8003986:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800398a:	bf00      	nop
 800398c:	40023800 	.word	0x40023800
 8003990:	00f42400 	.word	0x00f42400
 8003994:	007a1200 	.word	0x007a1200

08003998 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800399c:	4b03      	ldr	r3, [pc, #12]	; (80039ac <HAL_RCC_GetHCLKFreq+0x14>)
 800399e:	681b      	ldr	r3, [r3, #0]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	20000000 	.word	0x20000000

080039b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039b4:	f7ff fff0 	bl	8003998 <HAL_RCC_GetHCLKFreq>
 80039b8:	4602      	mov	r2, r0
 80039ba:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	0a9b      	lsrs	r3, r3, #10
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	4903      	ldr	r1, [pc, #12]	; (80039d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039c6:	5ccb      	ldrb	r3, [r1, r3]
 80039c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	40023800 	.word	0x40023800
 80039d4:	0800c718 	.word	0x0800c718

080039d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039dc:	f7ff ffdc 	bl	8003998 <HAL_RCC_GetHCLKFreq>
 80039e0:	4602      	mov	r2, r0
 80039e2:	4b05      	ldr	r3, [pc, #20]	; (80039f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	0b5b      	lsrs	r3, r3, #13
 80039e8:	f003 0307 	and.w	r3, r3, #7
 80039ec:	4903      	ldr	r1, [pc, #12]	; (80039fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80039ee:	5ccb      	ldrb	r3, [r1, r3]
 80039f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	40023800 	.word	0x40023800
 80039fc:	0800c718 	.word	0x0800c718

08003a00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b088      	sub	sp, #32
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003a10:	2300      	movs	r3, #0
 8003a12:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003a14:	2300      	movs	r3, #0
 8003a16:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d012      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a28:	4b69      	ldr	r3, [pc, #420]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	4a68      	ldr	r2, [pc, #416]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a2e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003a32:	6093      	str	r3, [r2, #8]
 8003a34:	4b66      	ldr	r3, [pc, #408]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a36:	689a      	ldr	r2, [r3, #8]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a3c:	4964      	ldr	r1, [pc, #400]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d017      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a5a:	4b5d      	ldr	r3, [pc, #372]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a68:	4959      	ldr	r1, [pc, #356]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a78:	d101      	bne.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003a86:	2301      	movs	r3, #1
 8003a88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d017      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a96:	4b4e      	ldr	r3, [pc, #312]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a9c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa4:	494a      	ldr	r1, [pc, #296]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ab4:	d101      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0320 	and.w	r3, r3, #32
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f000 808b 	beq.w	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ae4:	4b3a      	ldr	r3, [pc, #232]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae8:	4a39      	ldr	r2, [pc, #228]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aee:	6413      	str	r3, [r2, #64]	; 0x40
 8003af0:	4b37      	ldr	r3, [pc, #220]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af8:	60bb      	str	r3, [r7, #8]
 8003afa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003afc:	4b35      	ldr	r3, [pc, #212]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a34      	ldr	r2, [pc, #208]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b08:	f7fe ff06 	bl	8002918 <HAL_GetTick>
 8003b0c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b10:	f7fe ff02 	bl	8002918 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b64      	cmp	r3, #100	; 0x64
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e357      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b22:	4b2c      	ldr	r3, [pc, #176]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0f0      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b2e:	4b28      	ldr	r3, [pc, #160]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b36:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d035      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d02e      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b4c:	4b20      	ldr	r3, [pc, #128]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b54:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b56:	4b1e      	ldr	r3, [pc, #120]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5a:	4a1d      	ldr	r2, [pc, #116]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b60:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b62:	4b1b      	ldr	r3, [pc, #108]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b66:	4a1a      	ldr	r2, [pc, #104]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b6c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003b6e:	4a18      	ldr	r2, [pc, #96]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b74:	4b16      	ldr	r3, [pc, #88]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d114      	bne.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b80:	f7fe feca 	bl	8002918 <HAL_GetTick>
 8003b84:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b86:	e00a      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b88:	f7fe fec6 	bl	8002918 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e319      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b9e:	4b0c      	ldr	r3, [pc, #48]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d0ee      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bb6:	d111      	bne.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003bb8:	4b05      	ldr	r3, [pc, #20]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003bc4:	4b04      	ldr	r3, [pc, #16]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003bc6:	400b      	ands	r3, r1
 8003bc8:	4901      	ldr	r1, [pc, #4]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	608b      	str	r3, [r1, #8]
 8003bce:	e00b      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003bd0:	40023800 	.word	0x40023800
 8003bd4:	40007000 	.word	0x40007000
 8003bd8:	0ffffcff 	.word	0x0ffffcff
 8003bdc:	4baa      	ldr	r3, [pc, #680]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	4aa9      	ldr	r2, [pc, #676]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003be2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003be6:	6093      	str	r3, [r2, #8]
 8003be8:	4ba7      	ldr	r3, [pc, #668]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bf4:	49a4      	ldr	r1, [pc, #656]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0310 	and.w	r3, r3, #16
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d010      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c06:	4ba0      	ldr	r3, [pc, #640]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c0c:	4a9e      	ldr	r2, [pc, #632]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c12:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003c16:	4b9c      	ldr	r3, [pc, #624]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c18:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c20:	4999      	ldr	r1, [pc, #612]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00a      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c34:	4b94      	ldr	r3, [pc, #592]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c42:	4991      	ldr	r1, [pc, #580]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00a      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c56:	4b8c      	ldr	r3, [pc, #560]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c64:	4988      	ldr	r1, [pc, #544]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00a      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c78:	4b83      	ldr	r3, [pc, #524]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c86:	4980      	ldr	r1, [pc, #512]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00a      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c9a:	4b7b      	ldr	r3, [pc, #492]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca8:	4977      	ldr	r1, [pc, #476]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00a      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cbc:	4b72      	ldr	r3, [pc, #456]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc2:	f023 0203 	bic.w	r2, r3, #3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cca:	496f      	ldr	r1, [pc, #444]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00a      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cde:	4b6a      	ldr	r3, [pc, #424]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce4:	f023 020c 	bic.w	r2, r3, #12
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cec:	4966      	ldr	r1, [pc, #408]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00a      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d00:	4b61      	ldr	r3, [pc, #388]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d06:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d0e:	495e      	ldr	r1, [pc, #376]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00a      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d22:	4b59      	ldr	r3, [pc, #356]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d28:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d30:	4955      	ldr	r1, [pc, #340]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00a      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d44:	4b50      	ldr	r3, [pc, #320]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d52:	494d      	ldr	r1, [pc, #308]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00a      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003d66:	4b48      	ldr	r3, [pc, #288]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d74:	4944      	ldr	r1, [pc, #272]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00a      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003d88:	4b3f      	ldr	r3, [pc, #252]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d8e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d96:	493c      	ldr	r1, [pc, #240]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00a      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003daa:	4b37      	ldr	r3, [pc, #220]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003db8:	4933      	ldr	r1, [pc, #204]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00a      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003dcc:	4b2e      	ldr	r3, [pc, #184]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dda:	492b      	ldr	r1, [pc, #172]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d011      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003dee:	4b26      	ldr	r3, [pc, #152]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dfc:	4922      	ldr	r1, [pc, #136]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e0c:	d101      	bne.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0308 	and.w	r3, r3, #8
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00a      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e2e:	4b16      	ldr	r3, [pc, #88]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e34:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e3c:	4912      	ldr	r1, [pc, #72]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00b      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e50:	4b0d      	ldr	r3, [pc, #52]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e56:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e60:	4909      	ldr	r1, [pc, #36]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d006      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f000 80d9 	beq.w	800402e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e7c:	4b02      	ldr	r3, [pc, #8]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a01      	ldr	r2, [pc, #4]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e86:	e001      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e8e:	f7fe fd43 	bl	8002918 <HAL_GetTick>
 8003e92:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e94:	e008      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e96:	f7fe fd3f 	bl	8002918 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b64      	cmp	r3, #100	; 0x64
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e194      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ea8:	4b6c      	ldr	r3, [pc, #432]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1f0      	bne.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d021      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d11d      	bne.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ec8:	4b64      	ldr	r3, [pc, #400]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003eca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ece:	0c1b      	lsrs	r3, r3, #16
 8003ed0:	f003 0303 	and.w	r3, r3, #3
 8003ed4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ed6:	4b61      	ldr	r3, [pc, #388]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003edc:	0e1b      	lsrs	r3, r3, #24
 8003ede:	f003 030f 	and.w	r3, r3, #15
 8003ee2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	019a      	lsls	r2, r3, #6
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	041b      	lsls	r3, r3, #16
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	061b      	lsls	r3, r3, #24
 8003ef4:	431a      	orrs	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	071b      	lsls	r3, r3, #28
 8003efc:	4957      	ldr	r1, [pc, #348]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d004      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f18:	d00a      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d02e      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f2e:	d129      	bne.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f30:	4b4a      	ldr	r3, [pc, #296]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f36:	0c1b      	lsrs	r3, r3, #16
 8003f38:	f003 0303 	and.w	r3, r3, #3
 8003f3c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f3e:	4b47      	ldr	r3, [pc, #284]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f44:	0f1b      	lsrs	r3, r3, #28
 8003f46:	f003 0307 	and.w	r3, r3, #7
 8003f4a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	019a      	lsls	r2, r3, #6
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	041b      	lsls	r3, r3, #16
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	061b      	lsls	r3, r3, #24
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	071b      	lsls	r3, r3, #28
 8003f64:	493d      	ldr	r1, [pc, #244]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003f6c:	4b3b      	ldr	r3, [pc, #236]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f72:	f023 021f 	bic.w	r2, r3, #31
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	4937      	ldr	r1, [pc, #220]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d01d      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f90:	4b32      	ldr	r3, [pc, #200]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f96:	0e1b      	lsrs	r3, r3, #24
 8003f98:	f003 030f 	and.w	r3, r3, #15
 8003f9c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f9e:	4b2f      	ldr	r3, [pc, #188]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fa4:	0f1b      	lsrs	r3, r3, #28
 8003fa6:	f003 0307 	and.w	r3, r3, #7
 8003faa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	019a      	lsls	r2, r3, #6
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	041b      	lsls	r3, r3, #16
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	061b      	lsls	r3, r3, #24
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	071b      	lsls	r3, r3, #28
 8003fc4:	4925      	ldr	r1, [pc, #148]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d011      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	019a      	lsls	r2, r3, #6
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	041b      	lsls	r3, r3, #16
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	061b      	lsls	r3, r3, #24
 8003fec:	431a      	orrs	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	071b      	lsls	r3, r3, #28
 8003ff4:	4919      	ldr	r1, [pc, #100]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ffc:	4b17      	ldr	r3, [pc, #92]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a16      	ldr	r2, [pc, #88]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004002:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004006:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004008:	f7fe fc86 	bl	8002918 <HAL_GetTick>
 800400c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800400e:	e008      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004010:	f7fe fc82 	bl	8002918 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b64      	cmp	r3, #100	; 0x64
 800401c:	d901      	bls.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e0d7      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004022:	4b0e      	ldr	r3, [pc, #56]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d0f0      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	2b01      	cmp	r3, #1
 8004032:	f040 80cd 	bne.w	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004036:	4b09      	ldr	r3, [pc, #36]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a08      	ldr	r2, [pc, #32]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800403c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004040:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004042:	f7fe fc69 	bl	8002918 <HAL_GetTick>
 8004046:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004048:	e00a      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800404a:	f7fe fc65 	bl	8002918 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b64      	cmp	r3, #100	; 0x64
 8004056:	d903      	bls.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e0ba      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800405c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004060:	4b5e      	ldr	r3, [pc, #376]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004068:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800406c:	d0ed      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800407e:	2b00      	cmp	r3, #0
 8004080:	d009      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800408a:	2b00      	cmp	r3, #0
 800408c:	d02e      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	2b00      	cmp	r3, #0
 8004094:	d12a      	bne.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004096:	4b51      	ldr	r3, [pc, #324]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409c:	0c1b      	lsrs	r3, r3, #16
 800409e:	f003 0303 	and.w	r3, r3, #3
 80040a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80040a4:	4b4d      	ldr	r3, [pc, #308]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040aa:	0f1b      	lsrs	r3, r3, #28
 80040ac:	f003 0307 	and.w	r3, r3, #7
 80040b0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	019a      	lsls	r2, r3, #6
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	041b      	lsls	r3, r3, #16
 80040bc:	431a      	orrs	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	061b      	lsls	r3, r3, #24
 80040c4:	431a      	orrs	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	071b      	lsls	r3, r3, #28
 80040ca:	4944      	ldr	r1, [pc, #272]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80040d2:	4b42      	ldr	r3, [pc, #264]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040d8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e0:	3b01      	subs	r3, #1
 80040e2:	021b      	lsls	r3, r3, #8
 80040e4:	493d      	ldr	r1, [pc, #244]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d022      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004100:	d11d      	bne.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004102:	4b36      	ldr	r3, [pc, #216]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004108:	0e1b      	lsrs	r3, r3, #24
 800410a:	f003 030f 	and.w	r3, r3, #15
 800410e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004110:	4b32      	ldr	r3, [pc, #200]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004116:	0f1b      	lsrs	r3, r3, #28
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	019a      	lsls	r2, r3, #6
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	041b      	lsls	r3, r3, #16
 800412a:	431a      	orrs	r2, r3
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	061b      	lsls	r3, r3, #24
 8004130:	431a      	orrs	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	071b      	lsls	r3, r3, #28
 8004136:	4929      	ldr	r1, [pc, #164]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004138:	4313      	orrs	r3, r2
 800413a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0308 	and.w	r3, r3, #8
 8004146:	2b00      	cmp	r3, #0
 8004148:	d028      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800414a:	4b24      	ldr	r3, [pc, #144]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800414c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004150:	0e1b      	lsrs	r3, r3, #24
 8004152:	f003 030f 	and.w	r3, r3, #15
 8004156:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004158:	4b20      	ldr	r3, [pc, #128]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800415a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415e:	0c1b      	lsrs	r3, r3, #16
 8004160:	f003 0303 	and.w	r3, r3, #3
 8004164:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	019a      	lsls	r2, r3, #6
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	041b      	lsls	r3, r3, #16
 8004170:	431a      	orrs	r2, r3
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	061b      	lsls	r3, r3, #24
 8004176:	431a      	orrs	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	69db      	ldr	r3, [r3, #28]
 800417c:	071b      	lsls	r3, r3, #28
 800417e:	4917      	ldr	r1, [pc, #92]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004180:	4313      	orrs	r3, r2
 8004182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004186:	4b15      	ldr	r3, [pc, #84]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004188:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800418c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004194:	4911      	ldr	r1, [pc, #68]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004196:	4313      	orrs	r3, r2
 8004198:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800419c:	4b0f      	ldr	r3, [pc, #60]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a0e      	ldr	r2, [pc, #56]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041a8:	f7fe fbb6 	bl	8002918 <HAL_GetTick>
 80041ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041ae:	e008      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80041b0:	f7fe fbb2 	bl	8002918 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b64      	cmp	r3, #100	; 0x64
 80041bc:	d901      	bls.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e007      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041c2:	4b06      	ldr	r3, [pc, #24]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041ce:	d1ef      	bne.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3720      	adds	r7, #32
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	40023800 	.word	0x40023800

080041e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e09d      	b.n	800432e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d108      	bne.n	800420c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004202:	d009      	beq.n	8004218 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	61da      	str	r2, [r3, #28]
 800420a:	e005      	b.n	8004218 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d106      	bne.n	8004238 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f7fe f8a8 	bl	8002388 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2202      	movs	r2, #2
 800423c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800424e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004258:	d902      	bls.n	8004260 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800425a:	2300      	movs	r3, #0
 800425c:	60fb      	str	r3, [r7, #12]
 800425e:	e002      	b.n	8004266 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004260:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004264:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800426e:	d007      	beq.n	8004280 <HAL_SPI_Init+0xa0>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004278:	d002      	beq.n	8004280 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004290:	431a      	orrs	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	431a      	orrs	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	431a      	orrs	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042ae:	431a      	orrs	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	69db      	ldr	r3, [r3, #28]
 80042b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042b8:	431a      	orrs	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c2:	ea42 0103 	orr.w	r1, r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	0c1b      	lsrs	r3, r3, #16
 80042dc:	f003 0204 	and.w	r2, r3, #4
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e4:	f003 0310 	and.w	r3, r3, #16
 80042e8:	431a      	orrs	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ee:	f003 0308 	and.w	r3, r3, #8
 80042f2:	431a      	orrs	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80042fc:	ea42 0103 	orr.w	r1, r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	430a      	orrs	r2, r1
 800430c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	69da      	ldr	r2, [r3, #28]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800431c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b08a      	sub	sp, #40	; 0x28
 800433a:	af00      	add	r7, sp, #0
 800433c:	60f8      	str	r0, [r7, #12]
 800433e:	60b9      	str	r1, [r7, #8]
 8004340:	607a      	str	r2, [r7, #4]
 8004342:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004344:	2301      	movs	r3, #1
 8004346:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004348:	2300      	movs	r3, #0
 800434a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004354:	2b01      	cmp	r3, #1
 8004356:	d101      	bne.n	800435c <HAL_SPI_TransmitReceive+0x26>
 8004358:	2302      	movs	r3, #2
 800435a:	e1fb      	b.n	8004754 <HAL_SPI_TransmitReceive+0x41e>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004364:	f7fe fad8 	bl	8002918 <HAL_GetTick>
 8004368:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004370:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004378:	887b      	ldrh	r3, [r7, #2]
 800437a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800437c:	887b      	ldrh	r3, [r7, #2]
 800437e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004380:	7efb      	ldrb	r3, [r7, #27]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d00e      	beq.n	80043a4 <HAL_SPI_TransmitReceive+0x6e>
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800438c:	d106      	bne.n	800439c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d102      	bne.n	800439c <HAL_SPI_TransmitReceive+0x66>
 8004396:	7efb      	ldrb	r3, [r7, #27]
 8004398:	2b04      	cmp	r3, #4
 800439a:	d003      	beq.n	80043a4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800439c:	2302      	movs	r3, #2
 800439e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80043a2:	e1cd      	b.n	8004740 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d005      	beq.n	80043b6 <HAL_SPI_TransmitReceive+0x80>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d002      	beq.n	80043b6 <HAL_SPI_TransmitReceive+0x80>
 80043b0:	887b      	ldrh	r3, [r7, #2]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d103      	bne.n	80043be <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80043bc:	e1c0      	b.n	8004740 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d003      	beq.n	80043d2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2205      	movs	r2, #5
 80043ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	887a      	ldrh	r2, [r7, #2]
 80043e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	887a      	ldrh	r2, [r7, #2]
 80043ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	68ba      	ldr	r2, [r7, #8]
 80043f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	887a      	ldrh	r2, [r7, #2]
 80043f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	887a      	ldrh	r2, [r7, #2]
 80043fe:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004414:	d802      	bhi.n	800441c <HAL_SPI_TransmitReceive+0xe6>
 8004416:	8a3b      	ldrh	r3, [r7, #16]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d908      	bls.n	800442e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	685a      	ldr	r2, [r3, #4]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800442a:	605a      	str	r2, [r3, #4]
 800442c:	e007      	b.n	800443e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800443c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004448:	2b40      	cmp	r3, #64	; 0x40
 800444a:	d007      	beq.n	800445c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800445a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004464:	d97c      	bls.n	8004560 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d002      	beq.n	8004474 <HAL_SPI_TransmitReceive+0x13e>
 800446e:	8a7b      	ldrh	r3, [r7, #18]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d169      	bne.n	8004548 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004478:	881a      	ldrh	r2, [r3, #0]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004484:	1c9a      	adds	r2, r3, #2
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800448e:	b29b      	uxth	r3, r3
 8004490:	3b01      	subs	r3, #1
 8004492:	b29a      	uxth	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004498:	e056      	b.n	8004548 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d11b      	bne.n	80044e0 <HAL_SPI_TransmitReceive+0x1aa>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d016      	beq.n	80044e0 <HAL_SPI_TransmitReceive+0x1aa>
 80044b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d113      	bne.n	80044e0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044bc:	881a      	ldrh	r2, [r3, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c8:	1c9a      	adds	r2, r3, #2
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	3b01      	subs	r3, #1
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044dc:	2300      	movs	r3, #0
 80044de:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d11c      	bne.n	8004528 <HAL_SPI_TransmitReceive+0x1f2>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d016      	beq.n	8004528 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68da      	ldr	r2, [r3, #12]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004504:	b292      	uxth	r2, r2
 8004506:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450c:	1c9a      	adds	r2, r3, #2
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004518:	b29b      	uxth	r3, r3
 800451a:	3b01      	subs	r3, #1
 800451c:	b29a      	uxth	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004524:	2301      	movs	r3, #1
 8004526:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004528:	f7fe f9f6 	bl	8002918 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004534:	429a      	cmp	r2, r3
 8004536:	d807      	bhi.n	8004548 <HAL_SPI_TransmitReceive+0x212>
 8004538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800453e:	d003      	beq.n	8004548 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004546:	e0fb      	b.n	8004740 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800454c:	b29b      	uxth	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1a3      	bne.n	800449a <HAL_SPI_TransmitReceive+0x164>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004558:	b29b      	uxth	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d19d      	bne.n	800449a <HAL_SPI_TransmitReceive+0x164>
 800455e:	e0df      	b.n	8004720 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d003      	beq.n	8004570 <HAL_SPI_TransmitReceive+0x23a>
 8004568:	8a7b      	ldrh	r3, [r7, #18]
 800456a:	2b01      	cmp	r3, #1
 800456c:	f040 80cb 	bne.w	8004706 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004574:	b29b      	uxth	r3, r3
 8004576:	2b01      	cmp	r3, #1
 8004578:	d912      	bls.n	80045a0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457e:	881a      	ldrh	r2, [r3, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458a:	1c9a      	adds	r2, r3, #2
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004594:	b29b      	uxth	r3, r3
 8004596:	3b02      	subs	r3, #2
 8004598:	b29a      	uxth	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800459e:	e0b2      	b.n	8004706 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	330c      	adds	r3, #12
 80045aa:	7812      	ldrb	r2, [r2, #0]
 80045ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b2:	1c5a      	adds	r2, r3, #1
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045bc:	b29b      	uxth	r3, r3
 80045be:	3b01      	subs	r3, #1
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045c6:	e09e      	b.n	8004706 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d134      	bne.n	8004640 <HAL_SPI_TransmitReceive+0x30a>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045da:	b29b      	uxth	r3, r3
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d02f      	beq.n	8004640 <HAL_SPI_TransmitReceive+0x30a>
 80045e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d12c      	bne.n	8004640 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d912      	bls.n	8004616 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f4:	881a      	ldrh	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004600:	1c9a      	adds	r2, r3, #2
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800460a:	b29b      	uxth	r3, r3
 800460c:	3b02      	subs	r3, #2
 800460e:	b29a      	uxth	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004614:	e012      	b.n	800463c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	330c      	adds	r3, #12
 8004620:	7812      	ldrb	r2, [r2, #0]
 8004622:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004628:	1c5a      	adds	r2, r3, #1
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004632:	b29b      	uxth	r3, r3
 8004634:	3b01      	subs	r3, #1
 8004636:	b29a      	uxth	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800463c:	2300      	movs	r3, #0
 800463e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b01      	cmp	r3, #1
 800464c:	d148      	bne.n	80046e0 <HAL_SPI_TransmitReceive+0x3aa>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004654:	b29b      	uxth	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d042      	beq.n	80046e0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004660:	b29b      	uxth	r3, r3
 8004662:	2b01      	cmp	r3, #1
 8004664:	d923      	bls.n	80046ae <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68da      	ldr	r2, [r3, #12]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004670:	b292      	uxth	r2, r2
 8004672:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004678:	1c9a      	adds	r2, r3, #2
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004684:	b29b      	uxth	r3, r3
 8004686:	3b02      	subs	r3, #2
 8004688:	b29a      	uxth	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004696:	b29b      	uxth	r3, r3
 8004698:	2b01      	cmp	r3, #1
 800469a:	d81f      	bhi.n	80046dc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	685a      	ldr	r2, [r3, #4]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80046aa:	605a      	str	r2, [r3, #4]
 80046ac:	e016      	b.n	80046dc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f103 020c 	add.w	r2, r3, #12
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ba:	7812      	ldrb	r2, [r2, #0]
 80046bc:	b2d2      	uxtb	r2, r2
 80046be:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c4:	1c5a      	adds	r2, r3, #1
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	3b01      	subs	r3, #1
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046dc:	2301      	movs	r3, #1
 80046de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80046e0:	f7fe f91a 	bl	8002918 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d803      	bhi.n	80046f8 <HAL_SPI_TransmitReceive+0x3c2>
 80046f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f6:	d102      	bne.n	80046fe <HAL_SPI_TransmitReceive+0x3c8>
 80046f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d103      	bne.n	8004706 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004704:	e01c      	b.n	8004740 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800470a:	b29b      	uxth	r3, r3
 800470c:	2b00      	cmp	r3, #0
 800470e:	f47f af5b 	bne.w	80045c8 <HAL_SPI_TransmitReceive+0x292>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004718:	b29b      	uxth	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	f47f af54 	bne.w	80045c8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004720:	69fa      	ldr	r2, [r7, #28]
 8004722:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 f937 	bl	8004998 <SPI_EndRxTxTransaction>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d006      	beq.n	800473e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2220      	movs	r2, #32
 800473a:	661a      	str	r2, [r3, #96]	; 0x60
 800473c:	e000      	b.n	8004740 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800473e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004750:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004754:	4618      	mov	r0, r3
 8004756:	3728      	adds	r7, #40	; 0x28
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b088      	sub	sp, #32
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	603b      	str	r3, [r7, #0]
 8004768:	4613      	mov	r3, r2
 800476a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800476c:	f7fe f8d4 	bl	8002918 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004774:	1a9b      	subs	r3, r3, r2
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	4413      	add	r3, r2
 800477a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800477c:	f7fe f8cc 	bl	8002918 <HAL_GetTick>
 8004780:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004782:	4b39      	ldr	r3, [pc, #228]	; (8004868 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	015b      	lsls	r3, r3, #5
 8004788:	0d1b      	lsrs	r3, r3, #20
 800478a:	69fa      	ldr	r2, [r7, #28]
 800478c:	fb02 f303 	mul.w	r3, r2, r3
 8004790:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004792:	e054      	b.n	800483e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800479a:	d050      	beq.n	800483e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800479c:	f7fe f8bc 	bl	8002918 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	69fa      	ldr	r2, [r7, #28]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d902      	bls.n	80047b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d13d      	bne.n	800482e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80047c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047ca:	d111      	bne.n	80047f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047d4:	d004      	beq.n	80047e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047de:	d107      	bne.n	80047f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047f8:	d10f      	bne.n	800481a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004808:	601a      	str	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004818:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e017      	b.n	800485e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004834:	2300      	movs	r3, #0
 8004836:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	3b01      	subs	r3, #1
 800483c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	689a      	ldr	r2, [r3, #8]
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	4013      	ands	r3, r2
 8004848:	68ba      	ldr	r2, [r7, #8]
 800484a:	429a      	cmp	r2, r3
 800484c:	bf0c      	ite	eq
 800484e:	2301      	moveq	r3, #1
 8004850:	2300      	movne	r3, #0
 8004852:	b2db      	uxtb	r3, r3
 8004854:	461a      	mov	r2, r3
 8004856:	79fb      	ldrb	r3, [r7, #7]
 8004858:	429a      	cmp	r2, r3
 800485a:	d19b      	bne.n	8004794 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3720      	adds	r7, #32
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	20000000 	.word	0x20000000

0800486c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b08a      	sub	sp, #40	; 0x28
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]
 8004878:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800487a:	2300      	movs	r3, #0
 800487c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800487e:	f7fe f84b 	bl	8002918 <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004886:	1a9b      	subs	r3, r3, r2
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	4413      	add	r3, r2
 800488c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800488e:	f7fe f843 	bl	8002918 <HAL_GetTick>
 8004892:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	330c      	adds	r3, #12
 800489a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800489c:	4b3d      	ldr	r3, [pc, #244]	; (8004994 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	4613      	mov	r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4413      	add	r3, r2
 80048a6:	00da      	lsls	r2, r3, #3
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	0d1b      	lsrs	r3, r3, #20
 80048ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ae:	fb02 f303 	mul.w	r3, r2, r3
 80048b2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80048b4:	e060      	b.n	8004978 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80048bc:	d107      	bne.n	80048ce <SPI_WaitFifoStateUntilTimeout+0x62>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d104      	bne.n	80048ce <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80048cc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d4:	d050      	beq.n	8004978 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80048d6:	f7fe f81f 	bl	8002918 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	6a3b      	ldr	r3, [r7, #32]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d902      	bls.n	80048ec <SPI_WaitFifoStateUntilTimeout+0x80>
 80048e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d13d      	bne.n	8004968 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	685a      	ldr	r2, [r3, #4]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80048fa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004904:	d111      	bne.n	800492a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800490e:	d004      	beq.n	800491a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004918:	d107      	bne.n	800492a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004928:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004932:	d10f      	bne.n	8004954 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004952:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e010      	b.n	800498a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800496e:	2300      	movs	r3, #0
 8004970:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	3b01      	subs	r3, #1
 8004976:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	689a      	ldr	r2, [r3, #8]
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	4013      	ands	r3, r2
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	429a      	cmp	r2, r3
 8004986:	d196      	bne.n	80048b6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3728      	adds	r7, #40	; 0x28
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	20000000 	.word	0x20000000

08004998 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b088      	sub	sp, #32
 800499c:	af02      	add	r7, sp, #8
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	9300      	str	r3, [sp, #0]
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f7ff ff5b 	bl	800486c <SPI_WaitFifoStateUntilTimeout>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d007      	beq.n	80049cc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049c0:	f043 0220 	orr.w	r2, r3, #32
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e046      	b.n	8004a5a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80049cc:	4b25      	ldr	r3, [pc, #148]	; (8004a64 <SPI_EndRxTxTransaction+0xcc>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a25      	ldr	r2, [pc, #148]	; (8004a68 <SPI_EndRxTxTransaction+0xd0>)
 80049d2:	fba2 2303 	umull	r2, r3, r2, r3
 80049d6:	0d5b      	lsrs	r3, r3, #21
 80049d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80049dc:	fb02 f303 	mul.w	r3, r2, r3
 80049e0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049ea:	d112      	bne.n	8004a12 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	9300      	str	r3, [sp, #0]
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	2200      	movs	r2, #0
 80049f4:	2180      	movs	r1, #128	; 0x80
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f7ff feb0 	bl	800475c <SPI_WaitFlagStateUntilTimeout>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d016      	beq.n	8004a30 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a06:	f043 0220 	orr.w	r2, r3, #32
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e023      	b.n	8004a5a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d00a      	beq.n	8004a2e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a28:	2b80      	cmp	r3, #128	; 0x80
 8004a2a:	d0f2      	beq.n	8004a12 <SPI_EndRxTxTransaction+0x7a>
 8004a2c:	e000      	b.n	8004a30 <SPI_EndRxTxTransaction+0x98>
        break;
 8004a2e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f7ff ff15 	bl	800486c <SPI_WaitFifoStateUntilTimeout>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d007      	beq.n	8004a58 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a4c:	f043 0220 	orr.w	r2, r3, #32
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e000      	b.n	8004a5a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3718      	adds	r7, #24
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	20000000 	.word	0x20000000
 8004a68:	165e9f81 	.word	0x165e9f81

08004a6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e049      	b.n	8004b12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d106      	bne.n	8004a98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7fd fcda 	bl	800244c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	3304      	adds	r3, #4
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	4610      	mov	r0, r2
 8004aac:	f000 fd30 	bl	8005510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3708      	adds	r7, #8
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
	...

08004b1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d001      	beq.n	8004b34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e054      	b.n	8004bde <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2202      	movs	r2, #2
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68da      	ldr	r2, [r3, #12]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f042 0201 	orr.w	r2, r2, #1
 8004b4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a26      	ldr	r2, [pc, #152]	; (8004bec <HAL_TIM_Base_Start_IT+0xd0>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d022      	beq.n	8004b9c <HAL_TIM_Base_Start_IT+0x80>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b5e:	d01d      	beq.n	8004b9c <HAL_TIM_Base_Start_IT+0x80>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a22      	ldr	r2, [pc, #136]	; (8004bf0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d018      	beq.n	8004b9c <HAL_TIM_Base_Start_IT+0x80>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a21      	ldr	r2, [pc, #132]	; (8004bf4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d013      	beq.n	8004b9c <HAL_TIM_Base_Start_IT+0x80>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a1f      	ldr	r2, [pc, #124]	; (8004bf8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d00e      	beq.n	8004b9c <HAL_TIM_Base_Start_IT+0x80>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a1e      	ldr	r2, [pc, #120]	; (8004bfc <HAL_TIM_Base_Start_IT+0xe0>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d009      	beq.n	8004b9c <HAL_TIM_Base_Start_IT+0x80>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a1c      	ldr	r2, [pc, #112]	; (8004c00 <HAL_TIM_Base_Start_IT+0xe4>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d004      	beq.n	8004b9c <HAL_TIM_Base_Start_IT+0x80>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a1b      	ldr	r2, [pc, #108]	; (8004c04 <HAL_TIM_Base_Start_IT+0xe8>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d115      	bne.n	8004bc8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	689a      	ldr	r2, [r3, #8]
 8004ba2:	4b19      	ldr	r3, [pc, #100]	; (8004c08 <HAL_TIM_Base_Start_IT+0xec>)
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2b06      	cmp	r3, #6
 8004bac:	d015      	beq.n	8004bda <HAL_TIM_Base_Start_IT+0xbe>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bb4:	d011      	beq.n	8004bda <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f042 0201 	orr.w	r2, r2, #1
 8004bc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bc6:	e008      	b.n	8004bda <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f042 0201 	orr.w	r2, r2, #1
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	e000      	b.n	8004bdc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bda:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3714      	adds	r7, #20
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	40010000 	.word	0x40010000
 8004bf0:	40000400 	.word	0x40000400
 8004bf4:	40000800 	.word	0x40000800
 8004bf8:	40000c00 	.word	0x40000c00
 8004bfc:	40010400 	.word	0x40010400
 8004c00:	40014000 	.word	0x40014000
 8004c04:	40001800 	.word	0x40001800
 8004c08:	00010007 	.word	0x00010007

08004c0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e049      	b.n	8004cb2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d106      	bne.n	8004c38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f841 	bl	8004cba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	3304      	adds	r3, #4
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	f000 fc60 	bl	8005510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3708      	adds	r7, #8
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b083      	sub	sp, #12
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004cc2:	bf00      	nop
 8004cc4:	370c      	adds	r7, #12
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
	...

08004cd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d109      	bne.n	8004cf4 <HAL_TIM_PWM_Start+0x24>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	bf14      	ite	ne
 8004cec:	2301      	movne	r3, #1
 8004cee:	2300      	moveq	r3, #0
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	e03c      	b.n	8004d6e <HAL_TIM_PWM_Start+0x9e>
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	2b04      	cmp	r3, #4
 8004cf8:	d109      	bne.n	8004d0e <HAL_TIM_PWM_Start+0x3e>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	bf14      	ite	ne
 8004d06:	2301      	movne	r3, #1
 8004d08:	2300      	moveq	r3, #0
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	e02f      	b.n	8004d6e <HAL_TIM_PWM_Start+0x9e>
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	2b08      	cmp	r3, #8
 8004d12:	d109      	bne.n	8004d28 <HAL_TIM_PWM_Start+0x58>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	bf14      	ite	ne
 8004d20:	2301      	movne	r3, #1
 8004d22:	2300      	moveq	r3, #0
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	e022      	b.n	8004d6e <HAL_TIM_PWM_Start+0x9e>
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	2b0c      	cmp	r3, #12
 8004d2c:	d109      	bne.n	8004d42 <HAL_TIM_PWM_Start+0x72>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	bf14      	ite	ne
 8004d3a:	2301      	movne	r3, #1
 8004d3c:	2300      	moveq	r3, #0
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	e015      	b.n	8004d6e <HAL_TIM_PWM_Start+0x9e>
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	2b10      	cmp	r3, #16
 8004d46:	d109      	bne.n	8004d5c <HAL_TIM_PWM_Start+0x8c>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	bf14      	ite	ne
 8004d54:	2301      	movne	r3, #1
 8004d56:	2300      	moveq	r3, #0
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	e008      	b.n	8004d6e <HAL_TIM_PWM_Start+0x9e>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	bf14      	ite	ne
 8004d68:	2301      	movne	r3, #1
 8004d6a:	2300      	moveq	r3, #0
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e092      	b.n	8004e9c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d104      	bne.n	8004d86 <HAL_TIM_PWM_Start+0xb6>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2202      	movs	r2, #2
 8004d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d84:	e023      	b.n	8004dce <HAL_TIM_PWM_Start+0xfe>
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	2b04      	cmp	r3, #4
 8004d8a:	d104      	bne.n	8004d96 <HAL_TIM_PWM_Start+0xc6>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2202      	movs	r2, #2
 8004d90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d94:	e01b      	b.n	8004dce <HAL_TIM_PWM_Start+0xfe>
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2b08      	cmp	r3, #8
 8004d9a:	d104      	bne.n	8004da6 <HAL_TIM_PWM_Start+0xd6>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004da4:	e013      	b.n	8004dce <HAL_TIM_PWM_Start+0xfe>
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2b0c      	cmp	r3, #12
 8004daa:	d104      	bne.n	8004db6 <HAL_TIM_PWM_Start+0xe6>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2202      	movs	r2, #2
 8004db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004db4:	e00b      	b.n	8004dce <HAL_TIM_PWM_Start+0xfe>
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	2b10      	cmp	r3, #16
 8004dba:	d104      	bne.n	8004dc6 <HAL_TIM_PWM_Start+0xf6>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dc4:	e003      	b.n	8004dce <HAL_TIM_PWM_Start+0xfe>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2202      	movs	r2, #2
 8004dca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	6839      	ldr	r1, [r7, #0]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f000 ff32 	bl	8005c40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a30      	ldr	r2, [pc, #192]	; (8004ea4 <HAL_TIM_PWM_Start+0x1d4>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d004      	beq.n	8004df0 <HAL_TIM_PWM_Start+0x120>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a2f      	ldr	r2, [pc, #188]	; (8004ea8 <HAL_TIM_PWM_Start+0x1d8>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d101      	bne.n	8004df4 <HAL_TIM_PWM_Start+0x124>
 8004df0:	2301      	movs	r3, #1
 8004df2:	e000      	b.n	8004df6 <HAL_TIM_PWM_Start+0x126>
 8004df4:	2300      	movs	r3, #0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d007      	beq.n	8004e0a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a25      	ldr	r2, [pc, #148]	; (8004ea4 <HAL_TIM_PWM_Start+0x1d4>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d022      	beq.n	8004e5a <HAL_TIM_PWM_Start+0x18a>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e1c:	d01d      	beq.n	8004e5a <HAL_TIM_PWM_Start+0x18a>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a22      	ldr	r2, [pc, #136]	; (8004eac <HAL_TIM_PWM_Start+0x1dc>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d018      	beq.n	8004e5a <HAL_TIM_PWM_Start+0x18a>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a20      	ldr	r2, [pc, #128]	; (8004eb0 <HAL_TIM_PWM_Start+0x1e0>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d013      	beq.n	8004e5a <HAL_TIM_PWM_Start+0x18a>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a1f      	ldr	r2, [pc, #124]	; (8004eb4 <HAL_TIM_PWM_Start+0x1e4>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d00e      	beq.n	8004e5a <HAL_TIM_PWM_Start+0x18a>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a19      	ldr	r2, [pc, #100]	; (8004ea8 <HAL_TIM_PWM_Start+0x1d8>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d009      	beq.n	8004e5a <HAL_TIM_PWM_Start+0x18a>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a1b      	ldr	r2, [pc, #108]	; (8004eb8 <HAL_TIM_PWM_Start+0x1e8>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d004      	beq.n	8004e5a <HAL_TIM_PWM_Start+0x18a>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a19      	ldr	r2, [pc, #100]	; (8004ebc <HAL_TIM_PWM_Start+0x1ec>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d115      	bne.n	8004e86 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689a      	ldr	r2, [r3, #8]
 8004e60:	4b17      	ldr	r3, [pc, #92]	; (8004ec0 <HAL_TIM_PWM_Start+0x1f0>)
 8004e62:	4013      	ands	r3, r2
 8004e64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2b06      	cmp	r3, #6
 8004e6a:	d015      	beq.n	8004e98 <HAL_TIM_PWM_Start+0x1c8>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e72:	d011      	beq.n	8004e98 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f042 0201 	orr.w	r2, r2, #1
 8004e82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e84:	e008      	b.n	8004e98 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f042 0201 	orr.w	r2, r2, #1
 8004e94:	601a      	str	r2, [r3, #0]
 8004e96:	e000      	b.n	8004e9a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e98:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3710      	adds	r7, #16
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	40010000 	.word	0x40010000
 8004ea8:	40010400 	.word	0x40010400
 8004eac:	40000400 	.word	0x40000400
 8004eb0:	40000800 	.word	0x40000800
 8004eb4:	40000c00 	.word	0x40000c00
 8004eb8:	40014000 	.word	0x40014000
 8004ebc:	40001800 	.word	0x40001800
 8004ec0:	00010007 	.word	0x00010007

08004ec4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d122      	bne.n	8004f20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	f003 0302 	and.w	r3, r3, #2
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d11b      	bne.n	8004f20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f06f 0202 	mvn.w	r2, #2
 8004ef0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	f003 0303 	and.w	r3, r3, #3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d003      	beq.n	8004f0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 fae4 	bl	80054d4 <HAL_TIM_IC_CaptureCallback>
 8004f0c:	e005      	b.n	8004f1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 fad6 	bl	80054c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 fae7 	bl	80054e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	f003 0304 	and.w	r3, r3, #4
 8004f2a:	2b04      	cmp	r3, #4
 8004f2c:	d122      	bne.n	8004f74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	f003 0304 	and.w	r3, r3, #4
 8004f38:	2b04      	cmp	r3, #4
 8004f3a:	d11b      	bne.n	8004f74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f06f 0204 	mvn.w	r2, #4
 8004f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2202      	movs	r2, #2
 8004f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d003      	beq.n	8004f62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 faba 	bl	80054d4 <HAL_TIM_IC_CaptureCallback>
 8004f60:	e005      	b.n	8004f6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 faac 	bl	80054c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 fabd 	bl	80054e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	f003 0308 	and.w	r3, r3, #8
 8004f7e:	2b08      	cmp	r3, #8
 8004f80:	d122      	bne.n	8004fc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	f003 0308 	and.w	r3, r3, #8
 8004f8c:	2b08      	cmp	r3, #8
 8004f8e:	d11b      	bne.n	8004fc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f06f 0208 	mvn.w	r2, #8
 8004f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2204      	movs	r2, #4
 8004f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	69db      	ldr	r3, [r3, #28]
 8004fa6:	f003 0303 	and.w	r3, r3, #3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d003      	beq.n	8004fb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 fa90 	bl	80054d4 <HAL_TIM_IC_CaptureCallback>
 8004fb4:	e005      	b.n	8004fc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 fa82 	bl	80054c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 fa93 	bl	80054e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	f003 0310 	and.w	r3, r3, #16
 8004fd2:	2b10      	cmp	r3, #16
 8004fd4:	d122      	bne.n	800501c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	f003 0310 	and.w	r3, r3, #16
 8004fe0:	2b10      	cmp	r3, #16
 8004fe2:	d11b      	bne.n	800501c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f06f 0210 	mvn.w	r2, #16
 8004fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2208      	movs	r2, #8
 8004ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	69db      	ldr	r3, [r3, #28]
 8004ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d003      	beq.n	800500a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 fa66 	bl	80054d4 <HAL_TIM_IC_CaptureCallback>
 8005008:	e005      	b.n	8005016 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 fa58 	bl	80054c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 fa69 	bl	80054e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b01      	cmp	r3, #1
 8005028:	d10e      	bne.n	8005048 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	f003 0301 	and.w	r3, r3, #1
 8005034:	2b01      	cmp	r3, #1
 8005036:	d107      	bne.n	8005048 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f06f 0201 	mvn.w	r2, #1
 8005040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f7fd f8b8 	bl	80021b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005052:	2b80      	cmp	r3, #128	; 0x80
 8005054:	d10e      	bne.n	8005074 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005060:	2b80      	cmp	r3, #128	; 0x80
 8005062:	d107      	bne.n	8005074 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800506c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 fea4 	bl	8005dbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800507e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005082:	d10e      	bne.n	80050a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800508e:	2b80      	cmp	r3, #128	; 0x80
 8005090:	d107      	bne.n	80050a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800509a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 fe97 	bl	8005dd0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ac:	2b40      	cmp	r3, #64	; 0x40
 80050ae:	d10e      	bne.n	80050ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ba:	2b40      	cmp	r3, #64	; 0x40
 80050bc:	d107      	bne.n	80050ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 fa17 	bl	80054fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	f003 0320 	and.w	r3, r3, #32
 80050d8:	2b20      	cmp	r3, #32
 80050da:	d10e      	bne.n	80050fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	f003 0320 	and.w	r3, r3, #32
 80050e6:	2b20      	cmp	r3, #32
 80050e8:	d107      	bne.n	80050fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f06f 0220 	mvn.w	r2, #32
 80050f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 fe57 	bl	8005da8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050fa:	bf00      	nop
 80050fc:	3708      	adds	r7, #8
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
	...

08005104 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b086      	sub	sp, #24
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005110:	2300      	movs	r3, #0
 8005112:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800511a:	2b01      	cmp	r3, #1
 800511c:	d101      	bne.n	8005122 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800511e:	2302      	movs	r3, #2
 8005120:	e0ff      	b.n	8005322 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2b14      	cmp	r3, #20
 800512e:	f200 80f0 	bhi.w	8005312 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005132:	a201      	add	r2, pc, #4	; (adr r2, 8005138 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005138:	0800518d 	.word	0x0800518d
 800513c:	08005313 	.word	0x08005313
 8005140:	08005313 	.word	0x08005313
 8005144:	08005313 	.word	0x08005313
 8005148:	080051cd 	.word	0x080051cd
 800514c:	08005313 	.word	0x08005313
 8005150:	08005313 	.word	0x08005313
 8005154:	08005313 	.word	0x08005313
 8005158:	0800520f 	.word	0x0800520f
 800515c:	08005313 	.word	0x08005313
 8005160:	08005313 	.word	0x08005313
 8005164:	08005313 	.word	0x08005313
 8005168:	0800524f 	.word	0x0800524f
 800516c:	08005313 	.word	0x08005313
 8005170:	08005313 	.word	0x08005313
 8005174:	08005313 	.word	0x08005313
 8005178:	08005291 	.word	0x08005291
 800517c:	08005313 	.word	0x08005313
 8005180:	08005313 	.word	0x08005313
 8005184:	08005313 	.word	0x08005313
 8005188:	080052d1 	.word	0x080052d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68b9      	ldr	r1, [r7, #8]
 8005192:	4618      	mov	r0, r3
 8005194:	f000 fa5c 	bl	8005650 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	699a      	ldr	r2, [r3, #24]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f042 0208 	orr.w	r2, r2, #8
 80051a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	699a      	ldr	r2, [r3, #24]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f022 0204 	bic.w	r2, r2, #4
 80051b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6999      	ldr	r1, [r3, #24]
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	691a      	ldr	r2, [r3, #16]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	619a      	str	r2, [r3, #24]
      break;
 80051ca:	e0a5      	b.n	8005318 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68b9      	ldr	r1, [r7, #8]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 faae 	bl	8005734 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	699a      	ldr	r2, [r3, #24]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	699a      	ldr	r2, [r3, #24]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6999      	ldr	r1, [r3, #24]
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	021a      	lsls	r2, r3, #8
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	430a      	orrs	r2, r1
 800520a:	619a      	str	r2, [r3, #24]
      break;
 800520c:	e084      	b.n	8005318 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68b9      	ldr	r1, [r7, #8]
 8005214:	4618      	mov	r0, r3
 8005216:	f000 fb05 	bl	8005824 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	69da      	ldr	r2, [r3, #28]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f042 0208 	orr.w	r2, r2, #8
 8005228:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	69da      	ldr	r2, [r3, #28]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f022 0204 	bic.w	r2, r2, #4
 8005238:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	69d9      	ldr	r1, [r3, #28]
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	691a      	ldr	r2, [r3, #16]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	430a      	orrs	r2, r1
 800524a:	61da      	str	r2, [r3, #28]
      break;
 800524c:	e064      	b.n	8005318 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68b9      	ldr	r1, [r7, #8]
 8005254:	4618      	mov	r0, r3
 8005256:	f000 fb5b 	bl	8005910 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	69da      	ldr	r2, [r3, #28]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005268:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	69da      	ldr	r2, [r3, #28]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005278:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	69d9      	ldr	r1, [r3, #28]
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	021a      	lsls	r2, r3, #8
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	430a      	orrs	r2, r1
 800528c:	61da      	str	r2, [r3, #28]
      break;
 800528e:	e043      	b.n	8005318 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68b9      	ldr	r1, [r7, #8]
 8005296:	4618      	mov	r0, r3
 8005298:	f000 fb92 	bl	80059c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f042 0208 	orr.w	r2, r2, #8
 80052aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f022 0204 	bic.w	r2, r2, #4
 80052ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	691a      	ldr	r2, [r3, #16]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	430a      	orrs	r2, r1
 80052cc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80052ce:	e023      	b.n	8005318 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68b9      	ldr	r1, [r7, #8]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 fbc4 	bl	8005a64 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	021a      	lsls	r2, r3, #8
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	430a      	orrs	r2, r1
 800530e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005310:	e002      	b.n	8005318 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	75fb      	strb	r3, [r7, #23]
      break;
 8005316:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005320:	7dfb      	ldrb	r3, [r7, #23]
}
 8005322:	4618      	mov	r0, r3
 8005324:	3718      	adds	r7, #24
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop

0800532c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005336:	2300      	movs	r3, #0
 8005338:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005340:	2b01      	cmp	r3, #1
 8005342:	d101      	bne.n	8005348 <HAL_TIM_ConfigClockSource+0x1c>
 8005344:	2302      	movs	r3, #2
 8005346:	e0b4      	b.n	80054b2 <HAL_TIM_ConfigClockSource+0x186>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2202      	movs	r2, #2
 8005354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	4b56      	ldr	r3, [pc, #344]	; (80054bc <HAL_TIM_ConfigClockSource+0x190>)
 8005364:	4013      	ands	r3, r2
 8005366:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800536e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005380:	d03e      	beq.n	8005400 <HAL_TIM_ConfigClockSource+0xd4>
 8005382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005386:	f200 8087 	bhi.w	8005498 <HAL_TIM_ConfigClockSource+0x16c>
 800538a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800538e:	f000 8086 	beq.w	800549e <HAL_TIM_ConfigClockSource+0x172>
 8005392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005396:	d87f      	bhi.n	8005498 <HAL_TIM_ConfigClockSource+0x16c>
 8005398:	2b70      	cmp	r3, #112	; 0x70
 800539a:	d01a      	beq.n	80053d2 <HAL_TIM_ConfigClockSource+0xa6>
 800539c:	2b70      	cmp	r3, #112	; 0x70
 800539e:	d87b      	bhi.n	8005498 <HAL_TIM_ConfigClockSource+0x16c>
 80053a0:	2b60      	cmp	r3, #96	; 0x60
 80053a2:	d050      	beq.n	8005446 <HAL_TIM_ConfigClockSource+0x11a>
 80053a4:	2b60      	cmp	r3, #96	; 0x60
 80053a6:	d877      	bhi.n	8005498 <HAL_TIM_ConfigClockSource+0x16c>
 80053a8:	2b50      	cmp	r3, #80	; 0x50
 80053aa:	d03c      	beq.n	8005426 <HAL_TIM_ConfigClockSource+0xfa>
 80053ac:	2b50      	cmp	r3, #80	; 0x50
 80053ae:	d873      	bhi.n	8005498 <HAL_TIM_ConfigClockSource+0x16c>
 80053b0:	2b40      	cmp	r3, #64	; 0x40
 80053b2:	d058      	beq.n	8005466 <HAL_TIM_ConfigClockSource+0x13a>
 80053b4:	2b40      	cmp	r3, #64	; 0x40
 80053b6:	d86f      	bhi.n	8005498 <HAL_TIM_ConfigClockSource+0x16c>
 80053b8:	2b30      	cmp	r3, #48	; 0x30
 80053ba:	d064      	beq.n	8005486 <HAL_TIM_ConfigClockSource+0x15a>
 80053bc:	2b30      	cmp	r3, #48	; 0x30
 80053be:	d86b      	bhi.n	8005498 <HAL_TIM_ConfigClockSource+0x16c>
 80053c0:	2b20      	cmp	r3, #32
 80053c2:	d060      	beq.n	8005486 <HAL_TIM_ConfigClockSource+0x15a>
 80053c4:	2b20      	cmp	r3, #32
 80053c6:	d867      	bhi.n	8005498 <HAL_TIM_ConfigClockSource+0x16c>
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d05c      	beq.n	8005486 <HAL_TIM_ConfigClockSource+0x15a>
 80053cc:	2b10      	cmp	r3, #16
 80053ce:	d05a      	beq.n	8005486 <HAL_TIM_ConfigClockSource+0x15a>
 80053d0:	e062      	b.n	8005498 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6818      	ldr	r0, [r3, #0]
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	6899      	ldr	r1, [r3, #8]
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	f000 fc0d 	bl	8005c00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	609a      	str	r2, [r3, #8]
      break;
 80053fe:	e04f      	b.n	80054a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6818      	ldr	r0, [r3, #0]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	6899      	ldr	r1, [r3, #8]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	685a      	ldr	r2, [r3, #4]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	f000 fbf6 	bl	8005c00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	689a      	ldr	r2, [r3, #8]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005422:	609a      	str	r2, [r3, #8]
      break;
 8005424:	e03c      	b.n	80054a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6818      	ldr	r0, [r3, #0]
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	6859      	ldr	r1, [r3, #4]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	461a      	mov	r2, r3
 8005434:	f000 fb6a 	bl	8005b0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2150      	movs	r1, #80	; 0x50
 800543e:	4618      	mov	r0, r3
 8005440:	f000 fbc3 	bl	8005bca <TIM_ITRx_SetConfig>
      break;
 8005444:	e02c      	b.n	80054a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6818      	ldr	r0, [r3, #0]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	6859      	ldr	r1, [r3, #4]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	461a      	mov	r2, r3
 8005454:	f000 fb89 	bl	8005b6a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2160      	movs	r1, #96	; 0x60
 800545e:	4618      	mov	r0, r3
 8005460:	f000 fbb3 	bl	8005bca <TIM_ITRx_SetConfig>
      break;
 8005464:	e01c      	b.n	80054a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6818      	ldr	r0, [r3, #0]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	6859      	ldr	r1, [r3, #4]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	461a      	mov	r2, r3
 8005474:	f000 fb4a 	bl	8005b0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2140      	movs	r1, #64	; 0x40
 800547e:	4618      	mov	r0, r3
 8005480:	f000 fba3 	bl	8005bca <TIM_ITRx_SetConfig>
      break;
 8005484:	e00c      	b.n	80054a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4619      	mov	r1, r3
 8005490:	4610      	mov	r0, r2
 8005492:	f000 fb9a 	bl	8005bca <TIM_ITRx_SetConfig>
      break;
 8005496:	e003      	b.n	80054a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	73fb      	strb	r3, [r7, #15]
      break;
 800549c:	e000      	b.n	80054a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800549e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	fffeff88 	.word	0xfffeff88

080054c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054c8:	bf00      	nop
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054dc:	bf00      	nop
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a40      	ldr	r2, [pc, #256]	; (8005624 <TIM_Base_SetConfig+0x114>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d013      	beq.n	8005550 <TIM_Base_SetConfig+0x40>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800552e:	d00f      	beq.n	8005550 <TIM_Base_SetConfig+0x40>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a3d      	ldr	r2, [pc, #244]	; (8005628 <TIM_Base_SetConfig+0x118>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d00b      	beq.n	8005550 <TIM_Base_SetConfig+0x40>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a3c      	ldr	r2, [pc, #240]	; (800562c <TIM_Base_SetConfig+0x11c>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d007      	beq.n	8005550 <TIM_Base_SetConfig+0x40>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a3b      	ldr	r2, [pc, #236]	; (8005630 <TIM_Base_SetConfig+0x120>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d003      	beq.n	8005550 <TIM_Base_SetConfig+0x40>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a3a      	ldr	r2, [pc, #232]	; (8005634 <TIM_Base_SetConfig+0x124>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d108      	bne.n	8005562 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005556:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	4313      	orrs	r3, r2
 8005560:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a2f      	ldr	r2, [pc, #188]	; (8005624 <TIM_Base_SetConfig+0x114>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d02b      	beq.n	80055c2 <TIM_Base_SetConfig+0xb2>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005570:	d027      	beq.n	80055c2 <TIM_Base_SetConfig+0xb2>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a2c      	ldr	r2, [pc, #176]	; (8005628 <TIM_Base_SetConfig+0x118>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d023      	beq.n	80055c2 <TIM_Base_SetConfig+0xb2>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a2b      	ldr	r2, [pc, #172]	; (800562c <TIM_Base_SetConfig+0x11c>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d01f      	beq.n	80055c2 <TIM_Base_SetConfig+0xb2>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a2a      	ldr	r2, [pc, #168]	; (8005630 <TIM_Base_SetConfig+0x120>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d01b      	beq.n	80055c2 <TIM_Base_SetConfig+0xb2>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a29      	ldr	r2, [pc, #164]	; (8005634 <TIM_Base_SetConfig+0x124>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d017      	beq.n	80055c2 <TIM_Base_SetConfig+0xb2>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a28      	ldr	r2, [pc, #160]	; (8005638 <TIM_Base_SetConfig+0x128>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d013      	beq.n	80055c2 <TIM_Base_SetConfig+0xb2>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a27      	ldr	r2, [pc, #156]	; (800563c <TIM_Base_SetConfig+0x12c>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d00f      	beq.n	80055c2 <TIM_Base_SetConfig+0xb2>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a26      	ldr	r2, [pc, #152]	; (8005640 <TIM_Base_SetConfig+0x130>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d00b      	beq.n	80055c2 <TIM_Base_SetConfig+0xb2>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a25      	ldr	r2, [pc, #148]	; (8005644 <TIM_Base_SetConfig+0x134>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d007      	beq.n	80055c2 <TIM_Base_SetConfig+0xb2>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a24      	ldr	r2, [pc, #144]	; (8005648 <TIM_Base_SetConfig+0x138>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d003      	beq.n	80055c2 <TIM_Base_SetConfig+0xb2>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a23      	ldr	r2, [pc, #140]	; (800564c <TIM_Base_SetConfig+0x13c>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d108      	bne.n	80055d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	4313      	orrs	r3, r2
 80055e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	689a      	ldr	r2, [r3, #8]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a0a      	ldr	r2, [pc, #40]	; (8005624 <TIM_Base_SetConfig+0x114>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d003      	beq.n	8005608 <TIM_Base_SetConfig+0xf8>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a0c      	ldr	r2, [pc, #48]	; (8005634 <TIM_Base_SetConfig+0x124>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d103      	bne.n	8005610 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	691a      	ldr	r2, [r3, #16]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	615a      	str	r2, [r3, #20]
}
 8005616:	bf00      	nop
 8005618:	3714      	adds	r7, #20
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	40010000 	.word	0x40010000
 8005628:	40000400 	.word	0x40000400
 800562c:	40000800 	.word	0x40000800
 8005630:	40000c00 	.word	0x40000c00
 8005634:	40010400 	.word	0x40010400
 8005638:	40014000 	.word	0x40014000
 800563c:	40014400 	.word	0x40014400
 8005640:	40014800 	.word	0x40014800
 8005644:	40001800 	.word	0x40001800
 8005648:	40001c00 	.word	0x40001c00
 800564c:	40002000 	.word	0x40002000

08005650 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005650:	b480      	push	{r7}
 8005652:	b087      	sub	sp, #28
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	f023 0201 	bic.w	r2, r3, #1
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a1b      	ldr	r3, [r3, #32]
 800566a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	4b2b      	ldr	r3, [pc, #172]	; (8005728 <TIM_OC1_SetConfig+0xd8>)
 800567c:	4013      	ands	r3, r2
 800567e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f023 0303 	bic.w	r3, r3, #3
 8005686:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	4313      	orrs	r3, r2
 8005690:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	f023 0302 	bic.w	r3, r3, #2
 8005698:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a21      	ldr	r2, [pc, #132]	; (800572c <TIM_OC1_SetConfig+0xdc>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d003      	beq.n	80056b4 <TIM_OC1_SetConfig+0x64>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a20      	ldr	r2, [pc, #128]	; (8005730 <TIM_OC1_SetConfig+0xe0>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d10c      	bne.n	80056ce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	f023 0308 	bic.w	r3, r3, #8
 80056ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	697a      	ldr	r2, [r7, #20]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f023 0304 	bic.w	r3, r3, #4
 80056cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a16      	ldr	r2, [pc, #88]	; (800572c <TIM_OC1_SetConfig+0xdc>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d003      	beq.n	80056de <TIM_OC1_SetConfig+0x8e>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a15      	ldr	r2, [pc, #84]	; (8005730 <TIM_OC1_SetConfig+0xe0>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d111      	bne.n	8005702 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	693a      	ldr	r2, [r7, #16]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	4313      	orrs	r3, r2
 8005700:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	697a      	ldr	r2, [r7, #20]
 800571a:	621a      	str	r2, [r3, #32]
}
 800571c:	bf00      	nop
 800571e:	371c      	adds	r7, #28
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr
 8005728:	fffeff8f 	.word	0xfffeff8f
 800572c:	40010000 	.word	0x40010000
 8005730:	40010400 	.word	0x40010400

08005734 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005734:	b480      	push	{r7}
 8005736:	b087      	sub	sp, #28
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	f023 0210 	bic.w	r2, r3, #16
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	4b2e      	ldr	r3, [pc, #184]	; (8005818 <TIM_OC2_SetConfig+0xe4>)
 8005760:	4013      	ands	r3, r2
 8005762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800576a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	021b      	lsls	r3, r3, #8
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	4313      	orrs	r3, r2
 8005776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	f023 0320 	bic.w	r3, r3, #32
 800577e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	011b      	lsls	r3, r3, #4
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	4313      	orrs	r3, r2
 800578a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a23      	ldr	r2, [pc, #140]	; (800581c <TIM_OC2_SetConfig+0xe8>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d003      	beq.n	800579c <TIM_OC2_SetConfig+0x68>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a22      	ldr	r2, [pc, #136]	; (8005820 <TIM_OC2_SetConfig+0xec>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d10d      	bne.n	80057b8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	011b      	lsls	r3, r3, #4
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a18      	ldr	r2, [pc, #96]	; (800581c <TIM_OC2_SetConfig+0xe8>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d003      	beq.n	80057c8 <TIM_OC2_SetConfig+0x94>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a17      	ldr	r2, [pc, #92]	; (8005820 <TIM_OC2_SetConfig+0xec>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d113      	bne.n	80057f0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	695b      	ldr	r3, [r3, #20]
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	693a      	ldr	r2, [r7, #16]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	693a      	ldr	r2, [r7, #16]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	685a      	ldr	r2, [r3, #4]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	621a      	str	r2, [r3, #32]
}
 800580a:	bf00      	nop
 800580c:	371c      	adds	r7, #28
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	feff8fff 	.word	0xfeff8fff
 800581c:	40010000 	.word	0x40010000
 8005820:	40010400 	.word	0x40010400

08005824 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005824:	b480      	push	{r7}
 8005826:	b087      	sub	sp, #28
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	69db      	ldr	r3, [r3, #28]
 800584a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	4b2d      	ldr	r3, [pc, #180]	; (8005904 <TIM_OC3_SetConfig+0xe0>)
 8005850:	4013      	ands	r3, r2
 8005852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f023 0303 	bic.w	r3, r3, #3
 800585a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	4313      	orrs	r3, r2
 8005864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800586c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	021b      	lsls	r3, r3, #8
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	4313      	orrs	r3, r2
 8005878:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a22      	ldr	r2, [pc, #136]	; (8005908 <TIM_OC3_SetConfig+0xe4>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d003      	beq.n	800588a <TIM_OC3_SetConfig+0x66>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a21      	ldr	r2, [pc, #132]	; (800590c <TIM_OC3_SetConfig+0xe8>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d10d      	bne.n	80058a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005890:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	021b      	lsls	r3, r3, #8
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	4313      	orrs	r3, r2
 800589c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a17      	ldr	r2, [pc, #92]	; (8005908 <TIM_OC3_SetConfig+0xe4>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d003      	beq.n	80058b6 <TIM_OC3_SetConfig+0x92>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a16      	ldr	r2, [pc, #88]	; (800590c <TIM_OC3_SetConfig+0xe8>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d113      	bne.n	80058de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	011b      	lsls	r3, r3, #4
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	011b      	lsls	r3, r3, #4
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	4313      	orrs	r3, r2
 80058dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	685a      	ldr	r2, [r3, #4]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	621a      	str	r2, [r3, #32]
}
 80058f8:	bf00      	nop
 80058fa:	371c      	adds	r7, #28
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr
 8005904:	fffeff8f 	.word	0xfffeff8f
 8005908:	40010000 	.word	0x40010000
 800590c:	40010400 	.word	0x40010400

08005910 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005910:	b480      	push	{r7}
 8005912:	b087      	sub	sp, #28
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a1b      	ldr	r3, [r3, #32]
 800592a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	4b1e      	ldr	r3, [pc, #120]	; (80059b4 <TIM_OC4_SetConfig+0xa4>)
 800593c:	4013      	ands	r3, r2
 800593e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005946:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	021b      	lsls	r3, r3, #8
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	4313      	orrs	r3, r2
 8005952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800595a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	031b      	lsls	r3, r3, #12
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	4313      	orrs	r3, r2
 8005966:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a13      	ldr	r2, [pc, #76]	; (80059b8 <TIM_OC4_SetConfig+0xa8>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d003      	beq.n	8005978 <TIM_OC4_SetConfig+0x68>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a12      	ldr	r2, [pc, #72]	; (80059bc <TIM_OC4_SetConfig+0xac>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d109      	bne.n	800598c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800597e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	695b      	ldr	r3, [r3, #20]
 8005984:	019b      	lsls	r3, r3, #6
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	4313      	orrs	r3, r2
 800598a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	685a      	ldr	r2, [r3, #4]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	693a      	ldr	r2, [r7, #16]
 80059a4:	621a      	str	r2, [r3, #32]
}
 80059a6:	bf00      	nop
 80059a8:	371c      	adds	r7, #28
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	feff8fff 	.word	0xfeff8fff
 80059b8:	40010000 	.word	0x40010000
 80059bc:	40010400 	.word	0x40010400

080059c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b087      	sub	sp, #28
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a1b      	ldr	r3, [r3, #32]
 80059ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a1b      	ldr	r3, [r3, #32]
 80059da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	4b1b      	ldr	r3, [pc, #108]	; (8005a58 <TIM_OC5_SetConfig+0x98>)
 80059ec:	4013      	ands	r3, r2
 80059ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005a00:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	041b      	lsls	r3, r3, #16
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a12      	ldr	r2, [pc, #72]	; (8005a5c <TIM_OC5_SetConfig+0x9c>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d003      	beq.n	8005a1e <TIM_OC5_SetConfig+0x5e>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a11      	ldr	r2, [pc, #68]	; (8005a60 <TIM_OC5_SetConfig+0xa0>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d109      	bne.n	8005a32 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a24:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	021b      	lsls	r3, r3, #8
 8005a2c:	697a      	ldr	r2, [r7, #20]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	685a      	ldr	r2, [r3, #4]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	693a      	ldr	r2, [r7, #16]
 8005a4a:	621a      	str	r2, [r3, #32]
}
 8005a4c:	bf00      	nop
 8005a4e:	371c      	adds	r7, #28
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	fffeff8f 	.word	0xfffeff8f
 8005a5c:	40010000 	.word	0x40010000
 8005a60:	40010400 	.word	0x40010400

08005a64 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b087      	sub	sp, #28
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	4b1c      	ldr	r3, [pc, #112]	; (8005b00 <TIM_OC6_SetConfig+0x9c>)
 8005a90:	4013      	ands	r3, r2
 8005a92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	021b      	lsls	r3, r3, #8
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005aa6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	051b      	lsls	r3, r3, #20
 8005aae:	693a      	ldr	r2, [r7, #16]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a13      	ldr	r2, [pc, #76]	; (8005b04 <TIM_OC6_SetConfig+0xa0>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d003      	beq.n	8005ac4 <TIM_OC6_SetConfig+0x60>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a12      	ldr	r2, [pc, #72]	; (8005b08 <TIM_OC6_SetConfig+0xa4>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d109      	bne.n	8005ad8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005aca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	695b      	ldr	r3, [r3, #20]
 8005ad0:	029b      	lsls	r3, r3, #10
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	685a      	ldr	r2, [r3, #4]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	693a      	ldr	r2, [r7, #16]
 8005af0:	621a      	str	r2, [r3, #32]
}
 8005af2:	bf00      	nop
 8005af4:	371c      	adds	r7, #28
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	feff8fff 	.word	0xfeff8fff
 8005b04:	40010000 	.word	0x40010000
 8005b08:	40010400 	.word	0x40010400

08005b0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b087      	sub	sp, #28
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6a1b      	ldr	r3, [r3, #32]
 8005b1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	f023 0201 	bic.w	r2, r3, #1
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	011b      	lsls	r3, r3, #4
 8005b3c:	693a      	ldr	r2, [r7, #16]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f023 030a 	bic.w	r3, r3, #10
 8005b48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b4a:	697a      	ldr	r2, [r7, #20]
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	621a      	str	r2, [r3, #32]
}
 8005b5e:	bf00      	nop
 8005b60:	371c      	adds	r7, #28
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr

08005b6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	b087      	sub	sp, #28
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	60f8      	str	r0, [r7, #12]
 8005b72:	60b9      	str	r1, [r7, #8]
 8005b74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	f023 0210 	bic.w	r2, r3, #16
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6a1b      	ldr	r3, [r3, #32]
 8005b8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	031b      	lsls	r3, r3, #12
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ba6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	011b      	lsls	r3, r3, #4
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	621a      	str	r2, [r3, #32]
}
 8005bbe:	bf00      	nop
 8005bc0:	371c      	adds	r7, #28
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr

08005bca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bca:	b480      	push	{r7}
 8005bcc:	b085      	sub	sp, #20
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
 8005bd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005be2:	683a      	ldr	r2, [r7, #0]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	f043 0307 	orr.w	r3, r3, #7
 8005bec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	609a      	str	r2, [r3, #8]
}
 8005bf4:	bf00      	nop
 8005bf6:	3714      	adds	r7, #20
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b087      	sub	sp, #28
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	607a      	str	r2, [r7, #4]
 8005c0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	021a      	lsls	r2, r3, #8
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	431a      	orrs	r2, r3
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	697a      	ldr	r2, [r7, #20]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	609a      	str	r2, [r3, #8]
}
 8005c34:	bf00      	nop
 8005c36:	371c      	adds	r7, #28
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b087      	sub	sp, #28
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	f003 031f 	and.w	r3, r3, #31
 8005c52:	2201      	movs	r2, #1
 8005c54:	fa02 f303 	lsl.w	r3, r2, r3
 8005c58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6a1a      	ldr	r2, [r3, #32]
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	43db      	mvns	r3, r3
 8005c62:	401a      	ands	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6a1a      	ldr	r2, [r3, #32]
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	f003 031f 	and.w	r3, r3, #31
 8005c72:	6879      	ldr	r1, [r7, #4]
 8005c74:	fa01 f303 	lsl.w	r3, r1, r3
 8005c78:	431a      	orrs	r2, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	621a      	str	r2, [r3, #32]
}
 8005c7e:	bf00      	nop
 8005c80:	371c      	adds	r7, #28
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
	...

08005c8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d101      	bne.n	8005ca4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ca0:	2302      	movs	r3, #2
 8005ca2:	e06d      	b.n	8005d80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2202      	movs	r2, #2
 8005cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a30      	ldr	r2, [pc, #192]	; (8005d8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d004      	beq.n	8005cd8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a2f      	ldr	r2, [pc, #188]	; (8005d90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d108      	bne.n	8005cea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005cde:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cf0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a20      	ldr	r2, [pc, #128]	; (8005d8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d022      	beq.n	8005d54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d16:	d01d      	beq.n	8005d54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a1d      	ldr	r2, [pc, #116]	; (8005d94 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d018      	beq.n	8005d54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a1c      	ldr	r2, [pc, #112]	; (8005d98 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d013      	beq.n	8005d54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a1a      	ldr	r2, [pc, #104]	; (8005d9c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d00e      	beq.n	8005d54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a15      	ldr	r2, [pc, #84]	; (8005d90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d009      	beq.n	8005d54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a16      	ldr	r2, [pc, #88]	; (8005da0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d004      	beq.n	8005d54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a15      	ldr	r2, [pc, #84]	; (8005da4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d10c      	bne.n	8005d6e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68ba      	ldr	r2, [r7, #8]
 8005d6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3714      	adds	r7, #20
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr
 8005d8c:	40010000 	.word	0x40010000
 8005d90:	40010400 	.word	0x40010400
 8005d94:	40000400 	.word	0x40000400
 8005d98:	40000800 	.word	0x40000800
 8005d9c:	40000c00 	.word	0x40000c00
 8005da0:	40014000 	.word	0x40014000
 8005da4:	40001800 	.word	0x40001800

08005da8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d101      	bne.n	8005df6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e040      	b.n	8005e78 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d106      	bne.n	8005e0c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f7fc fb8e 	bl	8002528 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2224      	movs	r2, #36	; 0x24
 8005e10:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f022 0201 	bic.w	r2, r2, #1
 8005e20:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 fbf8 	bl	8006618 <UART_SetConfig>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d101      	bne.n	8005e32 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e022      	b.n	8005e78 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d002      	beq.n	8005e40 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 fe50 	bl	8006ae0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	685a      	ldr	r2, [r3, #4]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	689a      	ldr	r2, [r3, #8]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f042 0201 	orr.w	r2, r2, #1
 8005e6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 fed7 	bl	8006c24 <UART_CheckIdleState>
 8005e76:	4603      	mov	r3, r0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3708      	adds	r7, #8
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b08a      	sub	sp, #40	; 0x28
 8005e84:	af02      	add	r7, sp, #8
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	603b      	str	r3, [r7, #0]
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e94:	2b20      	cmp	r3, #32
 8005e96:	f040 8081 	bne.w	8005f9c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d002      	beq.n	8005ea6 <HAL_UART_Transmit+0x26>
 8005ea0:	88fb      	ldrh	r3, [r7, #6]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d101      	bne.n	8005eaa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e079      	b.n	8005f9e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d101      	bne.n	8005eb8 <HAL_UART_Transmit+0x38>
 8005eb4:	2302      	movs	r3, #2
 8005eb6:	e072      	b.n	8005f9e <HAL_UART_Transmit+0x11e>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2221      	movs	r2, #33	; 0x21
 8005ecc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ece:	f7fc fd23 	bl	8002918 <HAL_GetTick>
 8005ed2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	88fa      	ldrh	r2, [r7, #6]
 8005ed8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	88fa      	ldrh	r2, [r7, #6]
 8005ee0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eec:	d108      	bne.n	8005f00 <HAL_UART_Transmit+0x80>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d104      	bne.n	8005f00 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	61bb      	str	r3, [r7, #24]
 8005efe:	e003      	b.n	8005f08 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f04:	2300      	movs	r3, #0
 8005f06:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005f10:	e02c      	b.n	8005f6c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	2180      	movs	r1, #128	; 0x80
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f000 feb4 	bl	8006c8a <UART_WaitOnFlagUntilTimeout>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d001      	beq.n	8005f2c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	e038      	b.n	8005f9e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d10b      	bne.n	8005f4a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	881b      	ldrh	r3, [r3, #0]
 8005f36:	461a      	mov	r2, r3
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f40:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	3302      	adds	r3, #2
 8005f46:	61bb      	str	r3, [r7, #24]
 8005f48:	e007      	b.n	8005f5a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	781a      	ldrb	r2, [r3, #0]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	3301      	adds	r3, #1
 8005f58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	3b01      	subs	r3, #1
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d1cc      	bne.n	8005f12 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	9300      	str	r3, [sp, #0]
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	2140      	movs	r1, #64	; 0x40
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f000 fe81 	bl	8006c8a <UART_WaitOnFlagUntilTimeout>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d001      	beq.n	8005f92 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005f8e:	2303      	movs	r3, #3
 8005f90:	e005      	b.n	8005f9e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2220      	movs	r2, #32
 8005f96:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	e000      	b.n	8005f9e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005f9c:	2302      	movs	r3, #2
  }
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3720      	adds	r7, #32
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b08a      	sub	sp, #40	; 0x28
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	60f8      	str	r0, [r7, #12]
 8005fae:	60b9      	str	r1, [r7, #8]
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fb8:	2b20      	cmp	r3, #32
 8005fba:	d13d      	bne.n	8006038 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d002      	beq.n	8005fc8 <HAL_UART_Receive_IT+0x22>
 8005fc2:	88fb      	ldrh	r3, [r7, #6]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d101      	bne.n	8005fcc <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e036      	b.n	800603a <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d101      	bne.n	8005fda <HAL_UART_Receive_IT+0x34>
 8005fd6:	2302      	movs	r3, #2
 8005fd8:	e02f      	b.n	800603a <HAL_UART_Receive_IT+0x94>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d018      	beq.n	8006028 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	e853 3f00 	ldrex	r3, [r3]
 8006002:	613b      	str	r3, [r7, #16]
   return(result);
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800600a:	627b      	str	r3, [r7, #36]	; 0x24
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	461a      	mov	r2, r3
 8006012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006014:	623b      	str	r3, [r7, #32]
 8006016:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006018:	69f9      	ldr	r1, [r7, #28]
 800601a:	6a3a      	ldr	r2, [r7, #32]
 800601c:	e841 2300 	strex	r3, r2, [r1]
 8006020:	61bb      	str	r3, [r7, #24]
   return(result);
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1e6      	bne.n	8005ff6 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006028:	88fb      	ldrh	r3, [r7, #6]
 800602a:	461a      	mov	r2, r3
 800602c:	68b9      	ldr	r1, [r7, #8]
 800602e:	68f8      	ldr	r0, [r7, #12]
 8006030:	f000 fef0 	bl	8006e14 <UART_Start_Receive_IT>
 8006034:	4603      	mov	r3, r0
 8006036:	e000      	b.n	800603a <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006038:	2302      	movs	r3, #2
  }
}
 800603a:	4618      	mov	r0, r3
 800603c:	3728      	adds	r7, #40	; 0x28
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
	...

08006044 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b0ba      	sub	sp, #232	; 0xe8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	69db      	ldr	r3, [r3, #28]
 8006052:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800606a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800606e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006072:	4013      	ands	r3, r2
 8006074:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006078:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800607c:	2b00      	cmp	r3, #0
 800607e:	d115      	bne.n	80060ac <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006084:	f003 0320 	and.w	r3, r3, #32
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00f      	beq.n	80060ac <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800608c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006090:	f003 0320 	and.w	r3, r3, #32
 8006094:	2b00      	cmp	r3, #0
 8006096:	d009      	beq.n	80060ac <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800609c:	2b00      	cmp	r3, #0
 800609e:	f000 828f 	beq.w	80065c0 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	4798      	blx	r3
      }
      return;
 80060aa:	e289      	b.n	80065c0 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80060ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f000 8117 	beq.w	80062e4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80060b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d106      	bne.n	80060d0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80060c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80060c6:	4b85      	ldr	r3, [pc, #532]	; (80062dc <HAL_UART_IRQHandler+0x298>)
 80060c8:	4013      	ands	r3, r2
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f000 810a 	beq.w	80062e4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80060d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060d4:	f003 0301 	and.w	r3, r3, #1
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d011      	beq.n	8006100 <HAL_UART_IRQHandler+0xbc>
 80060dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d00b      	beq.n	8006100 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2201      	movs	r2, #1
 80060ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060f6:	f043 0201 	orr.w	r2, r3, #1
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006104:	f003 0302 	and.w	r3, r3, #2
 8006108:	2b00      	cmp	r3, #0
 800610a:	d011      	beq.n	8006130 <HAL_UART_IRQHandler+0xec>
 800610c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006110:	f003 0301 	and.w	r3, r3, #1
 8006114:	2b00      	cmp	r3, #0
 8006116:	d00b      	beq.n	8006130 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2202      	movs	r2, #2
 800611e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006126:	f043 0204 	orr.w	r2, r3, #4
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006134:	f003 0304 	and.w	r3, r3, #4
 8006138:	2b00      	cmp	r3, #0
 800613a:	d011      	beq.n	8006160 <HAL_UART_IRQHandler+0x11c>
 800613c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006140:	f003 0301 	and.w	r3, r3, #1
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00b      	beq.n	8006160 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2204      	movs	r2, #4
 800614e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006156:	f043 0202 	orr.w	r2, r3, #2
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006164:	f003 0308 	and.w	r3, r3, #8
 8006168:	2b00      	cmp	r3, #0
 800616a:	d017      	beq.n	800619c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800616c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006170:	f003 0320 	and.w	r3, r3, #32
 8006174:	2b00      	cmp	r3, #0
 8006176:	d105      	bne.n	8006184 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006178:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800617c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00b      	beq.n	800619c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2208      	movs	r2, #8
 800618a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006192:	f043 0208 	orr.w	r2, r3, #8
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800619c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d012      	beq.n	80061ce <HAL_UART_IRQHandler+0x18a>
 80061a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00c      	beq.n	80061ce <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061c4:	f043 0220 	orr.w	r2, r3, #32
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f000 81f5 	beq.w	80065c4 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80061da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061de:	f003 0320 	and.w	r3, r3, #32
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00d      	beq.n	8006202 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80061e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061ea:	f003 0320 	and.w	r3, r3, #32
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d007      	beq.n	8006202 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d003      	beq.n	8006202 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006208:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006216:	2b40      	cmp	r3, #64	; 0x40
 8006218:	d005      	beq.n	8006226 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800621a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800621e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006222:	2b00      	cmp	r3, #0
 8006224:	d04f      	beq.n	80062c6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 febe 	bl	8006fa8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006236:	2b40      	cmp	r3, #64	; 0x40
 8006238:	d141      	bne.n	80062be <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	3308      	adds	r3, #8
 8006240:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006244:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006248:	e853 3f00 	ldrex	r3, [r3]
 800624c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006250:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006258:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	3308      	adds	r3, #8
 8006262:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006266:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800626a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006272:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006276:	e841 2300 	strex	r3, r2, [r1]
 800627a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800627e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1d9      	bne.n	800623a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800628a:	2b00      	cmp	r3, #0
 800628c:	d013      	beq.n	80062b6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006292:	4a13      	ldr	r2, [pc, #76]	; (80062e0 <HAL_UART_IRQHandler+0x29c>)
 8006294:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800629a:	4618      	mov	r0, r3
 800629c:	f7fc fced 	bl	8002c7a <HAL_DMA_Abort_IT>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d017      	beq.n	80062d6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80062b0:	4610      	mov	r0, r2
 80062b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062b4:	e00f      	b.n	80062d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 f998 	bl	80065ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062bc:	e00b      	b.n	80062d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 f994 	bl	80065ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062c4:	e007      	b.n	80062d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 f990 	bl	80065ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80062d4:	e176      	b.n	80065c4 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062d6:	bf00      	nop
    return;
 80062d8:	e174      	b.n	80065c4 <HAL_UART_IRQHandler+0x580>
 80062da:	bf00      	nop
 80062dc:	04000120 	.word	0x04000120
 80062e0:	0800706f 	.word	0x0800706f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	f040 8144 	bne.w	8006576 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80062ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062f2:	f003 0310 	and.w	r3, r3, #16
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	f000 813d 	beq.w	8006576 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80062fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006300:	f003 0310 	and.w	r3, r3, #16
 8006304:	2b00      	cmp	r3, #0
 8006306:	f000 8136 	beq.w	8006576 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2210      	movs	r2, #16
 8006310:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800631c:	2b40      	cmp	r3, #64	; 0x40
 800631e:	f040 80b2 	bne.w	8006486 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800632e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006332:	2b00      	cmp	r3, #0
 8006334:	f000 8148 	beq.w	80065c8 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800633e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006342:	429a      	cmp	r2, r3
 8006344:	f080 8140 	bcs.w	80065c8 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800634e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006356:	69db      	ldr	r3, [r3, #28]
 8006358:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800635c:	f000 8085 	beq.w	800646a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006368:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800636c:	e853 3f00 	ldrex	r3, [r3]
 8006370:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006374:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006378:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800637c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	461a      	mov	r2, r3
 8006386:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800638a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800638e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006392:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006396:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800639a:	e841 2300 	strex	r3, r2, [r1]
 800639e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80063a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d1da      	bne.n	8006360 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	3308      	adds	r3, #8
 80063b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063b4:	e853 3f00 	ldrex	r3, [r3]
 80063b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80063ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063bc:	f023 0301 	bic.w	r3, r3, #1
 80063c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	3308      	adds	r3, #8
 80063ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80063ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80063d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80063d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80063da:	e841 2300 	strex	r3, r2, [r1]
 80063de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80063e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d1e1      	bne.n	80063aa <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	3308      	adds	r3, #8
 80063ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063f0:	e853 3f00 	ldrex	r3, [r3]
 80063f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80063f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	3308      	adds	r3, #8
 8006406:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800640a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800640c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006410:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006412:	e841 2300 	strex	r3, r2, [r1]
 8006416:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006418:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800641a:	2b00      	cmp	r3, #0
 800641c:	d1e3      	bne.n	80063e6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2220      	movs	r2, #32
 8006422:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006432:	e853 3f00 	ldrex	r3, [r3]
 8006436:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800643a:	f023 0310 	bic.w	r3, r3, #16
 800643e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	461a      	mov	r2, r3
 8006448:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800644c:	65bb      	str	r3, [r7, #88]	; 0x58
 800644e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006450:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006452:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006454:	e841 2300 	strex	r3, r2, [r1]
 8006458:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800645a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1e4      	bne.n	800642a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006464:	4618      	mov	r0, r3
 8006466:	f7fc fb98 	bl	8002b9a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006476:	b29b      	uxth	r3, r3
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	b29b      	uxth	r3, r3
 800647c:	4619      	mov	r1, r3
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 f8be 	bl	8006600 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006484:	e0a0      	b.n	80065c8 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006492:	b29b      	uxth	r3, r3
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f000 8092 	beq.w	80065cc <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 80064a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f000 808d 	beq.w	80065cc <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ba:	e853 3f00 	ldrex	r3, [r3]
 80064be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80064c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	461a      	mov	r2, r3
 80064d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80064d4:	647b      	str	r3, [r7, #68]	; 0x44
 80064d6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80064da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064dc:	e841 2300 	strex	r3, r2, [r1]
 80064e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80064e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1e4      	bne.n	80064b2 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	3308      	adds	r3, #8
 80064ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	e853 3f00 	ldrex	r3, [r3]
 80064f6:	623b      	str	r3, [r7, #32]
   return(result);
 80064f8:	6a3b      	ldr	r3, [r7, #32]
 80064fa:	f023 0301 	bic.w	r3, r3, #1
 80064fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	3308      	adds	r3, #8
 8006508:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800650c:	633a      	str	r2, [r7, #48]	; 0x30
 800650e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006510:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006512:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006514:	e841 2300 	strex	r3, r2, [r1]
 8006518:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800651a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651c:	2b00      	cmp	r3, #0
 800651e:	d1e3      	bne.n	80064e8 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2220      	movs	r2, #32
 8006524:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	e853 3f00 	ldrex	r3, [r3]
 800653e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f023 0310 	bic.w	r3, r3, #16
 8006546:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	461a      	mov	r2, r3
 8006550:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006554:	61fb      	str	r3, [r7, #28]
 8006556:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006558:	69b9      	ldr	r1, [r7, #24]
 800655a:	69fa      	ldr	r2, [r7, #28]
 800655c:	e841 2300 	strex	r3, r2, [r1]
 8006560:	617b      	str	r3, [r7, #20]
   return(result);
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1e4      	bne.n	8006532 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006568:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800656c:	4619      	mov	r1, r3
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 f846 	bl	8006600 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006574:	e02a      	b.n	80065cc <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800657a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00e      	beq.n	80065a0 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800658a:	2b00      	cmp	r3, #0
 800658c:	d008      	beq.n	80065a0 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006592:	2b00      	cmp	r3, #0
 8006594:	d01c      	beq.n	80065d0 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	4798      	blx	r3
    }
    return;
 800659e:	e017      	b.n	80065d0 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80065a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d012      	beq.n	80065d2 <HAL_UART_IRQHandler+0x58e>
 80065ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d00c      	beq.n	80065d2 <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 fd6e 	bl	800709a <UART_EndTransmit_IT>
    return;
 80065be:	e008      	b.n	80065d2 <HAL_UART_IRQHandler+0x58e>
      return;
 80065c0:	bf00      	nop
 80065c2:	e006      	b.n	80065d2 <HAL_UART_IRQHandler+0x58e>
    return;
 80065c4:	bf00      	nop
 80065c6:	e004      	b.n	80065d2 <HAL_UART_IRQHandler+0x58e>
      return;
 80065c8:	bf00      	nop
 80065ca:	e002      	b.n	80065d2 <HAL_UART_IRQHandler+0x58e>
      return;
 80065cc:	bf00      	nop
 80065ce:	e000      	b.n	80065d2 <HAL_UART_IRQHandler+0x58e>
    return;
 80065d0:	bf00      	nop
  }

}
 80065d2:	37e8      	adds	r7, #232	; 0xe8
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80065e0:	bf00      	nop
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80065f4:	bf00      	nop
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	460b      	mov	r3, r1
 800660a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800660c:	bf00      	nop
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b088      	sub	sp, #32
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006620:	2300      	movs	r3, #0
 8006622:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	689a      	ldr	r2, [r3, #8]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	431a      	orrs	r2, r3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	431a      	orrs	r2, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	69db      	ldr	r3, [r3, #28]
 8006638:	4313      	orrs	r3, r2
 800663a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	4ba6      	ldr	r3, [pc, #664]	; (80068dc <UART_SetConfig+0x2c4>)
 8006644:	4013      	ands	r3, r2
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	6812      	ldr	r2, [r2, #0]
 800664a:	6979      	ldr	r1, [r7, #20]
 800664c:	430b      	orrs	r3, r1
 800664e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	68da      	ldr	r2, [r3, #12]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	430a      	orrs	r2, r1
 8006664:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	699b      	ldr	r3, [r3, #24]
 800666a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a1b      	ldr	r3, [r3, #32]
 8006670:	697a      	ldr	r2, [r7, #20]
 8006672:	4313      	orrs	r3, r2
 8006674:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	697a      	ldr	r2, [r7, #20]
 8006686:	430a      	orrs	r2, r1
 8006688:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a94      	ldr	r2, [pc, #592]	; (80068e0 <UART_SetConfig+0x2c8>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d120      	bne.n	80066d6 <UART_SetConfig+0xbe>
 8006694:	4b93      	ldr	r3, [pc, #588]	; (80068e4 <UART_SetConfig+0x2cc>)
 8006696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800669a:	f003 0303 	and.w	r3, r3, #3
 800669e:	2b03      	cmp	r3, #3
 80066a0:	d816      	bhi.n	80066d0 <UART_SetConfig+0xb8>
 80066a2:	a201      	add	r2, pc, #4	; (adr r2, 80066a8 <UART_SetConfig+0x90>)
 80066a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a8:	080066b9 	.word	0x080066b9
 80066ac:	080066c5 	.word	0x080066c5
 80066b0:	080066bf 	.word	0x080066bf
 80066b4:	080066cb 	.word	0x080066cb
 80066b8:	2301      	movs	r3, #1
 80066ba:	77fb      	strb	r3, [r7, #31]
 80066bc:	e150      	b.n	8006960 <UART_SetConfig+0x348>
 80066be:	2302      	movs	r3, #2
 80066c0:	77fb      	strb	r3, [r7, #31]
 80066c2:	e14d      	b.n	8006960 <UART_SetConfig+0x348>
 80066c4:	2304      	movs	r3, #4
 80066c6:	77fb      	strb	r3, [r7, #31]
 80066c8:	e14a      	b.n	8006960 <UART_SetConfig+0x348>
 80066ca:	2308      	movs	r3, #8
 80066cc:	77fb      	strb	r3, [r7, #31]
 80066ce:	e147      	b.n	8006960 <UART_SetConfig+0x348>
 80066d0:	2310      	movs	r3, #16
 80066d2:	77fb      	strb	r3, [r7, #31]
 80066d4:	e144      	b.n	8006960 <UART_SetConfig+0x348>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a83      	ldr	r2, [pc, #524]	; (80068e8 <UART_SetConfig+0x2d0>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d132      	bne.n	8006746 <UART_SetConfig+0x12e>
 80066e0:	4b80      	ldr	r3, [pc, #512]	; (80068e4 <UART_SetConfig+0x2cc>)
 80066e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066e6:	f003 030c 	and.w	r3, r3, #12
 80066ea:	2b0c      	cmp	r3, #12
 80066ec:	d828      	bhi.n	8006740 <UART_SetConfig+0x128>
 80066ee:	a201      	add	r2, pc, #4	; (adr r2, 80066f4 <UART_SetConfig+0xdc>)
 80066f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f4:	08006729 	.word	0x08006729
 80066f8:	08006741 	.word	0x08006741
 80066fc:	08006741 	.word	0x08006741
 8006700:	08006741 	.word	0x08006741
 8006704:	08006735 	.word	0x08006735
 8006708:	08006741 	.word	0x08006741
 800670c:	08006741 	.word	0x08006741
 8006710:	08006741 	.word	0x08006741
 8006714:	0800672f 	.word	0x0800672f
 8006718:	08006741 	.word	0x08006741
 800671c:	08006741 	.word	0x08006741
 8006720:	08006741 	.word	0x08006741
 8006724:	0800673b 	.word	0x0800673b
 8006728:	2300      	movs	r3, #0
 800672a:	77fb      	strb	r3, [r7, #31]
 800672c:	e118      	b.n	8006960 <UART_SetConfig+0x348>
 800672e:	2302      	movs	r3, #2
 8006730:	77fb      	strb	r3, [r7, #31]
 8006732:	e115      	b.n	8006960 <UART_SetConfig+0x348>
 8006734:	2304      	movs	r3, #4
 8006736:	77fb      	strb	r3, [r7, #31]
 8006738:	e112      	b.n	8006960 <UART_SetConfig+0x348>
 800673a:	2308      	movs	r3, #8
 800673c:	77fb      	strb	r3, [r7, #31]
 800673e:	e10f      	b.n	8006960 <UART_SetConfig+0x348>
 8006740:	2310      	movs	r3, #16
 8006742:	77fb      	strb	r3, [r7, #31]
 8006744:	e10c      	b.n	8006960 <UART_SetConfig+0x348>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a68      	ldr	r2, [pc, #416]	; (80068ec <UART_SetConfig+0x2d4>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d120      	bne.n	8006792 <UART_SetConfig+0x17a>
 8006750:	4b64      	ldr	r3, [pc, #400]	; (80068e4 <UART_SetConfig+0x2cc>)
 8006752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006756:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800675a:	2b30      	cmp	r3, #48	; 0x30
 800675c:	d013      	beq.n	8006786 <UART_SetConfig+0x16e>
 800675e:	2b30      	cmp	r3, #48	; 0x30
 8006760:	d814      	bhi.n	800678c <UART_SetConfig+0x174>
 8006762:	2b20      	cmp	r3, #32
 8006764:	d009      	beq.n	800677a <UART_SetConfig+0x162>
 8006766:	2b20      	cmp	r3, #32
 8006768:	d810      	bhi.n	800678c <UART_SetConfig+0x174>
 800676a:	2b00      	cmp	r3, #0
 800676c:	d002      	beq.n	8006774 <UART_SetConfig+0x15c>
 800676e:	2b10      	cmp	r3, #16
 8006770:	d006      	beq.n	8006780 <UART_SetConfig+0x168>
 8006772:	e00b      	b.n	800678c <UART_SetConfig+0x174>
 8006774:	2300      	movs	r3, #0
 8006776:	77fb      	strb	r3, [r7, #31]
 8006778:	e0f2      	b.n	8006960 <UART_SetConfig+0x348>
 800677a:	2302      	movs	r3, #2
 800677c:	77fb      	strb	r3, [r7, #31]
 800677e:	e0ef      	b.n	8006960 <UART_SetConfig+0x348>
 8006780:	2304      	movs	r3, #4
 8006782:	77fb      	strb	r3, [r7, #31]
 8006784:	e0ec      	b.n	8006960 <UART_SetConfig+0x348>
 8006786:	2308      	movs	r3, #8
 8006788:	77fb      	strb	r3, [r7, #31]
 800678a:	e0e9      	b.n	8006960 <UART_SetConfig+0x348>
 800678c:	2310      	movs	r3, #16
 800678e:	77fb      	strb	r3, [r7, #31]
 8006790:	e0e6      	b.n	8006960 <UART_SetConfig+0x348>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a56      	ldr	r2, [pc, #344]	; (80068f0 <UART_SetConfig+0x2d8>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d120      	bne.n	80067de <UART_SetConfig+0x1c6>
 800679c:	4b51      	ldr	r3, [pc, #324]	; (80068e4 <UART_SetConfig+0x2cc>)
 800679e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80067a6:	2bc0      	cmp	r3, #192	; 0xc0
 80067a8:	d013      	beq.n	80067d2 <UART_SetConfig+0x1ba>
 80067aa:	2bc0      	cmp	r3, #192	; 0xc0
 80067ac:	d814      	bhi.n	80067d8 <UART_SetConfig+0x1c0>
 80067ae:	2b80      	cmp	r3, #128	; 0x80
 80067b0:	d009      	beq.n	80067c6 <UART_SetConfig+0x1ae>
 80067b2:	2b80      	cmp	r3, #128	; 0x80
 80067b4:	d810      	bhi.n	80067d8 <UART_SetConfig+0x1c0>
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d002      	beq.n	80067c0 <UART_SetConfig+0x1a8>
 80067ba:	2b40      	cmp	r3, #64	; 0x40
 80067bc:	d006      	beq.n	80067cc <UART_SetConfig+0x1b4>
 80067be:	e00b      	b.n	80067d8 <UART_SetConfig+0x1c0>
 80067c0:	2300      	movs	r3, #0
 80067c2:	77fb      	strb	r3, [r7, #31]
 80067c4:	e0cc      	b.n	8006960 <UART_SetConfig+0x348>
 80067c6:	2302      	movs	r3, #2
 80067c8:	77fb      	strb	r3, [r7, #31]
 80067ca:	e0c9      	b.n	8006960 <UART_SetConfig+0x348>
 80067cc:	2304      	movs	r3, #4
 80067ce:	77fb      	strb	r3, [r7, #31]
 80067d0:	e0c6      	b.n	8006960 <UART_SetConfig+0x348>
 80067d2:	2308      	movs	r3, #8
 80067d4:	77fb      	strb	r3, [r7, #31]
 80067d6:	e0c3      	b.n	8006960 <UART_SetConfig+0x348>
 80067d8:	2310      	movs	r3, #16
 80067da:	77fb      	strb	r3, [r7, #31]
 80067dc:	e0c0      	b.n	8006960 <UART_SetConfig+0x348>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a44      	ldr	r2, [pc, #272]	; (80068f4 <UART_SetConfig+0x2dc>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d125      	bne.n	8006834 <UART_SetConfig+0x21c>
 80067e8:	4b3e      	ldr	r3, [pc, #248]	; (80068e4 <UART_SetConfig+0x2cc>)
 80067ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067f6:	d017      	beq.n	8006828 <UART_SetConfig+0x210>
 80067f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067fc:	d817      	bhi.n	800682e <UART_SetConfig+0x216>
 80067fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006802:	d00b      	beq.n	800681c <UART_SetConfig+0x204>
 8006804:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006808:	d811      	bhi.n	800682e <UART_SetConfig+0x216>
 800680a:	2b00      	cmp	r3, #0
 800680c:	d003      	beq.n	8006816 <UART_SetConfig+0x1fe>
 800680e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006812:	d006      	beq.n	8006822 <UART_SetConfig+0x20a>
 8006814:	e00b      	b.n	800682e <UART_SetConfig+0x216>
 8006816:	2300      	movs	r3, #0
 8006818:	77fb      	strb	r3, [r7, #31]
 800681a:	e0a1      	b.n	8006960 <UART_SetConfig+0x348>
 800681c:	2302      	movs	r3, #2
 800681e:	77fb      	strb	r3, [r7, #31]
 8006820:	e09e      	b.n	8006960 <UART_SetConfig+0x348>
 8006822:	2304      	movs	r3, #4
 8006824:	77fb      	strb	r3, [r7, #31]
 8006826:	e09b      	b.n	8006960 <UART_SetConfig+0x348>
 8006828:	2308      	movs	r3, #8
 800682a:	77fb      	strb	r3, [r7, #31]
 800682c:	e098      	b.n	8006960 <UART_SetConfig+0x348>
 800682e:	2310      	movs	r3, #16
 8006830:	77fb      	strb	r3, [r7, #31]
 8006832:	e095      	b.n	8006960 <UART_SetConfig+0x348>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a2f      	ldr	r2, [pc, #188]	; (80068f8 <UART_SetConfig+0x2e0>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d125      	bne.n	800688a <UART_SetConfig+0x272>
 800683e:	4b29      	ldr	r3, [pc, #164]	; (80068e4 <UART_SetConfig+0x2cc>)
 8006840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006844:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006848:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800684c:	d017      	beq.n	800687e <UART_SetConfig+0x266>
 800684e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006852:	d817      	bhi.n	8006884 <UART_SetConfig+0x26c>
 8006854:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006858:	d00b      	beq.n	8006872 <UART_SetConfig+0x25a>
 800685a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800685e:	d811      	bhi.n	8006884 <UART_SetConfig+0x26c>
 8006860:	2b00      	cmp	r3, #0
 8006862:	d003      	beq.n	800686c <UART_SetConfig+0x254>
 8006864:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006868:	d006      	beq.n	8006878 <UART_SetConfig+0x260>
 800686a:	e00b      	b.n	8006884 <UART_SetConfig+0x26c>
 800686c:	2301      	movs	r3, #1
 800686e:	77fb      	strb	r3, [r7, #31]
 8006870:	e076      	b.n	8006960 <UART_SetConfig+0x348>
 8006872:	2302      	movs	r3, #2
 8006874:	77fb      	strb	r3, [r7, #31]
 8006876:	e073      	b.n	8006960 <UART_SetConfig+0x348>
 8006878:	2304      	movs	r3, #4
 800687a:	77fb      	strb	r3, [r7, #31]
 800687c:	e070      	b.n	8006960 <UART_SetConfig+0x348>
 800687e:	2308      	movs	r3, #8
 8006880:	77fb      	strb	r3, [r7, #31]
 8006882:	e06d      	b.n	8006960 <UART_SetConfig+0x348>
 8006884:	2310      	movs	r3, #16
 8006886:	77fb      	strb	r3, [r7, #31]
 8006888:	e06a      	b.n	8006960 <UART_SetConfig+0x348>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a1b      	ldr	r2, [pc, #108]	; (80068fc <UART_SetConfig+0x2e4>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d138      	bne.n	8006906 <UART_SetConfig+0x2ee>
 8006894:	4b13      	ldr	r3, [pc, #76]	; (80068e4 <UART_SetConfig+0x2cc>)
 8006896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800689a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800689e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80068a2:	d017      	beq.n	80068d4 <UART_SetConfig+0x2bc>
 80068a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80068a8:	d82a      	bhi.n	8006900 <UART_SetConfig+0x2e8>
 80068aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068ae:	d00b      	beq.n	80068c8 <UART_SetConfig+0x2b0>
 80068b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068b4:	d824      	bhi.n	8006900 <UART_SetConfig+0x2e8>
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d003      	beq.n	80068c2 <UART_SetConfig+0x2aa>
 80068ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068be:	d006      	beq.n	80068ce <UART_SetConfig+0x2b6>
 80068c0:	e01e      	b.n	8006900 <UART_SetConfig+0x2e8>
 80068c2:	2300      	movs	r3, #0
 80068c4:	77fb      	strb	r3, [r7, #31]
 80068c6:	e04b      	b.n	8006960 <UART_SetConfig+0x348>
 80068c8:	2302      	movs	r3, #2
 80068ca:	77fb      	strb	r3, [r7, #31]
 80068cc:	e048      	b.n	8006960 <UART_SetConfig+0x348>
 80068ce:	2304      	movs	r3, #4
 80068d0:	77fb      	strb	r3, [r7, #31]
 80068d2:	e045      	b.n	8006960 <UART_SetConfig+0x348>
 80068d4:	2308      	movs	r3, #8
 80068d6:	77fb      	strb	r3, [r7, #31]
 80068d8:	e042      	b.n	8006960 <UART_SetConfig+0x348>
 80068da:	bf00      	nop
 80068dc:	efff69f3 	.word	0xefff69f3
 80068e0:	40011000 	.word	0x40011000
 80068e4:	40023800 	.word	0x40023800
 80068e8:	40004400 	.word	0x40004400
 80068ec:	40004800 	.word	0x40004800
 80068f0:	40004c00 	.word	0x40004c00
 80068f4:	40005000 	.word	0x40005000
 80068f8:	40011400 	.word	0x40011400
 80068fc:	40007800 	.word	0x40007800
 8006900:	2310      	movs	r3, #16
 8006902:	77fb      	strb	r3, [r7, #31]
 8006904:	e02c      	b.n	8006960 <UART_SetConfig+0x348>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a72      	ldr	r2, [pc, #456]	; (8006ad4 <UART_SetConfig+0x4bc>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d125      	bne.n	800695c <UART_SetConfig+0x344>
 8006910:	4b71      	ldr	r3, [pc, #452]	; (8006ad8 <UART_SetConfig+0x4c0>)
 8006912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006916:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800691a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800691e:	d017      	beq.n	8006950 <UART_SetConfig+0x338>
 8006920:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006924:	d817      	bhi.n	8006956 <UART_SetConfig+0x33e>
 8006926:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800692a:	d00b      	beq.n	8006944 <UART_SetConfig+0x32c>
 800692c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006930:	d811      	bhi.n	8006956 <UART_SetConfig+0x33e>
 8006932:	2b00      	cmp	r3, #0
 8006934:	d003      	beq.n	800693e <UART_SetConfig+0x326>
 8006936:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800693a:	d006      	beq.n	800694a <UART_SetConfig+0x332>
 800693c:	e00b      	b.n	8006956 <UART_SetConfig+0x33e>
 800693e:	2300      	movs	r3, #0
 8006940:	77fb      	strb	r3, [r7, #31]
 8006942:	e00d      	b.n	8006960 <UART_SetConfig+0x348>
 8006944:	2302      	movs	r3, #2
 8006946:	77fb      	strb	r3, [r7, #31]
 8006948:	e00a      	b.n	8006960 <UART_SetConfig+0x348>
 800694a:	2304      	movs	r3, #4
 800694c:	77fb      	strb	r3, [r7, #31]
 800694e:	e007      	b.n	8006960 <UART_SetConfig+0x348>
 8006950:	2308      	movs	r3, #8
 8006952:	77fb      	strb	r3, [r7, #31]
 8006954:	e004      	b.n	8006960 <UART_SetConfig+0x348>
 8006956:	2310      	movs	r3, #16
 8006958:	77fb      	strb	r3, [r7, #31]
 800695a:	e001      	b.n	8006960 <UART_SetConfig+0x348>
 800695c:	2310      	movs	r3, #16
 800695e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	69db      	ldr	r3, [r3, #28]
 8006964:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006968:	d15b      	bne.n	8006a22 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800696a:	7ffb      	ldrb	r3, [r7, #31]
 800696c:	2b08      	cmp	r3, #8
 800696e:	d828      	bhi.n	80069c2 <UART_SetConfig+0x3aa>
 8006970:	a201      	add	r2, pc, #4	; (adr r2, 8006978 <UART_SetConfig+0x360>)
 8006972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006976:	bf00      	nop
 8006978:	0800699d 	.word	0x0800699d
 800697c:	080069a5 	.word	0x080069a5
 8006980:	080069ad 	.word	0x080069ad
 8006984:	080069c3 	.word	0x080069c3
 8006988:	080069b3 	.word	0x080069b3
 800698c:	080069c3 	.word	0x080069c3
 8006990:	080069c3 	.word	0x080069c3
 8006994:	080069c3 	.word	0x080069c3
 8006998:	080069bb 	.word	0x080069bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800699c:	f7fd f808 	bl	80039b0 <HAL_RCC_GetPCLK1Freq>
 80069a0:	61b8      	str	r0, [r7, #24]
        break;
 80069a2:	e013      	b.n	80069cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069a4:	f7fd f818 	bl	80039d8 <HAL_RCC_GetPCLK2Freq>
 80069a8:	61b8      	str	r0, [r7, #24]
        break;
 80069aa:	e00f      	b.n	80069cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069ac:	4b4b      	ldr	r3, [pc, #300]	; (8006adc <UART_SetConfig+0x4c4>)
 80069ae:	61bb      	str	r3, [r7, #24]
        break;
 80069b0:	e00c      	b.n	80069cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069b2:	f7fc feeb 	bl	800378c <HAL_RCC_GetSysClockFreq>
 80069b6:	61b8      	str	r0, [r7, #24]
        break;
 80069b8:	e008      	b.n	80069cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069be:	61bb      	str	r3, [r7, #24]
        break;
 80069c0:	e004      	b.n	80069cc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80069c2:	2300      	movs	r3, #0
 80069c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	77bb      	strb	r3, [r7, #30]
        break;
 80069ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d074      	beq.n	8006abc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	005a      	lsls	r2, r3, #1
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	085b      	lsrs	r3, r3, #1
 80069dc:	441a      	add	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80069e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	2b0f      	cmp	r3, #15
 80069ec:	d916      	bls.n	8006a1c <UART_SetConfig+0x404>
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069f4:	d212      	bcs.n	8006a1c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	f023 030f 	bic.w	r3, r3, #15
 80069fe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	085b      	lsrs	r3, r3, #1
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	f003 0307 	and.w	r3, r3, #7
 8006a0a:	b29a      	uxth	r2, r3
 8006a0c:	89fb      	ldrh	r3, [r7, #14]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	89fa      	ldrh	r2, [r7, #14]
 8006a18:	60da      	str	r2, [r3, #12]
 8006a1a:	e04f      	b.n	8006abc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	77bb      	strb	r3, [r7, #30]
 8006a20:	e04c      	b.n	8006abc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a22:	7ffb      	ldrb	r3, [r7, #31]
 8006a24:	2b08      	cmp	r3, #8
 8006a26:	d828      	bhi.n	8006a7a <UART_SetConfig+0x462>
 8006a28:	a201      	add	r2, pc, #4	; (adr r2, 8006a30 <UART_SetConfig+0x418>)
 8006a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a2e:	bf00      	nop
 8006a30:	08006a55 	.word	0x08006a55
 8006a34:	08006a5d 	.word	0x08006a5d
 8006a38:	08006a65 	.word	0x08006a65
 8006a3c:	08006a7b 	.word	0x08006a7b
 8006a40:	08006a6b 	.word	0x08006a6b
 8006a44:	08006a7b 	.word	0x08006a7b
 8006a48:	08006a7b 	.word	0x08006a7b
 8006a4c:	08006a7b 	.word	0x08006a7b
 8006a50:	08006a73 	.word	0x08006a73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a54:	f7fc ffac 	bl	80039b0 <HAL_RCC_GetPCLK1Freq>
 8006a58:	61b8      	str	r0, [r7, #24]
        break;
 8006a5a:	e013      	b.n	8006a84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a5c:	f7fc ffbc 	bl	80039d8 <HAL_RCC_GetPCLK2Freq>
 8006a60:	61b8      	str	r0, [r7, #24]
        break;
 8006a62:	e00f      	b.n	8006a84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a64:	4b1d      	ldr	r3, [pc, #116]	; (8006adc <UART_SetConfig+0x4c4>)
 8006a66:	61bb      	str	r3, [r7, #24]
        break;
 8006a68:	e00c      	b.n	8006a84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a6a:	f7fc fe8f 	bl	800378c <HAL_RCC_GetSysClockFreq>
 8006a6e:	61b8      	str	r0, [r7, #24]
        break;
 8006a70:	e008      	b.n	8006a84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a76:	61bb      	str	r3, [r7, #24]
        break;
 8006a78:	e004      	b.n	8006a84 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	77bb      	strb	r3, [r7, #30]
        break;
 8006a82:	bf00      	nop
    }

    if (pclk != 0U)
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d018      	beq.n	8006abc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	085a      	lsrs	r2, r3, #1
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	441a      	add	r2, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a9c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	2b0f      	cmp	r3, #15
 8006aa2:	d909      	bls.n	8006ab8 <UART_SetConfig+0x4a0>
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aaa:	d205      	bcs.n	8006ab8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	b29a      	uxth	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	60da      	str	r2, [r3, #12]
 8006ab6:	e001      	b.n	8006abc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006ac8:	7fbb      	ldrb	r3, [r7, #30]
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3720      	adds	r7, #32
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	40007c00 	.word	0x40007c00
 8006ad8:	40023800 	.word	0x40023800
 8006adc:	00f42400 	.word	0x00f42400

08006ae0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aec:	f003 0301 	and.w	r3, r3, #1
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d00a      	beq.n	8006b0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	430a      	orrs	r2, r1
 8006b08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0e:	f003 0302 	and.w	r3, r3, #2
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00a      	beq.n	8006b2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	430a      	orrs	r2, r1
 8006b2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b30:	f003 0304 	and.w	r3, r3, #4
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d00a      	beq.n	8006b4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	430a      	orrs	r2, r1
 8006b4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b52:	f003 0308 	and.w	r3, r3, #8
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d00a      	beq.n	8006b70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	430a      	orrs	r2, r1
 8006b6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b74:	f003 0310 	and.w	r3, r3, #16
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00a      	beq.n	8006b92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	430a      	orrs	r2, r1
 8006b90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b96:	f003 0320 	and.w	r3, r3, #32
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00a      	beq.n	8006bb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	430a      	orrs	r2, r1
 8006bb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d01a      	beq.n	8006bf6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	430a      	orrs	r2, r1
 8006bd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bde:	d10a      	bne.n	8006bf6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	430a      	orrs	r2, r1
 8006bf4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00a      	beq.n	8006c18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	430a      	orrs	r2, r1
 8006c16:	605a      	str	r2, [r3, #4]
  }
}
 8006c18:	bf00      	nop
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b086      	sub	sp, #24
 8006c28:	af02      	add	r7, sp, #8
 8006c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c34:	f7fb fe70 	bl	8002918 <HAL_GetTick>
 8006c38:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 0308 	and.w	r3, r3, #8
 8006c44:	2b08      	cmp	r3, #8
 8006c46:	d10e      	bne.n	8006c66 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c4c:	9300      	str	r3, [sp, #0]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f817 	bl	8006c8a <UART_WaitOnFlagUntilTimeout>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d001      	beq.n	8006c66 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c62:	2303      	movs	r3, #3
 8006c64:	e00d      	b.n	8006c82 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2220      	movs	r2, #32
 8006c6a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2220      	movs	r2, #32
 8006c70:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3710      	adds	r7, #16
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b09c      	sub	sp, #112	; 0x70
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	60f8      	str	r0, [r7, #12]
 8006c92:	60b9      	str	r1, [r7, #8]
 8006c94:	603b      	str	r3, [r7, #0]
 8006c96:	4613      	mov	r3, r2
 8006c98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c9a:	e0a5      	b.n	8006de8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca2:	f000 80a1 	beq.w	8006de8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ca6:	f7fb fe37 	bl	8002918 <HAL_GetTick>
 8006caa:	4602      	mov	r2, r0
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d302      	bcc.n	8006cbc <UART_WaitOnFlagUntilTimeout+0x32>
 8006cb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d13e      	bne.n	8006d3a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cc4:	e853 3f00 	ldrex	r3, [r3]
 8006cc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ccc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006cd0:	667b      	str	r3, [r7, #100]	; 0x64
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cdc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cde:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006ce0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006ce2:	e841 2300 	strex	r3, r2, [r1]
 8006ce6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006ce8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d1e6      	bne.n	8006cbc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	3308      	adds	r3, #8
 8006cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cf8:	e853 3f00 	ldrex	r3, [r3]
 8006cfc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d00:	f023 0301 	bic.w	r3, r3, #1
 8006d04:	663b      	str	r3, [r7, #96]	; 0x60
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	3308      	adds	r3, #8
 8006d0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006d0e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006d10:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d16:	e841 2300 	strex	r3, r2, [r1]
 8006d1a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1e5      	bne.n	8006cee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2220      	movs	r2, #32
 8006d26:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2220      	movs	r2, #32
 8006d2c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006d36:	2303      	movs	r3, #3
 8006d38:	e067      	b.n	8006e0a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 0304 	and.w	r3, r3, #4
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d04f      	beq.n	8006de8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	69db      	ldr	r3, [r3, #28]
 8006d4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d56:	d147      	bne.n	8006de8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d60:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d6a:	e853 3f00 	ldrex	r3, [r3]
 8006d6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d72:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d80:	637b      	str	r3, [r7, #52]	; 0x34
 8006d82:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d88:	e841 2300 	strex	r3, r2, [r1]
 8006d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d1e6      	bne.n	8006d62 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	3308      	adds	r3, #8
 8006d9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	e853 3f00 	ldrex	r3, [r3]
 8006da2:	613b      	str	r3, [r7, #16]
   return(result);
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	f023 0301 	bic.w	r3, r3, #1
 8006daa:	66bb      	str	r3, [r7, #104]	; 0x68
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	3308      	adds	r3, #8
 8006db2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006db4:	623a      	str	r2, [r7, #32]
 8006db6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db8:	69f9      	ldr	r1, [r7, #28]
 8006dba:	6a3a      	ldr	r2, [r7, #32]
 8006dbc:	e841 2300 	strex	r3, r2, [r1]
 8006dc0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1e5      	bne.n	8006d94 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2220      	movs	r2, #32
 8006dcc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2220      	movs	r2, #32
 8006dd2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2220      	movs	r2, #32
 8006dd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006de4:	2303      	movs	r3, #3
 8006de6:	e010      	b.n	8006e0a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	69da      	ldr	r2, [r3, #28]
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	4013      	ands	r3, r2
 8006df2:	68ba      	ldr	r2, [r7, #8]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	bf0c      	ite	eq
 8006df8:	2301      	moveq	r3, #1
 8006dfa:	2300      	movne	r3, #0
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	461a      	mov	r2, r3
 8006e00:	79fb      	ldrb	r3, [r7, #7]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	f43f af4a 	beq.w	8006c9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3770      	adds	r7, #112	; 0x70
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
	...

08006e14 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b097      	sub	sp, #92	; 0x5c
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	4613      	mov	r3, r2
 8006e20:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	68ba      	ldr	r2, [r7, #8]
 8006e26:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	88fa      	ldrh	r2, [r7, #6]
 8006e2c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	88fa      	ldrh	r2, [r7, #6]
 8006e34:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e46:	d10e      	bne.n	8006e66 <UART_Start_Receive_IT+0x52>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d105      	bne.n	8006e5c <UART_Start_Receive_IT+0x48>
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006e56:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006e5a:	e02d      	b.n	8006eb8 <UART_Start_Receive_IT+0xa4>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	22ff      	movs	r2, #255	; 0xff
 8006e60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006e64:	e028      	b.n	8006eb8 <UART_Start_Receive_IT+0xa4>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d10d      	bne.n	8006e8a <UART_Start_Receive_IT+0x76>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d104      	bne.n	8006e80 <UART_Start_Receive_IT+0x6c>
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	22ff      	movs	r2, #255	; 0xff
 8006e7a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006e7e:	e01b      	b.n	8006eb8 <UART_Start_Receive_IT+0xa4>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	227f      	movs	r2, #127	; 0x7f
 8006e84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006e88:	e016      	b.n	8006eb8 <UART_Start_Receive_IT+0xa4>
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e92:	d10d      	bne.n	8006eb0 <UART_Start_Receive_IT+0x9c>
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d104      	bne.n	8006ea6 <UART_Start_Receive_IT+0x92>
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	227f      	movs	r2, #127	; 0x7f
 8006ea0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ea4:	e008      	b.n	8006eb8 <UART_Start_Receive_IT+0xa4>
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	223f      	movs	r2, #63	; 0x3f
 8006eaa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006eae:	e003      	b.n	8006eb8 <UART_Start_Receive_IT+0xa4>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2222      	movs	r2, #34	; 0x22
 8006ec4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	3308      	adds	r3, #8
 8006ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ed0:	e853 3f00 	ldrex	r3, [r3]
 8006ed4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed8:	f043 0301 	orr.w	r3, r3, #1
 8006edc:	657b      	str	r3, [r7, #84]	; 0x54
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	3308      	adds	r3, #8
 8006ee4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006ee6:	64ba      	str	r2, [r7, #72]	; 0x48
 8006ee8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006eec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006eee:	e841 2300 	strex	r3, r2, [r1]
 8006ef2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006ef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d1e5      	bne.n	8006ec6 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f02:	d107      	bne.n	8006f14 <UART_Start_Receive_IT+0x100>
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d103      	bne.n	8006f14 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	4a24      	ldr	r2, [pc, #144]	; (8006fa0 <UART_Start_Receive_IT+0x18c>)
 8006f10:	665a      	str	r2, [r3, #100]	; 0x64
 8006f12:	e002      	b.n	8006f1a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	4a23      	ldr	r2, [pc, #140]	; (8006fa4 <UART_Start_Receive_IT+0x190>)
 8006f18:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d019      	beq.n	8006f5e <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f32:	e853 3f00 	ldrex	r3, [r3]
 8006f36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	461a      	mov	r2, r3
 8006f46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f48:	637b      	str	r3, [r7, #52]	; 0x34
 8006f4a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f50:	e841 2300 	strex	r3, r2, [r1]
 8006f54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d1e6      	bne.n	8006f2a <UART_Start_Receive_IT+0x116>
 8006f5c:	e018      	b.n	8006f90 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	e853 3f00 	ldrex	r3, [r3]
 8006f6a:	613b      	str	r3, [r7, #16]
   return(result);
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	f043 0320 	orr.w	r3, r3, #32
 8006f72:	653b      	str	r3, [r7, #80]	; 0x50
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	461a      	mov	r2, r3
 8006f7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f7c:	623b      	str	r3, [r7, #32]
 8006f7e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f80:	69f9      	ldr	r1, [r7, #28]
 8006f82:	6a3a      	ldr	r2, [r7, #32]
 8006f84:	e841 2300 	strex	r3, r2, [r1]
 8006f88:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d1e6      	bne.n	8006f5e <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	375c      	adds	r7, #92	; 0x5c
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	0800724b 	.word	0x0800724b
 8006fa4:	080070ef 	.word	0x080070ef

08006fa8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b095      	sub	sp, #84	; 0x54
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fb8:	e853 3f00 	ldrex	r3, [r3]
 8006fbc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	461a      	mov	r2, r3
 8006fcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fce:	643b      	str	r3, [r7, #64]	; 0x40
 8006fd0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006fd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fd6:	e841 2300 	strex	r3, r2, [r1]
 8006fda:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d1e6      	bne.n	8006fb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	3308      	adds	r3, #8
 8006fe8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fea:	6a3b      	ldr	r3, [r7, #32]
 8006fec:	e853 3f00 	ldrex	r3, [r3]
 8006ff0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ff2:	69fb      	ldr	r3, [r7, #28]
 8006ff4:	f023 0301 	bic.w	r3, r3, #1
 8006ff8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	3308      	adds	r3, #8
 8007000:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007002:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007004:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007006:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007008:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800700a:	e841 2300 	strex	r3, r2, [r1]
 800700e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007012:	2b00      	cmp	r3, #0
 8007014:	d1e5      	bne.n	8006fe2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800701a:	2b01      	cmp	r3, #1
 800701c:	d118      	bne.n	8007050 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	e853 3f00 	ldrex	r3, [r3]
 800702a:	60bb      	str	r3, [r7, #8]
   return(result);
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	f023 0310 	bic.w	r3, r3, #16
 8007032:	647b      	str	r3, [r7, #68]	; 0x44
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	461a      	mov	r2, r3
 800703a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800703c:	61bb      	str	r3, [r7, #24]
 800703e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007040:	6979      	ldr	r1, [r7, #20]
 8007042:	69ba      	ldr	r2, [r7, #24]
 8007044:	e841 2300 	strex	r3, r2, [r1]
 8007048:	613b      	str	r3, [r7, #16]
   return(result);
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d1e6      	bne.n	800701e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2220      	movs	r2, #32
 8007054:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007062:	bf00      	nop
 8007064:	3754      	adds	r7, #84	; 0x54
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr

0800706e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800706e:	b580      	push	{r7, lr}
 8007070:	b084      	sub	sp, #16
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800707a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2200      	movs	r2, #0
 8007080:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2200      	movs	r2, #0
 8007088:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800708c:	68f8      	ldr	r0, [r7, #12]
 800708e:	f7ff faad 	bl	80065ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007092:	bf00      	nop
 8007094:	3710      	adds	r7, #16
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}

0800709a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800709a:	b580      	push	{r7, lr}
 800709c:	b088      	sub	sp, #32
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	e853 3f00 	ldrex	r3, [r3]
 80070ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070b6:	61fb      	str	r3, [r7, #28]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	461a      	mov	r2, r3
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	61bb      	str	r3, [r7, #24]
 80070c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c4:	6979      	ldr	r1, [r7, #20]
 80070c6:	69ba      	ldr	r2, [r7, #24]
 80070c8:	e841 2300 	strex	r3, r2, [r1]
 80070cc:	613b      	str	r3, [r7, #16]
   return(result);
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1e6      	bne.n	80070a2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2220      	movs	r2, #32
 80070d8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f7ff fa79 	bl	80065d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070e6:	bf00      	nop
 80070e8:	3720      	adds	r7, #32
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b096      	sub	sp, #88	; 0x58
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80070fc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007104:	2b22      	cmp	r3, #34	; 0x22
 8007106:	f040 8094 	bne.w	8007232 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007110:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007114:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007118:	b2d9      	uxtb	r1, r3
 800711a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800711e:	b2da      	uxtb	r2, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007124:	400a      	ands	r2, r1
 8007126:	b2d2      	uxtb	r2, r2
 8007128:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800712e:	1c5a      	adds	r2, r3, #1
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800713a:	b29b      	uxth	r3, r3
 800713c:	3b01      	subs	r3, #1
 800713e:	b29a      	uxth	r2, r3
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800714c:	b29b      	uxth	r3, r3
 800714e:	2b00      	cmp	r3, #0
 8007150:	d177      	bne.n	8007242 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715a:	e853 3f00 	ldrex	r3, [r3]
 800715e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007162:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007166:	653b      	str	r3, [r7, #80]	; 0x50
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	461a      	mov	r2, r3
 800716e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007170:	647b      	str	r3, [r7, #68]	; 0x44
 8007172:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007174:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007176:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007178:	e841 2300 	strex	r3, r2, [r1]
 800717c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800717e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1e6      	bne.n	8007152 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	3308      	adds	r3, #8
 800718a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800718c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718e:	e853 3f00 	ldrex	r3, [r3]
 8007192:	623b      	str	r3, [r7, #32]
   return(result);
 8007194:	6a3b      	ldr	r3, [r7, #32]
 8007196:	f023 0301 	bic.w	r3, r3, #1
 800719a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	3308      	adds	r3, #8
 80071a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80071a4:	633a      	str	r2, [r7, #48]	; 0x30
 80071a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071ac:	e841 2300 	strex	r3, r2, [r1]
 80071b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d1e5      	bne.n	8007184 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2220      	movs	r2, #32
 80071bc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2200      	movs	r2, #0
 80071c2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d12e      	bne.n	800722a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	e853 3f00 	ldrex	r3, [r3]
 80071de:	60fb      	str	r3, [r7, #12]
   return(result);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f023 0310 	bic.w	r3, r3, #16
 80071e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	461a      	mov	r2, r3
 80071ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071f0:	61fb      	str	r3, [r7, #28]
 80071f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f4:	69b9      	ldr	r1, [r7, #24]
 80071f6:	69fa      	ldr	r2, [r7, #28]
 80071f8:	e841 2300 	strex	r3, r2, [r1]
 80071fc:	617b      	str	r3, [r7, #20]
   return(result);
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d1e6      	bne.n	80071d2 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	69db      	ldr	r3, [r3, #28]
 800720a:	f003 0310 	and.w	r3, r3, #16
 800720e:	2b10      	cmp	r3, #16
 8007210:	d103      	bne.n	800721a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	2210      	movs	r2, #16
 8007218:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007220:	4619      	mov	r1, r3
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f7ff f9ec 	bl	8006600 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007228:	e00b      	b.n	8007242 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f7fa ff9e 	bl	800216c <HAL_UART_RxCpltCallback>
}
 8007230:	e007      	b.n	8007242 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	699a      	ldr	r2, [r3, #24]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f042 0208 	orr.w	r2, r2, #8
 8007240:	619a      	str	r2, [r3, #24]
}
 8007242:	bf00      	nop
 8007244:	3758      	adds	r7, #88	; 0x58
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b096      	sub	sp, #88	; 0x58
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007258:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007260:	2b22      	cmp	r3, #34	; 0x22
 8007262:	f040 8094 	bne.w	800738e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007274:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007276:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800727a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800727e:	4013      	ands	r3, r2
 8007280:	b29a      	uxth	r2, r3
 8007282:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007284:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800728a:	1c9a      	adds	r2, r3, #2
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007296:	b29b      	uxth	r3, r3
 8007298:	3b01      	subs	r3, #1
 800729a:	b29a      	uxth	r2, r3
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d177      	bne.n	800739e <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072b6:	e853 3f00 	ldrex	r3, [r3]
 80072ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80072bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	461a      	mov	r2, r3
 80072ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072cc:	643b      	str	r3, [r7, #64]	; 0x40
 80072ce:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80072d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80072d4:	e841 2300 	strex	r3, r2, [r1]
 80072d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d1e6      	bne.n	80072ae <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	3308      	adds	r3, #8
 80072e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e8:	6a3b      	ldr	r3, [r7, #32]
 80072ea:	e853 3f00 	ldrex	r3, [r3]
 80072ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	f023 0301 	bic.w	r3, r3, #1
 80072f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	3308      	adds	r3, #8
 80072fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007300:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007302:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007304:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007306:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007308:	e841 2300 	strex	r3, r2, [r1]
 800730c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800730e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1e5      	bne.n	80072e0 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2220      	movs	r2, #32
 8007318:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007324:	2b01      	cmp	r3, #1
 8007326:	d12e      	bne.n	8007386 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	e853 3f00 	ldrex	r3, [r3]
 800733a:	60bb      	str	r3, [r7, #8]
   return(result);
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	f023 0310 	bic.w	r3, r3, #16
 8007342:	647b      	str	r3, [r7, #68]	; 0x44
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	461a      	mov	r2, r3
 800734a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800734c:	61bb      	str	r3, [r7, #24]
 800734e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007350:	6979      	ldr	r1, [r7, #20]
 8007352:	69ba      	ldr	r2, [r7, #24]
 8007354:	e841 2300 	strex	r3, r2, [r1]
 8007358:	613b      	str	r3, [r7, #16]
   return(result);
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d1e6      	bne.n	800732e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	69db      	ldr	r3, [r3, #28]
 8007366:	f003 0310 	and.w	r3, r3, #16
 800736a:	2b10      	cmp	r3, #16
 800736c:	d103      	bne.n	8007376 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2210      	movs	r2, #16
 8007374:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800737c:	4619      	mov	r1, r3
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f7ff f93e 	bl	8006600 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007384:	e00b      	b.n	800739e <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f7fa fef0 	bl	800216c <HAL_UART_RxCpltCallback>
}
 800738c:	e007      	b.n	800739e <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	699a      	ldr	r2, [r3, #24]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f042 0208 	orr.w	r2, r2, #8
 800739c:	619a      	str	r2, [r3, #24]
}
 800739e:	bf00      	nop
 80073a0:	3758      	adds	r7, #88	; 0x58
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}

080073a6 <fmax>:
 80073a6:	b508      	push	{r3, lr}
 80073a8:	ed2d 8b04 	vpush	{d8-d9}
 80073ac:	eeb0 8a40 	vmov.f32	s16, s0
 80073b0:	eef0 8a60 	vmov.f32	s17, s1
 80073b4:	eeb0 9a41 	vmov.f32	s18, s2
 80073b8:	eef0 9a61 	vmov.f32	s19, s3
 80073bc:	f000 f842 	bl	8007444 <__fpclassifyd>
 80073c0:	b168      	cbz	r0, 80073de <fmax+0x38>
 80073c2:	eeb0 0a49 	vmov.f32	s0, s18
 80073c6:	eef0 0a69 	vmov.f32	s1, s19
 80073ca:	f000 f83b 	bl	8007444 <__fpclassifyd>
 80073ce:	b150      	cbz	r0, 80073e6 <fmax+0x40>
 80073d0:	ec53 2b19 	vmov	r2, r3, d9
 80073d4:	ec51 0b18 	vmov	r0, r1, d8
 80073d8:	f7f9 fbbe 	bl	8000b58 <__aeabi_dcmpgt>
 80073dc:	b918      	cbnz	r0, 80073e6 <fmax+0x40>
 80073de:	eeb0 8a49 	vmov.f32	s16, s18
 80073e2:	eef0 8a69 	vmov.f32	s17, s19
 80073e6:	eeb0 0a48 	vmov.f32	s0, s16
 80073ea:	eef0 0a68 	vmov.f32	s1, s17
 80073ee:	ecbd 8b04 	vpop	{d8-d9}
 80073f2:	bd08      	pop	{r3, pc}

080073f4 <fmin>:
 80073f4:	b508      	push	{r3, lr}
 80073f6:	ed2d 8b04 	vpush	{d8-d9}
 80073fa:	eeb0 8a40 	vmov.f32	s16, s0
 80073fe:	eef0 8a60 	vmov.f32	s17, s1
 8007402:	eeb0 9a41 	vmov.f32	s18, s2
 8007406:	eef0 9a61 	vmov.f32	s19, s3
 800740a:	f000 f81b 	bl	8007444 <__fpclassifyd>
 800740e:	b168      	cbz	r0, 800742c <fmin+0x38>
 8007410:	eeb0 0a49 	vmov.f32	s0, s18
 8007414:	eef0 0a69 	vmov.f32	s1, s19
 8007418:	f000 f814 	bl	8007444 <__fpclassifyd>
 800741c:	b150      	cbz	r0, 8007434 <fmin+0x40>
 800741e:	ec53 2b19 	vmov	r2, r3, d9
 8007422:	ec51 0b18 	vmov	r0, r1, d8
 8007426:	f7f9 fb79 	bl	8000b1c <__aeabi_dcmplt>
 800742a:	b918      	cbnz	r0, 8007434 <fmin+0x40>
 800742c:	eeb0 8a49 	vmov.f32	s16, s18
 8007430:	eef0 8a69 	vmov.f32	s17, s19
 8007434:	eeb0 0a48 	vmov.f32	s0, s16
 8007438:	eef0 0a68 	vmov.f32	s1, s17
 800743c:	ecbd 8b04 	vpop	{d8-d9}
 8007440:	bd08      	pop	{r3, pc}
	...

08007444 <__fpclassifyd>:
 8007444:	ec51 0b10 	vmov	r0, r1, d0
 8007448:	b510      	push	{r4, lr}
 800744a:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 800744e:	460b      	mov	r3, r1
 8007450:	d019      	beq.n	8007486 <__fpclassifyd+0x42>
 8007452:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 8007456:	490e      	ldr	r1, [pc, #56]	; (8007490 <__fpclassifyd+0x4c>)
 8007458:	428a      	cmp	r2, r1
 800745a:	d90e      	bls.n	800747a <__fpclassifyd+0x36>
 800745c:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 8007460:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 8007464:	428a      	cmp	r2, r1
 8007466:	d908      	bls.n	800747a <__fpclassifyd+0x36>
 8007468:	4a0a      	ldr	r2, [pc, #40]	; (8007494 <__fpclassifyd+0x50>)
 800746a:	4213      	tst	r3, r2
 800746c:	d007      	beq.n	800747e <__fpclassifyd+0x3a>
 800746e:	4294      	cmp	r4, r2
 8007470:	d107      	bne.n	8007482 <__fpclassifyd+0x3e>
 8007472:	fab0 f080 	clz	r0, r0
 8007476:	0940      	lsrs	r0, r0, #5
 8007478:	bd10      	pop	{r4, pc}
 800747a:	2004      	movs	r0, #4
 800747c:	e7fc      	b.n	8007478 <__fpclassifyd+0x34>
 800747e:	2003      	movs	r0, #3
 8007480:	e7fa      	b.n	8007478 <__fpclassifyd+0x34>
 8007482:	2000      	movs	r0, #0
 8007484:	e7f8      	b.n	8007478 <__fpclassifyd+0x34>
 8007486:	2800      	cmp	r0, #0
 8007488:	d1ee      	bne.n	8007468 <__fpclassifyd+0x24>
 800748a:	2002      	movs	r0, #2
 800748c:	e7f4      	b.n	8007478 <__fpclassifyd+0x34>
 800748e:	bf00      	nop
 8007490:	7fdfffff 	.word	0x7fdfffff
 8007494:	7ff00000 	.word	0x7ff00000

08007498 <__errno>:
 8007498:	4b01      	ldr	r3, [pc, #4]	; (80074a0 <__errno+0x8>)
 800749a:	6818      	ldr	r0, [r3, #0]
 800749c:	4770      	bx	lr
 800749e:	bf00      	nop
 80074a0:	2000000c 	.word	0x2000000c

080074a4 <__libc_init_array>:
 80074a4:	b570      	push	{r4, r5, r6, lr}
 80074a6:	4d0d      	ldr	r5, [pc, #52]	; (80074dc <__libc_init_array+0x38>)
 80074a8:	4c0d      	ldr	r4, [pc, #52]	; (80074e0 <__libc_init_array+0x3c>)
 80074aa:	1b64      	subs	r4, r4, r5
 80074ac:	10a4      	asrs	r4, r4, #2
 80074ae:	2600      	movs	r6, #0
 80074b0:	42a6      	cmp	r6, r4
 80074b2:	d109      	bne.n	80074c8 <__libc_init_array+0x24>
 80074b4:	4d0b      	ldr	r5, [pc, #44]	; (80074e4 <__libc_init_array+0x40>)
 80074b6:	4c0c      	ldr	r4, [pc, #48]	; (80074e8 <__libc_init_array+0x44>)
 80074b8:	f005 f8fc 	bl	800c6b4 <_init>
 80074bc:	1b64      	subs	r4, r4, r5
 80074be:	10a4      	asrs	r4, r4, #2
 80074c0:	2600      	movs	r6, #0
 80074c2:	42a6      	cmp	r6, r4
 80074c4:	d105      	bne.n	80074d2 <__libc_init_array+0x2e>
 80074c6:	bd70      	pop	{r4, r5, r6, pc}
 80074c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80074cc:	4798      	blx	r3
 80074ce:	3601      	adds	r6, #1
 80074d0:	e7ee      	b.n	80074b0 <__libc_init_array+0xc>
 80074d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80074d6:	4798      	blx	r3
 80074d8:	3601      	adds	r6, #1
 80074da:	e7f2      	b.n	80074c2 <__libc_init_array+0x1e>
 80074dc:	0800cbe4 	.word	0x0800cbe4
 80074e0:	0800cbe4 	.word	0x0800cbe4
 80074e4:	0800cbe4 	.word	0x0800cbe4
 80074e8:	0800cbe8 	.word	0x0800cbe8

080074ec <memset>:
 80074ec:	4402      	add	r2, r0
 80074ee:	4603      	mov	r3, r0
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d100      	bne.n	80074f6 <memset+0xa>
 80074f4:	4770      	bx	lr
 80074f6:	f803 1b01 	strb.w	r1, [r3], #1
 80074fa:	e7f9      	b.n	80074f0 <memset+0x4>

080074fc <__cvt>:
 80074fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007500:	ec55 4b10 	vmov	r4, r5, d0
 8007504:	2d00      	cmp	r5, #0
 8007506:	460e      	mov	r6, r1
 8007508:	4619      	mov	r1, r3
 800750a:	462b      	mov	r3, r5
 800750c:	bfbb      	ittet	lt
 800750e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007512:	461d      	movlt	r5, r3
 8007514:	2300      	movge	r3, #0
 8007516:	232d      	movlt	r3, #45	; 0x2d
 8007518:	700b      	strb	r3, [r1, #0]
 800751a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800751c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007520:	4691      	mov	r9, r2
 8007522:	f023 0820 	bic.w	r8, r3, #32
 8007526:	bfbc      	itt	lt
 8007528:	4622      	movlt	r2, r4
 800752a:	4614      	movlt	r4, r2
 800752c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007530:	d005      	beq.n	800753e <__cvt+0x42>
 8007532:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007536:	d100      	bne.n	800753a <__cvt+0x3e>
 8007538:	3601      	adds	r6, #1
 800753a:	2102      	movs	r1, #2
 800753c:	e000      	b.n	8007540 <__cvt+0x44>
 800753e:	2103      	movs	r1, #3
 8007540:	ab03      	add	r3, sp, #12
 8007542:	9301      	str	r3, [sp, #4]
 8007544:	ab02      	add	r3, sp, #8
 8007546:	9300      	str	r3, [sp, #0]
 8007548:	ec45 4b10 	vmov	d0, r4, r5
 800754c:	4653      	mov	r3, sl
 800754e:	4632      	mov	r2, r6
 8007550:	f001 fe76 	bl	8009240 <_dtoa_r>
 8007554:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007558:	4607      	mov	r7, r0
 800755a:	d102      	bne.n	8007562 <__cvt+0x66>
 800755c:	f019 0f01 	tst.w	r9, #1
 8007560:	d022      	beq.n	80075a8 <__cvt+0xac>
 8007562:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007566:	eb07 0906 	add.w	r9, r7, r6
 800756a:	d110      	bne.n	800758e <__cvt+0x92>
 800756c:	783b      	ldrb	r3, [r7, #0]
 800756e:	2b30      	cmp	r3, #48	; 0x30
 8007570:	d10a      	bne.n	8007588 <__cvt+0x8c>
 8007572:	2200      	movs	r2, #0
 8007574:	2300      	movs	r3, #0
 8007576:	4620      	mov	r0, r4
 8007578:	4629      	mov	r1, r5
 800757a:	f7f9 fac5 	bl	8000b08 <__aeabi_dcmpeq>
 800757e:	b918      	cbnz	r0, 8007588 <__cvt+0x8c>
 8007580:	f1c6 0601 	rsb	r6, r6, #1
 8007584:	f8ca 6000 	str.w	r6, [sl]
 8007588:	f8da 3000 	ldr.w	r3, [sl]
 800758c:	4499      	add	r9, r3
 800758e:	2200      	movs	r2, #0
 8007590:	2300      	movs	r3, #0
 8007592:	4620      	mov	r0, r4
 8007594:	4629      	mov	r1, r5
 8007596:	f7f9 fab7 	bl	8000b08 <__aeabi_dcmpeq>
 800759a:	b108      	cbz	r0, 80075a0 <__cvt+0xa4>
 800759c:	f8cd 900c 	str.w	r9, [sp, #12]
 80075a0:	2230      	movs	r2, #48	; 0x30
 80075a2:	9b03      	ldr	r3, [sp, #12]
 80075a4:	454b      	cmp	r3, r9
 80075a6:	d307      	bcc.n	80075b8 <__cvt+0xbc>
 80075a8:	9b03      	ldr	r3, [sp, #12]
 80075aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80075ac:	1bdb      	subs	r3, r3, r7
 80075ae:	4638      	mov	r0, r7
 80075b0:	6013      	str	r3, [r2, #0]
 80075b2:	b004      	add	sp, #16
 80075b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075b8:	1c59      	adds	r1, r3, #1
 80075ba:	9103      	str	r1, [sp, #12]
 80075bc:	701a      	strb	r2, [r3, #0]
 80075be:	e7f0      	b.n	80075a2 <__cvt+0xa6>

080075c0 <__exponent>:
 80075c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075c2:	4603      	mov	r3, r0
 80075c4:	2900      	cmp	r1, #0
 80075c6:	bfb8      	it	lt
 80075c8:	4249      	neglt	r1, r1
 80075ca:	f803 2b02 	strb.w	r2, [r3], #2
 80075ce:	bfb4      	ite	lt
 80075d0:	222d      	movlt	r2, #45	; 0x2d
 80075d2:	222b      	movge	r2, #43	; 0x2b
 80075d4:	2909      	cmp	r1, #9
 80075d6:	7042      	strb	r2, [r0, #1]
 80075d8:	dd2a      	ble.n	8007630 <__exponent+0x70>
 80075da:	f10d 0407 	add.w	r4, sp, #7
 80075de:	46a4      	mov	ip, r4
 80075e0:	270a      	movs	r7, #10
 80075e2:	46a6      	mov	lr, r4
 80075e4:	460a      	mov	r2, r1
 80075e6:	fb91 f6f7 	sdiv	r6, r1, r7
 80075ea:	fb07 1516 	mls	r5, r7, r6, r1
 80075ee:	3530      	adds	r5, #48	; 0x30
 80075f0:	2a63      	cmp	r2, #99	; 0x63
 80075f2:	f104 34ff 	add.w	r4, r4, #4294967295
 80075f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80075fa:	4631      	mov	r1, r6
 80075fc:	dcf1      	bgt.n	80075e2 <__exponent+0x22>
 80075fe:	3130      	adds	r1, #48	; 0x30
 8007600:	f1ae 0502 	sub.w	r5, lr, #2
 8007604:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007608:	1c44      	adds	r4, r0, #1
 800760a:	4629      	mov	r1, r5
 800760c:	4561      	cmp	r1, ip
 800760e:	d30a      	bcc.n	8007626 <__exponent+0x66>
 8007610:	f10d 0209 	add.w	r2, sp, #9
 8007614:	eba2 020e 	sub.w	r2, r2, lr
 8007618:	4565      	cmp	r5, ip
 800761a:	bf88      	it	hi
 800761c:	2200      	movhi	r2, #0
 800761e:	4413      	add	r3, r2
 8007620:	1a18      	subs	r0, r3, r0
 8007622:	b003      	add	sp, #12
 8007624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007626:	f811 2b01 	ldrb.w	r2, [r1], #1
 800762a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800762e:	e7ed      	b.n	800760c <__exponent+0x4c>
 8007630:	2330      	movs	r3, #48	; 0x30
 8007632:	3130      	adds	r1, #48	; 0x30
 8007634:	7083      	strb	r3, [r0, #2]
 8007636:	70c1      	strb	r1, [r0, #3]
 8007638:	1d03      	adds	r3, r0, #4
 800763a:	e7f1      	b.n	8007620 <__exponent+0x60>

0800763c <_printf_float>:
 800763c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007640:	ed2d 8b02 	vpush	{d8}
 8007644:	b08d      	sub	sp, #52	; 0x34
 8007646:	460c      	mov	r4, r1
 8007648:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800764c:	4616      	mov	r6, r2
 800764e:	461f      	mov	r7, r3
 8007650:	4605      	mov	r5, r0
 8007652:	f002 ff53 	bl	800a4fc <_localeconv_r>
 8007656:	f8d0 a000 	ldr.w	sl, [r0]
 800765a:	4650      	mov	r0, sl
 800765c:	f7f8 fdd8 	bl	8000210 <strlen>
 8007660:	2300      	movs	r3, #0
 8007662:	930a      	str	r3, [sp, #40]	; 0x28
 8007664:	6823      	ldr	r3, [r4, #0]
 8007666:	9305      	str	r3, [sp, #20]
 8007668:	f8d8 3000 	ldr.w	r3, [r8]
 800766c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007670:	3307      	adds	r3, #7
 8007672:	f023 0307 	bic.w	r3, r3, #7
 8007676:	f103 0208 	add.w	r2, r3, #8
 800767a:	f8c8 2000 	str.w	r2, [r8]
 800767e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007682:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007686:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800768a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800768e:	9307      	str	r3, [sp, #28]
 8007690:	f8cd 8018 	str.w	r8, [sp, #24]
 8007694:	ee08 0a10 	vmov	s16, r0
 8007698:	4b9f      	ldr	r3, [pc, #636]	; (8007918 <_printf_float+0x2dc>)
 800769a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800769e:	f04f 32ff 	mov.w	r2, #4294967295
 80076a2:	f7f9 fa63 	bl	8000b6c <__aeabi_dcmpun>
 80076a6:	bb88      	cbnz	r0, 800770c <_printf_float+0xd0>
 80076a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80076ac:	4b9a      	ldr	r3, [pc, #616]	; (8007918 <_printf_float+0x2dc>)
 80076ae:	f04f 32ff 	mov.w	r2, #4294967295
 80076b2:	f7f9 fa3d 	bl	8000b30 <__aeabi_dcmple>
 80076b6:	bb48      	cbnz	r0, 800770c <_printf_float+0xd0>
 80076b8:	2200      	movs	r2, #0
 80076ba:	2300      	movs	r3, #0
 80076bc:	4640      	mov	r0, r8
 80076be:	4649      	mov	r1, r9
 80076c0:	f7f9 fa2c 	bl	8000b1c <__aeabi_dcmplt>
 80076c4:	b110      	cbz	r0, 80076cc <_printf_float+0x90>
 80076c6:	232d      	movs	r3, #45	; 0x2d
 80076c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076cc:	4b93      	ldr	r3, [pc, #588]	; (800791c <_printf_float+0x2e0>)
 80076ce:	4894      	ldr	r0, [pc, #592]	; (8007920 <_printf_float+0x2e4>)
 80076d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80076d4:	bf94      	ite	ls
 80076d6:	4698      	movls	r8, r3
 80076d8:	4680      	movhi	r8, r0
 80076da:	2303      	movs	r3, #3
 80076dc:	6123      	str	r3, [r4, #16]
 80076de:	9b05      	ldr	r3, [sp, #20]
 80076e0:	f023 0204 	bic.w	r2, r3, #4
 80076e4:	6022      	str	r2, [r4, #0]
 80076e6:	f04f 0900 	mov.w	r9, #0
 80076ea:	9700      	str	r7, [sp, #0]
 80076ec:	4633      	mov	r3, r6
 80076ee:	aa0b      	add	r2, sp, #44	; 0x2c
 80076f0:	4621      	mov	r1, r4
 80076f2:	4628      	mov	r0, r5
 80076f4:	f000 f9d8 	bl	8007aa8 <_printf_common>
 80076f8:	3001      	adds	r0, #1
 80076fa:	f040 8090 	bne.w	800781e <_printf_float+0x1e2>
 80076fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007702:	b00d      	add	sp, #52	; 0x34
 8007704:	ecbd 8b02 	vpop	{d8}
 8007708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800770c:	4642      	mov	r2, r8
 800770e:	464b      	mov	r3, r9
 8007710:	4640      	mov	r0, r8
 8007712:	4649      	mov	r1, r9
 8007714:	f7f9 fa2a 	bl	8000b6c <__aeabi_dcmpun>
 8007718:	b140      	cbz	r0, 800772c <_printf_float+0xf0>
 800771a:	464b      	mov	r3, r9
 800771c:	2b00      	cmp	r3, #0
 800771e:	bfbc      	itt	lt
 8007720:	232d      	movlt	r3, #45	; 0x2d
 8007722:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007726:	487f      	ldr	r0, [pc, #508]	; (8007924 <_printf_float+0x2e8>)
 8007728:	4b7f      	ldr	r3, [pc, #508]	; (8007928 <_printf_float+0x2ec>)
 800772a:	e7d1      	b.n	80076d0 <_printf_float+0x94>
 800772c:	6863      	ldr	r3, [r4, #4]
 800772e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007732:	9206      	str	r2, [sp, #24]
 8007734:	1c5a      	adds	r2, r3, #1
 8007736:	d13f      	bne.n	80077b8 <_printf_float+0x17c>
 8007738:	2306      	movs	r3, #6
 800773a:	6063      	str	r3, [r4, #4]
 800773c:	9b05      	ldr	r3, [sp, #20]
 800773e:	6861      	ldr	r1, [r4, #4]
 8007740:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007744:	2300      	movs	r3, #0
 8007746:	9303      	str	r3, [sp, #12]
 8007748:	ab0a      	add	r3, sp, #40	; 0x28
 800774a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800774e:	ab09      	add	r3, sp, #36	; 0x24
 8007750:	ec49 8b10 	vmov	d0, r8, r9
 8007754:	9300      	str	r3, [sp, #0]
 8007756:	6022      	str	r2, [r4, #0]
 8007758:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800775c:	4628      	mov	r0, r5
 800775e:	f7ff fecd 	bl	80074fc <__cvt>
 8007762:	9b06      	ldr	r3, [sp, #24]
 8007764:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007766:	2b47      	cmp	r3, #71	; 0x47
 8007768:	4680      	mov	r8, r0
 800776a:	d108      	bne.n	800777e <_printf_float+0x142>
 800776c:	1cc8      	adds	r0, r1, #3
 800776e:	db02      	blt.n	8007776 <_printf_float+0x13a>
 8007770:	6863      	ldr	r3, [r4, #4]
 8007772:	4299      	cmp	r1, r3
 8007774:	dd41      	ble.n	80077fa <_printf_float+0x1be>
 8007776:	f1ab 0b02 	sub.w	fp, fp, #2
 800777a:	fa5f fb8b 	uxtb.w	fp, fp
 800777e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007782:	d820      	bhi.n	80077c6 <_printf_float+0x18a>
 8007784:	3901      	subs	r1, #1
 8007786:	465a      	mov	r2, fp
 8007788:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800778c:	9109      	str	r1, [sp, #36]	; 0x24
 800778e:	f7ff ff17 	bl	80075c0 <__exponent>
 8007792:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007794:	1813      	adds	r3, r2, r0
 8007796:	2a01      	cmp	r2, #1
 8007798:	4681      	mov	r9, r0
 800779a:	6123      	str	r3, [r4, #16]
 800779c:	dc02      	bgt.n	80077a4 <_printf_float+0x168>
 800779e:	6822      	ldr	r2, [r4, #0]
 80077a0:	07d2      	lsls	r2, r2, #31
 80077a2:	d501      	bpl.n	80077a8 <_printf_float+0x16c>
 80077a4:	3301      	adds	r3, #1
 80077a6:	6123      	str	r3, [r4, #16]
 80077a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d09c      	beq.n	80076ea <_printf_float+0xae>
 80077b0:	232d      	movs	r3, #45	; 0x2d
 80077b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077b6:	e798      	b.n	80076ea <_printf_float+0xae>
 80077b8:	9a06      	ldr	r2, [sp, #24]
 80077ba:	2a47      	cmp	r2, #71	; 0x47
 80077bc:	d1be      	bne.n	800773c <_printf_float+0x100>
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1bc      	bne.n	800773c <_printf_float+0x100>
 80077c2:	2301      	movs	r3, #1
 80077c4:	e7b9      	b.n	800773a <_printf_float+0xfe>
 80077c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80077ca:	d118      	bne.n	80077fe <_printf_float+0x1c2>
 80077cc:	2900      	cmp	r1, #0
 80077ce:	6863      	ldr	r3, [r4, #4]
 80077d0:	dd0b      	ble.n	80077ea <_printf_float+0x1ae>
 80077d2:	6121      	str	r1, [r4, #16]
 80077d4:	b913      	cbnz	r3, 80077dc <_printf_float+0x1a0>
 80077d6:	6822      	ldr	r2, [r4, #0]
 80077d8:	07d0      	lsls	r0, r2, #31
 80077da:	d502      	bpl.n	80077e2 <_printf_float+0x1a6>
 80077dc:	3301      	adds	r3, #1
 80077de:	440b      	add	r3, r1
 80077e0:	6123      	str	r3, [r4, #16]
 80077e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80077e4:	f04f 0900 	mov.w	r9, #0
 80077e8:	e7de      	b.n	80077a8 <_printf_float+0x16c>
 80077ea:	b913      	cbnz	r3, 80077f2 <_printf_float+0x1b6>
 80077ec:	6822      	ldr	r2, [r4, #0]
 80077ee:	07d2      	lsls	r2, r2, #31
 80077f0:	d501      	bpl.n	80077f6 <_printf_float+0x1ba>
 80077f2:	3302      	adds	r3, #2
 80077f4:	e7f4      	b.n	80077e0 <_printf_float+0x1a4>
 80077f6:	2301      	movs	r3, #1
 80077f8:	e7f2      	b.n	80077e0 <_printf_float+0x1a4>
 80077fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80077fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007800:	4299      	cmp	r1, r3
 8007802:	db05      	blt.n	8007810 <_printf_float+0x1d4>
 8007804:	6823      	ldr	r3, [r4, #0]
 8007806:	6121      	str	r1, [r4, #16]
 8007808:	07d8      	lsls	r0, r3, #31
 800780a:	d5ea      	bpl.n	80077e2 <_printf_float+0x1a6>
 800780c:	1c4b      	adds	r3, r1, #1
 800780e:	e7e7      	b.n	80077e0 <_printf_float+0x1a4>
 8007810:	2900      	cmp	r1, #0
 8007812:	bfd4      	ite	le
 8007814:	f1c1 0202 	rsble	r2, r1, #2
 8007818:	2201      	movgt	r2, #1
 800781a:	4413      	add	r3, r2
 800781c:	e7e0      	b.n	80077e0 <_printf_float+0x1a4>
 800781e:	6823      	ldr	r3, [r4, #0]
 8007820:	055a      	lsls	r2, r3, #21
 8007822:	d407      	bmi.n	8007834 <_printf_float+0x1f8>
 8007824:	6923      	ldr	r3, [r4, #16]
 8007826:	4642      	mov	r2, r8
 8007828:	4631      	mov	r1, r6
 800782a:	4628      	mov	r0, r5
 800782c:	47b8      	blx	r7
 800782e:	3001      	adds	r0, #1
 8007830:	d12c      	bne.n	800788c <_printf_float+0x250>
 8007832:	e764      	b.n	80076fe <_printf_float+0xc2>
 8007834:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007838:	f240 80e0 	bls.w	80079fc <_printf_float+0x3c0>
 800783c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007840:	2200      	movs	r2, #0
 8007842:	2300      	movs	r3, #0
 8007844:	f7f9 f960 	bl	8000b08 <__aeabi_dcmpeq>
 8007848:	2800      	cmp	r0, #0
 800784a:	d034      	beq.n	80078b6 <_printf_float+0x27a>
 800784c:	4a37      	ldr	r2, [pc, #220]	; (800792c <_printf_float+0x2f0>)
 800784e:	2301      	movs	r3, #1
 8007850:	4631      	mov	r1, r6
 8007852:	4628      	mov	r0, r5
 8007854:	47b8      	blx	r7
 8007856:	3001      	adds	r0, #1
 8007858:	f43f af51 	beq.w	80076fe <_printf_float+0xc2>
 800785c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007860:	429a      	cmp	r2, r3
 8007862:	db02      	blt.n	800786a <_printf_float+0x22e>
 8007864:	6823      	ldr	r3, [r4, #0]
 8007866:	07d8      	lsls	r0, r3, #31
 8007868:	d510      	bpl.n	800788c <_printf_float+0x250>
 800786a:	ee18 3a10 	vmov	r3, s16
 800786e:	4652      	mov	r2, sl
 8007870:	4631      	mov	r1, r6
 8007872:	4628      	mov	r0, r5
 8007874:	47b8      	blx	r7
 8007876:	3001      	adds	r0, #1
 8007878:	f43f af41 	beq.w	80076fe <_printf_float+0xc2>
 800787c:	f04f 0800 	mov.w	r8, #0
 8007880:	f104 091a 	add.w	r9, r4, #26
 8007884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007886:	3b01      	subs	r3, #1
 8007888:	4543      	cmp	r3, r8
 800788a:	dc09      	bgt.n	80078a0 <_printf_float+0x264>
 800788c:	6823      	ldr	r3, [r4, #0]
 800788e:	079b      	lsls	r3, r3, #30
 8007890:	f100 8105 	bmi.w	8007a9e <_printf_float+0x462>
 8007894:	68e0      	ldr	r0, [r4, #12]
 8007896:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007898:	4298      	cmp	r0, r3
 800789a:	bfb8      	it	lt
 800789c:	4618      	movlt	r0, r3
 800789e:	e730      	b.n	8007702 <_printf_float+0xc6>
 80078a0:	2301      	movs	r3, #1
 80078a2:	464a      	mov	r2, r9
 80078a4:	4631      	mov	r1, r6
 80078a6:	4628      	mov	r0, r5
 80078a8:	47b8      	blx	r7
 80078aa:	3001      	adds	r0, #1
 80078ac:	f43f af27 	beq.w	80076fe <_printf_float+0xc2>
 80078b0:	f108 0801 	add.w	r8, r8, #1
 80078b4:	e7e6      	b.n	8007884 <_printf_float+0x248>
 80078b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	dc39      	bgt.n	8007930 <_printf_float+0x2f4>
 80078bc:	4a1b      	ldr	r2, [pc, #108]	; (800792c <_printf_float+0x2f0>)
 80078be:	2301      	movs	r3, #1
 80078c0:	4631      	mov	r1, r6
 80078c2:	4628      	mov	r0, r5
 80078c4:	47b8      	blx	r7
 80078c6:	3001      	adds	r0, #1
 80078c8:	f43f af19 	beq.w	80076fe <_printf_float+0xc2>
 80078cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078d0:	4313      	orrs	r3, r2
 80078d2:	d102      	bne.n	80078da <_printf_float+0x29e>
 80078d4:	6823      	ldr	r3, [r4, #0]
 80078d6:	07d9      	lsls	r1, r3, #31
 80078d8:	d5d8      	bpl.n	800788c <_printf_float+0x250>
 80078da:	ee18 3a10 	vmov	r3, s16
 80078de:	4652      	mov	r2, sl
 80078e0:	4631      	mov	r1, r6
 80078e2:	4628      	mov	r0, r5
 80078e4:	47b8      	blx	r7
 80078e6:	3001      	adds	r0, #1
 80078e8:	f43f af09 	beq.w	80076fe <_printf_float+0xc2>
 80078ec:	f04f 0900 	mov.w	r9, #0
 80078f0:	f104 0a1a 	add.w	sl, r4, #26
 80078f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078f6:	425b      	negs	r3, r3
 80078f8:	454b      	cmp	r3, r9
 80078fa:	dc01      	bgt.n	8007900 <_printf_float+0x2c4>
 80078fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078fe:	e792      	b.n	8007826 <_printf_float+0x1ea>
 8007900:	2301      	movs	r3, #1
 8007902:	4652      	mov	r2, sl
 8007904:	4631      	mov	r1, r6
 8007906:	4628      	mov	r0, r5
 8007908:	47b8      	blx	r7
 800790a:	3001      	adds	r0, #1
 800790c:	f43f aef7 	beq.w	80076fe <_printf_float+0xc2>
 8007910:	f109 0901 	add.w	r9, r9, #1
 8007914:	e7ee      	b.n	80078f4 <_printf_float+0x2b8>
 8007916:	bf00      	nop
 8007918:	7fefffff 	.word	0x7fefffff
 800791c:	0800c724 	.word	0x0800c724
 8007920:	0800c728 	.word	0x0800c728
 8007924:	0800c730 	.word	0x0800c730
 8007928:	0800c72c 	.word	0x0800c72c
 800792c:	0800cb29 	.word	0x0800cb29
 8007930:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007932:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007934:	429a      	cmp	r2, r3
 8007936:	bfa8      	it	ge
 8007938:	461a      	movge	r2, r3
 800793a:	2a00      	cmp	r2, #0
 800793c:	4691      	mov	r9, r2
 800793e:	dc37      	bgt.n	80079b0 <_printf_float+0x374>
 8007940:	f04f 0b00 	mov.w	fp, #0
 8007944:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007948:	f104 021a 	add.w	r2, r4, #26
 800794c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800794e:	9305      	str	r3, [sp, #20]
 8007950:	eba3 0309 	sub.w	r3, r3, r9
 8007954:	455b      	cmp	r3, fp
 8007956:	dc33      	bgt.n	80079c0 <_printf_float+0x384>
 8007958:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800795c:	429a      	cmp	r2, r3
 800795e:	db3b      	blt.n	80079d8 <_printf_float+0x39c>
 8007960:	6823      	ldr	r3, [r4, #0]
 8007962:	07da      	lsls	r2, r3, #31
 8007964:	d438      	bmi.n	80079d8 <_printf_float+0x39c>
 8007966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007968:	9a05      	ldr	r2, [sp, #20]
 800796a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800796c:	1a9a      	subs	r2, r3, r2
 800796e:	eba3 0901 	sub.w	r9, r3, r1
 8007972:	4591      	cmp	r9, r2
 8007974:	bfa8      	it	ge
 8007976:	4691      	movge	r9, r2
 8007978:	f1b9 0f00 	cmp.w	r9, #0
 800797c:	dc35      	bgt.n	80079ea <_printf_float+0x3ae>
 800797e:	f04f 0800 	mov.w	r8, #0
 8007982:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007986:	f104 0a1a 	add.w	sl, r4, #26
 800798a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800798e:	1a9b      	subs	r3, r3, r2
 8007990:	eba3 0309 	sub.w	r3, r3, r9
 8007994:	4543      	cmp	r3, r8
 8007996:	f77f af79 	ble.w	800788c <_printf_float+0x250>
 800799a:	2301      	movs	r3, #1
 800799c:	4652      	mov	r2, sl
 800799e:	4631      	mov	r1, r6
 80079a0:	4628      	mov	r0, r5
 80079a2:	47b8      	blx	r7
 80079a4:	3001      	adds	r0, #1
 80079a6:	f43f aeaa 	beq.w	80076fe <_printf_float+0xc2>
 80079aa:	f108 0801 	add.w	r8, r8, #1
 80079ae:	e7ec      	b.n	800798a <_printf_float+0x34e>
 80079b0:	4613      	mov	r3, r2
 80079b2:	4631      	mov	r1, r6
 80079b4:	4642      	mov	r2, r8
 80079b6:	4628      	mov	r0, r5
 80079b8:	47b8      	blx	r7
 80079ba:	3001      	adds	r0, #1
 80079bc:	d1c0      	bne.n	8007940 <_printf_float+0x304>
 80079be:	e69e      	b.n	80076fe <_printf_float+0xc2>
 80079c0:	2301      	movs	r3, #1
 80079c2:	4631      	mov	r1, r6
 80079c4:	4628      	mov	r0, r5
 80079c6:	9205      	str	r2, [sp, #20]
 80079c8:	47b8      	blx	r7
 80079ca:	3001      	adds	r0, #1
 80079cc:	f43f ae97 	beq.w	80076fe <_printf_float+0xc2>
 80079d0:	9a05      	ldr	r2, [sp, #20]
 80079d2:	f10b 0b01 	add.w	fp, fp, #1
 80079d6:	e7b9      	b.n	800794c <_printf_float+0x310>
 80079d8:	ee18 3a10 	vmov	r3, s16
 80079dc:	4652      	mov	r2, sl
 80079de:	4631      	mov	r1, r6
 80079e0:	4628      	mov	r0, r5
 80079e2:	47b8      	blx	r7
 80079e4:	3001      	adds	r0, #1
 80079e6:	d1be      	bne.n	8007966 <_printf_float+0x32a>
 80079e8:	e689      	b.n	80076fe <_printf_float+0xc2>
 80079ea:	9a05      	ldr	r2, [sp, #20]
 80079ec:	464b      	mov	r3, r9
 80079ee:	4442      	add	r2, r8
 80079f0:	4631      	mov	r1, r6
 80079f2:	4628      	mov	r0, r5
 80079f4:	47b8      	blx	r7
 80079f6:	3001      	adds	r0, #1
 80079f8:	d1c1      	bne.n	800797e <_printf_float+0x342>
 80079fa:	e680      	b.n	80076fe <_printf_float+0xc2>
 80079fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079fe:	2a01      	cmp	r2, #1
 8007a00:	dc01      	bgt.n	8007a06 <_printf_float+0x3ca>
 8007a02:	07db      	lsls	r3, r3, #31
 8007a04:	d538      	bpl.n	8007a78 <_printf_float+0x43c>
 8007a06:	2301      	movs	r3, #1
 8007a08:	4642      	mov	r2, r8
 8007a0a:	4631      	mov	r1, r6
 8007a0c:	4628      	mov	r0, r5
 8007a0e:	47b8      	blx	r7
 8007a10:	3001      	adds	r0, #1
 8007a12:	f43f ae74 	beq.w	80076fe <_printf_float+0xc2>
 8007a16:	ee18 3a10 	vmov	r3, s16
 8007a1a:	4652      	mov	r2, sl
 8007a1c:	4631      	mov	r1, r6
 8007a1e:	4628      	mov	r0, r5
 8007a20:	47b8      	blx	r7
 8007a22:	3001      	adds	r0, #1
 8007a24:	f43f ae6b 	beq.w	80076fe <_printf_float+0xc2>
 8007a28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	2300      	movs	r3, #0
 8007a30:	f7f9 f86a 	bl	8000b08 <__aeabi_dcmpeq>
 8007a34:	b9d8      	cbnz	r0, 8007a6e <_printf_float+0x432>
 8007a36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a38:	f108 0201 	add.w	r2, r8, #1
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	4631      	mov	r1, r6
 8007a40:	4628      	mov	r0, r5
 8007a42:	47b8      	blx	r7
 8007a44:	3001      	adds	r0, #1
 8007a46:	d10e      	bne.n	8007a66 <_printf_float+0x42a>
 8007a48:	e659      	b.n	80076fe <_printf_float+0xc2>
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	4652      	mov	r2, sl
 8007a4e:	4631      	mov	r1, r6
 8007a50:	4628      	mov	r0, r5
 8007a52:	47b8      	blx	r7
 8007a54:	3001      	adds	r0, #1
 8007a56:	f43f ae52 	beq.w	80076fe <_printf_float+0xc2>
 8007a5a:	f108 0801 	add.w	r8, r8, #1
 8007a5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a60:	3b01      	subs	r3, #1
 8007a62:	4543      	cmp	r3, r8
 8007a64:	dcf1      	bgt.n	8007a4a <_printf_float+0x40e>
 8007a66:	464b      	mov	r3, r9
 8007a68:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007a6c:	e6dc      	b.n	8007828 <_printf_float+0x1ec>
 8007a6e:	f04f 0800 	mov.w	r8, #0
 8007a72:	f104 0a1a 	add.w	sl, r4, #26
 8007a76:	e7f2      	b.n	8007a5e <_printf_float+0x422>
 8007a78:	2301      	movs	r3, #1
 8007a7a:	4642      	mov	r2, r8
 8007a7c:	e7df      	b.n	8007a3e <_printf_float+0x402>
 8007a7e:	2301      	movs	r3, #1
 8007a80:	464a      	mov	r2, r9
 8007a82:	4631      	mov	r1, r6
 8007a84:	4628      	mov	r0, r5
 8007a86:	47b8      	blx	r7
 8007a88:	3001      	adds	r0, #1
 8007a8a:	f43f ae38 	beq.w	80076fe <_printf_float+0xc2>
 8007a8e:	f108 0801 	add.w	r8, r8, #1
 8007a92:	68e3      	ldr	r3, [r4, #12]
 8007a94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a96:	1a5b      	subs	r3, r3, r1
 8007a98:	4543      	cmp	r3, r8
 8007a9a:	dcf0      	bgt.n	8007a7e <_printf_float+0x442>
 8007a9c:	e6fa      	b.n	8007894 <_printf_float+0x258>
 8007a9e:	f04f 0800 	mov.w	r8, #0
 8007aa2:	f104 0919 	add.w	r9, r4, #25
 8007aa6:	e7f4      	b.n	8007a92 <_printf_float+0x456>

08007aa8 <_printf_common>:
 8007aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007aac:	4616      	mov	r6, r2
 8007aae:	4699      	mov	r9, r3
 8007ab0:	688a      	ldr	r2, [r1, #8]
 8007ab2:	690b      	ldr	r3, [r1, #16]
 8007ab4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	bfb8      	it	lt
 8007abc:	4613      	movlt	r3, r2
 8007abe:	6033      	str	r3, [r6, #0]
 8007ac0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ac4:	4607      	mov	r7, r0
 8007ac6:	460c      	mov	r4, r1
 8007ac8:	b10a      	cbz	r2, 8007ace <_printf_common+0x26>
 8007aca:	3301      	adds	r3, #1
 8007acc:	6033      	str	r3, [r6, #0]
 8007ace:	6823      	ldr	r3, [r4, #0]
 8007ad0:	0699      	lsls	r1, r3, #26
 8007ad2:	bf42      	ittt	mi
 8007ad4:	6833      	ldrmi	r3, [r6, #0]
 8007ad6:	3302      	addmi	r3, #2
 8007ad8:	6033      	strmi	r3, [r6, #0]
 8007ada:	6825      	ldr	r5, [r4, #0]
 8007adc:	f015 0506 	ands.w	r5, r5, #6
 8007ae0:	d106      	bne.n	8007af0 <_printf_common+0x48>
 8007ae2:	f104 0a19 	add.w	sl, r4, #25
 8007ae6:	68e3      	ldr	r3, [r4, #12]
 8007ae8:	6832      	ldr	r2, [r6, #0]
 8007aea:	1a9b      	subs	r3, r3, r2
 8007aec:	42ab      	cmp	r3, r5
 8007aee:	dc26      	bgt.n	8007b3e <_printf_common+0x96>
 8007af0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007af4:	1e13      	subs	r3, r2, #0
 8007af6:	6822      	ldr	r2, [r4, #0]
 8007af8:	bf18      	it	ne
 8007afa:	2301      	movne	r3, #1
 8007afc:	0692      	lsls	r2, r2, #26
 8007afe:	d42b      	bmi.n	8007b58 <_printf_common+0xb0>
 8007b00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b04:	4649      	mov	r1, r9
 8007b06:	4638      	mov	r0, r7
 8007b08:	47c0      	blx	r8
 8007b0a:	3001      	adds	r0, #1
 8007b0c:	d01e      	beq.n	8007b4c <_printf_common+0xa4>
 8007b0e:	6823      	ldr	r3, [r4, #0]
 8007b10:	68e5      	ldr	r5, [r4, #12]
 8007b12:	6832      	ldr	r2, [r6, #0]
 8007b14:	f003 0306 	and.w	r3, r3, #6
 8007b18:	2b04      	cmp	r3, #4
 8007b1a:	bf08      	it	eq
 8007b1c:	1aad      	subeq	r5, r5, r2
 8007b1e:	68a3      	ldr	r3, [r4, #8]
 8007b20:	6922      	ldr	r2, [r4, #16]
 8007b22:	bf0c      	ite	eq
 8007b24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b28:	2500      	movne	r5, #0
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	bfc4      	itt	gt
 8007b2e:	1a9b      	subgt	r3, r3, r2
 8007b30:	18ed      	addgt	r5, r5, r3
 8007b32:	2600      	movs	r6, #0
 8007b34:	341a      	adds	r4, #26
 8007b36:	42b5      	cmp	r5, r6
 8007b38:	d11a      	bne.n	8007b70 <_printf_common+0xc8>
 8007b3a:	2000      	movs	r0, #0
 8007b3c:	e008      	b.n	8007b50 <_printf_common+0xa8>
 8007b3e:	2301      	movs	r3, #1
 8007b40:	4652      	mov	r2, sl
 8007b42:	4649      	mov	r1, r9
 8007b44:	4638      	mov	r0, r7
 8007b46:	47c0      	blx	r8
 8007b48:	3001      	adds	r0, #1
 8007b4a:	d103      	bne.n	8007b54 <_printf_common+0xac>
 8007b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b54:	3501      	adds	r5, #1
 8007b56:	e7c6      	b.n	8007ae6 <_printf_common+0x3e>
 8007b58:	18e1      	adds	r1, r4, r3
 8007b5a:	1c5a      	adds	r2, r3, #1
 8007b5c:	2030      	movs	r0, #48	; 0x30
 8007b5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b62:	4422      	add	r2, r4
 8007b64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b6c:	3302      	adds	r3, #2
 8007b6e:	e7c7      	b.n	8007b00 <_printf_common+0x58>
 8007b70:	2301      	movs	r3, #1
 8007b72:	4622      	mov	r2, r4
 8007b74:	4649      	mov	r1, r9
 8007b76:	4638      	mov	r0, r7
 8007b78:	47c0      	blx	r8
 8007b7a:	3001      	adds	r0, #1
 8007b7c:	d0e6      	beq.n	8007b4c <_printf_common+0xa4>
 8007b7e:	3601      	adds	r6, #1
 8007b80:	e7d9      	b.n	8007b36 <_printf_common+0x8e>
	...

08007b84 <_printf_i>:
 8007b84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b88:	7e0f      	ldrb	r7, [r1, #24]
 8007b8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007b8c:	2f78      	cmp	r7, #120	; 0x78
 8007b8e:	4691      	mov	r9, r2
 8007b90:	4680      	mov	r8, r0
 8007b92:	460c      	mov	r4, r1
 8007b94:	469a      	mov	sl, r3
 8007b96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007b9a:	d807      	bhi.n	8007bac <_printf_i+0x28>
 8007b9c:	2f62      	cmp	r7, #98	; 0x62
 8007b9e:	d80a      	bhi.n	8007bb6 <_printf_i+0x32>
 8007ba0:	2f00      	cmp	r7, #0
 8007ba2:	f000 80d8 	beq.w	8007d56 <_printf_i+0x1d2>
 8007ba6:	2f58      	cmp	r7, #88	; 0x58
 8007ba8:	f000 80a3 	beq.w	8007cf2 <_printf_i+0x16e>
 8007bac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007bb4:	e03a      	b.n	8007c2c <_printf_i+0xa8>
 8007bb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007bba:	2b15      	cmp	r3, #21
 8007bbc:	d8f6      	bhi.n	8007bac <_printf_i+0x28>
 8007bbe:	a101      	add	r1, pc, #4	; (adr r1, 8007bc4 <_printf_i+0x40>)
 8007bc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007bc4:	08007c1d 	.word	0x08007c1d
 8007bc8:	08007c31 	.word	0x08007c31
 8007bcc:	08007bad 	.word	0x08007bad
 8007bd0:	08007bad 	.word	0x08007bad
 8007bd4:	08007bad 	.word	0x08007bad
 8007bd8:	08007bad 	.word	0x08007bad
 8007bdc:	08007c31 	.word	0x08007c31
 8007be0:	08007bad 	.word	0x08007bad
 8007be4:	08007bad 	.word	0x08007bad
 8007be8:	08007bad 	.word	0x08007bad
 8007bec:	08007bad 	.word	0x08007bad
 8007bf0:	08007d3d 	.word	0x08007d3d
 8007bf4:	08007c61 	.word	0x08007c61
 8007bf8:	08007d1f 	.word	0x08007d1f
 8007bfc:	08007bad 	.word	0x08007bad
 8007c00:	08007bad 	.word	0x08007bad
 8007c04:	08007d5f 	.word	0x08007d5f
 8007c08:	08007bad 	.word	0x08007bad
 8007c0c:	08007c61 	.word	0x08007c61
 8007c10:	08007bad 	.word	0x08007bad
 8007c14:	08007bad 	.word	0x08007bad
 8007c18:	08007d27 	.word	0x08007d27
 8007c1c:	682b      	ldr	r3, [r5, #0]
 8007c1e:	1d1a      	adds	r2, r3, #4
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	602a      	str	r2, [r5, #0]
 8007c24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	e0a3      	b.n	8007d78 <_printf_i+0x1f4>
 8007c30:	6820      	ldr	r0, [r4, #0]
 8007c32:	6829      	ldr	r1, [r5, #0]
 8007c34:	0606      	lsls	r6, r0, #24
 8007c36:	f101 0304 	add.w	r3, r1, #4
 8007c3a:	d50a      	bpl.n	8007c52 <_printf_i+0xce>
 8007c3c:	680e      	ldr	r6, [r1, #0]
 8007c3e:	602b      	str	r3, [r5, #0]
 8007c40:	2e00      	cmp	r6, #0
 8007c42:	da03      	bge.n	8007c4c <_printf_i+0xc8>
 8007c44:	232d      	movs	r3, #45	; 0x2d
 8007c46:	4276      	negs	r6, r6
 8007c48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c4c:	485e      	ldr	r0, [pc, #376]	; (8007dc8 <_printf_i+0x244>)
 8007c4e:	230a      	movs	r3, #10
 8007c50:	e019      	b.n	8007c86 <_printf_i+0x102>
 8007c52:	680e      	ldr	r6, [r1, #0]
 8007c54:	602b      	str	r3, [r5, #0]
 8007c56:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007c5a:	bf18      	it	ne
 8007c5c:	b236      	sxthne	r6, r6
 8007c5e:	e7ef      	b.n	8007c40 <_printf_i+0xbc>
 8007c60:	682b      	ldr	r3, [r5, #0]
 8007c62:	6820      	ldr	r0, [r4, #0]
 8007c64:	1d19      	adds	r1, r3, #4
 8007c66:	6029      	str	r1, [r5, #0]
 8007c68:	0601      	lsls	r1, r0, #24
 8007c6a:	d501      	bpl.n	8007c70 <_printf_i+0xec>
 8007c6c:	681e      	ldr	r6, [r3, #0]
 8007c6e:	e002      	b.n	8007c76 <_printf_i+0xf2>
 8007c70:	0646      	lsls	r6, r0, #25
 8007c72:	d5fb      	bpl.n	8007c6c <_printf_i+0xe8>
 8007c74:	881e      	ldrh	r6, [r3, #0]
 8007c76:	4854      	ldr	r0, [pc, #336]	; (8007dc8 <_printf_i+0x244>)
 8007c78:	2f6f      	cmp	r7, #111	; 0x6f
 8007c7a:	bf0c      	ite	eq
 8007c7c:	2308      	moveq	r3, #8
 8007c7e:	230a      	movne	r3, #10
 8007c80:	2100      	movs	r1, #0
 8007c82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c86:	6865      	ldr	r5, [r4, #4]
 8007c88:	60a5      	str	r5, [r4, #8]
 8007c8a:	2d00      	cmp	r5, #0
 8007c8c:	bfa2      	ittt	ge
 8007c8e:	6821      	ldrge	r1, [r4, #0]
 8007c90:	f021 0104 	bicge.w	r1, r1, #4
 8007c94:	6021      	strge	r1, [r4, #0]
 8007c96:	b90e      	cbnz	r6, 8007c9c <_printf_i+0x118>
 8007c98:	2d00      	cmp	r5, #0
 8007c9a:	d04d      	beq.n	8007d38 <_printf_i+0x1b4>
 8007c9c:	4615      	mov	r5, r2
 8007c9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007ca2:	fb03 6711 	mls	r7, r3, r1, r6
 8007ca6:	5dc7      	ldrb	r7, [r0, r7]
 8007ca8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007cac:	4637      	mov	r7, r6
 8007cae:	42bb      	cmp	r3, r7
 8007cb0:	460e      	mov	r6, r1
 8007cb2:	d9f4      	bls.n	8007c9e <_printf_i+0x11a>
 8007cb4:	2b08      	cmp	r3, #8
 8007cb6:	d10b      	bne.n	8007cd0 <_printf_i+0x14c>
 8007cb8:	6823      	ldr	r3, [r4, #0]
 8007cba:	07de      	lsls	r6, r3, #31
 8007cbc:	d508      	bpl.n	8007cd0 <_printf_i+0x14c>
 8007cbe:	6923      	ldr	r3, [r4, #16]
 8007cc0:	6861      	ldr	r1, [r4, #4]
 8007cc2:	4299      	cmp	r1, r3
 8007cc4:	bfde      	ittt	le
 8007cc6:	2330      	movle	r3, #48	; 0x30
 8007cc8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ccc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007cd0:	1b52      	subs	r2, r2, r5
 8007cd2:	6122      	str	r2, [r4, #16]
 8007cd4:	f8cd a000 	str.w	sl, [sp]
 8007cd8:	464b      	mov	r3, r9
 8007cda:	aa03      	add	r2, sp, #12
 8007cdc:	4621      	mov	r1, r4
 8007cde:	4640      	mov	r0, r8
 8007ce0:	f7ff fee2 	bl	8007aa8 <_printf_common>
 8007ce4:	3001      	adds	r0, #1
 8007ce6:	d14c      	bne.n	8007d82 <_printf_i+0x1fe>
 8007ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8007cec:	b004      	add	sp, #16
 8007cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cf2:	4835      	ldr	r0, [pc, #212]	; (8007dc8 <_printf_i+0x244>)
 8007cf4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007cf8:	6829      	ldr	r1, [r5, #0]
 8007cfa:	6823      	ldr	r3, [r4, #0]
 8007cfc:	f851 6b04 	ldr.w	r6, [r1], #4
 8007d00:	6029      	str	r1, [r5, #0]
 8007d02:	061d      	lsls	r5, r3, #24
 8007d04:	d514      	bpl.n	8007d30 <_printf_i+0x1ac>
 8007d06:	07df      	lsls	r7, r3, #31
 8007d08:	bf44      	itt	mi
 8007d0a:	f043 0320 	orrmi.w	r3, r3, #32
 8007d0e:	6023      	strmi	r3, [r4, #0]
 8007d10:	b91e      	cbnz	r6, 8007d1a <_printf_i+0x196>
 8007d12:	6823      	ldr	r3, [r4, #0]
 8007d14:	f023 0320 	bic.w	r3, r3, #32
 8007d18:	6023      	str	r3, [r4, #0]
 8007d1a:	2310      	movs	r3, #16
 8007d1c:	e7b0      	b.n	8007c80 <_printf_i+0xfc>
 8007d1e:	6823      	ldr	r3, [r4, #0]
 8007d20:	f043 0320 	orr.w	r3, r3, #32
 8007d24:	6023      	str	r3, [r4, #0]
 8007d26:	2378      	movs	r3, #120	; 0x78
 8007d28:	4828      	ldr	r0, [pc, #160]	; (8007dcc <_printf_i+0x248>)
 8007d2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007d2e:	e7e3      	b.n	8007cf8 <_printf_i+0x174>
 8007d30:	0659      	lsls	r1, r3, #25
 8007d32:	bf48      	it	mi
 8007d34:	b2b6      	uxthmi	r6, r6
 8007d36:	e7e6      	b.n	8007d06 <_printf_i+0x182>
 8007d38:	4615      	mov	r5, r2
 8007d3a:	e7bb      	b.n	8007cb4 <_printf_i+0x130>
 8007d3c:	682b      	ldr	r3, [r5, #0]
 8007d3e:	6826      	ldr	r6, [r4, #0]
 8007d40:	6961      	ldr	r1, [r4, #20]
 8007d42:	1d18      	adds	r0, r3, #4
 8007d44:	6028      	str	r0, [r5, #0]
 8007d46:	0635      	lsls	r5, r6, #24
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	d501      	bpl.n	8007d50 <_printf_i+0x1cc>
 8007d4c:	6019      	str	r1, [r3, #0]
 8007d4e:	e002      	b.n	8007d56 <_printf_i+0x1d2>
 8007d50:	0670      	lsls	r0, r6, #25
 8007d52:	d5fb      	bpl.n	8007d4c <_printf_i+0x1c8>
 8007d54:	8019      	strh	r1, [r3, #0]
 8007d56:	2300      	movs	r3, #0
 8007d58:	6123      	str	r3, [r4, #16]
 8007d5a:	4615      	mov	r5, r2
 8007d5c:	e7ba      	b.n	8007cd4 <_printf_i+0x150>
 8007d5e:	682b      	ldr	r3, [r5, #0]
 8007d60:	1d1a      	adds	r2, r3, #4
 8007d62:	602a      	str	r2, [r5, #0]
 8007d64:	681d      	ldr	r5, [r3, #0]
 8007d66:	6862      	ldr	r2, [r4, #4]
 8007d68:	2100      	movs	r1, #0
 8007d6a:	4628      	mov	r0, r5
 8007d6c:	f7f8 fa58 	bl	8000220 <memchr>
 8007d70:	b108      	cbz	r0, 8007d76 <_printf_i+0x1f2>
 8007d72:	1b40      	subs	r0, r0, r5
 8007d74:	6060      	str	r0, [r4, #4]
 8007d76:	6863      	ldr	r3, [r4, #4]
 8007d78:	6123      	str	r3, [r4, #16]
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d80:	e7a8      	b.n	8007cd4 <_printf_i+0x150>
 8007d82:	6923      	ldr	r3, [r4, #16]
 8007d84:	462a      	mov	r2, r5
 8007d86:	4649      	mov	r1, r9
 8007d88:	4640      	mov	r0, r8
 8007d8a:	47d0      	blx	sl
 8007d8c:	3001      	adds	r0, #1
 8007d8e:	d0ab      	beq.n	8007ce8 <_printf_i+0x164>
 8007d90:	6823      	ldr	r3, [r4, #0]
 8007d92:	079b      	lsls	r3, r3, #30
 8007d94:	d413      	bmi.n	8007dbe <_printf_i+0x23a>
 8007d96:	68e0      	ldr	r0, [r4, #12]
 8007d98:	9b03      	ldr	r3, [sp, #12]
 8007d9a:	4298      	cmp	r0, r3
 8007d9c:	bfb8      	it	lt
 8007d9e:	4618      	movlt	r0, r3
 8007da0:	e7a4      	b.n	8007cec <_printf_i+0x168>
 8007da2:	2301      	movs	r3, #1
 8007da4:	4632      	mov	r2, r6
 8007da6:	4649      	mov	r1, r9
 8007da8:	4640      	mov	r0, r8
 8007daa:	47d0      	blx	sl
 8007dac:	3001      	adds	r0, #1
 8007dae:	d09b      	beq.n	8007ce8 <_printf_i+0x164>
 8007db0:	3501      	adds	r5, #1
 8007db2:	68e3      	ldr	r3, [r4, #12]
 8007db4:	9903      	ldr	r1, [sp, #12]
 8007db6:	1a5b      	subs	r3, r3, r1
 8007db8:	42ab      	cmp	r3, r5
 8007dba:	dcf2      	bgt.n	8007da2 <_printf_i+0x21e>
 8007dbc:	e7eb      	b.n	8007d96 <_printf_i+0x212>
 8007dbe:	2500      	movs	r5, #0
 8007dc0:	f104 0619 	add.w	r6, r4, #25
 8007dc4:	e7f5      	b.n	8007db2 <_printf_i+0x22e>
 8007dc6:	bf00      	nop
 8007dc8:	0800c734 	.word	0x0800c734
 8007dcc:	0800c745 	.word	0x0800c745

08007dd0 <_scanf_float>:
 8007dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dd4:	b087      	sub	sp, #28
 8007dd6:	4617      	mov	r7, r2
 8007dd8:	9303      	str	r3, [sp, #12]
 8007dda:	688b      	ldr	r3, [r1, #8]
 8007ddc:	1e5a      	subs	r2, r3, #1
 8007dde:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007de2:	bf83      	ittte	hi
 8007de4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007de8:	195b      	addhi	r3, r3, r5
 8007dea:	9302      	strhi	r3, [sp, #8]
 8007dec:	2300      	movls	r3, #0
 8007dee:	bf86      	itte	hi
 8007df0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007df4:	608b      	strhi	r3, [r1, #8]
 8007df6:	9302      	strls	r3, [sp, #8]
 8007df8:	680b      	ldr	r3, [r1, #0]
 8007dfa:	468b      	mov	fp, r1
 8007dfc:	2500      	movs	r5, #0
 8007dfe:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007e02:	f84b 3b1c 	str.w	r3, [fp], #28
 8007e06:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007e0a:	4680      	mov	r8, r0
 8007e0c:	460c      	mov	r4, r1
 8007e0e:	465e      	mov	r6, fp
 8007e10:	46aa      	mov	sl, r5
 8007e12:	46a9      	mov	r9, r5
 8007e14:	9501      	str	r5, [sp, #4]
 8007e16:	68a2      	ldr	r2, [r4, #8]
 8007e18:	b152      	cbz	r2, 8007e30 <_scanf_float+0x60>
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	2b4e      	cmp	r3, #78	; 0x4e
 8007e20:	d864      	bhi.n	8007eec <_scanf_float+0x11c>
 8007e22:	2b40      	cmp	r3, #64	; 0x40
 8007e24:	d83c      	bhi.n	8007ea0 <_scanf_float+0xd0>
 8007e26:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007e2a:	b2c8      	uxtb	r0, r1
 8007e2c:	280e      	cmp	r0, #14
 8007e2e:	d93a      	bls.n	8007ea6 <_scanf_float+0xd6>
 8007e30:	f1b9 0f00 	cmp.w	r9, #0
 8007e34:	d003      	beq.n	8007e3e <_scanf_float+0x6e>
 8007e36:	6823      	ldr	r3, [r4, #0]
 8007e38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e3c:	6023      	str	r3, [r4, #0]
 8007e3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e42:	f1ba 0f01 	cmp.w	sl, #1
 8007e46:	f200 8113 	bhi.w	8008070 <_scanf_float+0x2a0>
 8007e4a:	455e      	cmp	r6, fp
 8007e4c:	f200 8105 	bhi.w	800805a <_scanf_float+0x28a>
 8007e50:	2501      	movs	r5, #1
 8007e52:	4628      	mov	r0, r5
 8007e54:	b007      	add	sp, #28
 8007e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e5a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007e5e:	2a0d      	cmp	r2, #13
 8007e60:	d8e6      	bhi.n	8007e30 <_scanf_float+0x60>
 8007e62:	a101      	add	r1, pc, #4	; (adr r1, 8007e68 <_scanf_float+0x98>)
 8007e64:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007e68:	08007fa7 	.word	0x08007fa7
 8007e6c:	08007e31 	.word	0x08007e31
 8007e70:	08007e31 	.word	0x08007e31
 8007e74:	08007e31 	.word	0x08007e31
 8007e78:	08008007 	.word	0x08008007
 8007e7c:	08007fdf 	.word	0x08007fdf
 8007e80:	08007e31 	.word	0x08007e31
 8007e84:	08007e31 	.word	0x08007e31
 8007e88:	08007fb5 	.word	0x08007fb5
 8007e8c:	08007e31 	.word	0x08007e31
 8007e90:	08007e31 	.word	0x08007e31
 8007e94:	08007e31 	.word	0x08007e31
 8007e98:	08007e31 	.word	0x08007e31
 8007e9c:	08007f6d 	.word	0x08007f6d
 8007ea0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007ea4:	e7db      	b.n	8007e5e <_scanf_float+0x8e>
 8007ea6:	290e      	cmp	r1, #14
 8007ea8:	d8c2      	bhi.n	8007e30 <_scanf_float+0x60>
 8007eaa:	a001      	add	r0, pc, #4	; (adr r0, 8007eb0 <_scanf_float+0xe0>)
 8007eac:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007eb0:	08007f5f 	.word	0x08007f5f
 8007eb4:	08007e31 	.word	0x08007e31
 8007eb8:	08007f5f 	.word	0x08007f5f
 8007ebc:	08007ff3 	.word	0x08007ff3
 8007ec0:	08007e31 	.word	0x08007e31
 8007ec4:	08007f0d 	.word	0x08007f0d
 8007ec8:	08007f49 	.word	0x08007f49
 8007ecc:	08007f49 	.word	0x08007f49
 8007ed0:	08007f49 	.word	0x08007f49
 8007ed4:	08007f49 	.word	0x08007f49
 8007ed8:	08007f49 	.word	0x08007f49
 8007edc:	08007f49 	.word	0x08007f49
 8007ee0:	08007f49 	.word	0x08007f49
 8007ee4:	08007f49 	.word	0x08007f49
 8007ee8:	08007f49 	.word	0x08007f49
 8007eec:	2b6e      	cmp	r3, #110	; 0x6e
 8007eee:	d809      	bhi.n	8007f04 <_scanf_float+0x134>
 8007ef0:	2b60      	cmp	r3, #96	; 0x60
 8007ef2:	d8b2      	bhi.n	8007e5a <_scanf_float+0x8a>
 8007ef4:	2b54      	cmp	r3, #84	; 0x54
 8007ef6:	d077      	beq.n	8007fe8 <_scanf_float+0x218>
 8007ef8:	2b59      	cmp	r3, #89	; 0x59
 8007efa:	d199      	bne.n	8007e30 <_scanf_float+0x60>
 8007efc:	2d07      	cmp	r5, #7
 8007efe:	d197      	bne.n	8007e30 <_scanf_float+0x60>
 8007f00:	2508      	movs	r5, #8
 8007f02:	e029      	b.n	8007f58 <_scanf_float+0x188>
 8007f04:	2b74      	cmp	r3, #116	; 0x74
 8007f06:	d06f      	beq.n	8007fe8 <_scanf_float+0x218>
 8007f08:	2b79      	cmp	r3, #121	; 0x79
 8007f0a:	e7f6      	b.n	8007efa <_scanf_float+0x12a>
 8007f0c:	6821      	ldr	r1, [r4, #0]
 8007f0e:	05c8      	lsls	r0, r1, #23
 8007f10:	d51a      	bpl.n	8007f48 <_scanf_float+0x178>
 8007f12:	9b02      	ldr	r3, [sp, #8]
 8007f14:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007f18:	6021      	str	r1, [r4, #0]
 8007f1a:	f109 0901 	add.w	r9, r9, #1
 8007f1e:	b11b      	cbz	r3, 8007f28 <_scanf_float+0x158>
 8007f20:	3b01      	subs	r3, #1
 8007f22:	3201      	adds	r2, #1
 8007f24:	9302      	str	r3, [sp, #8]
 8007f26:	60a2      	str	r2, [r4, #8]
 8007f28:	68a3      	ldr	r3, [r4, #8]
 8007f2a:	3b01      	subs	r3, #1
 8007f2c:	60a3      	str	r3, [r4, #8]
 8007f2e:	6923      	ldr	r3, [r4, #16]
 8007f30:	3301      	adds	r3, #1
 8007f32:	6123      	str	r3, [r4, #16]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	3b01      	subs	r3, #1
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	607b      	str	r3, [r7, #4]
 8007f3c:	f340 8084 	ble.w	8008048 <_scanf_float+0x278>
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	3301      	adds	r3, #1
 8007f44:	603b      	str	r3, [r7, #0]
 8007f46:	e766      	b.n	8007e16 <_scanf_float+0x46>
 8007f48:	eb1a 0f05 	cmn.w	sl, r5
 8007f4c:	f47f af70 	bne.w	8007e30 <_scanf_float+0x60>
 8007f50:	6822      	ldr	r2, [r4, #0]
 8007f52:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007f56:	6022      	str	r2, [r4, #0]
 8007f58:	f806 3b01 	strb.w	r3, [r6], #1
 8007f5c:	e7e4      	b.n	8007f28 <_scanf_float+0x158>
 8007f5e:	6822      	ldr	r2, [r4, #0]
 8007f60:	0610      	lsls	r0, r2, #24
 8007f62:	f57f af65 	bpl.w	8007e30 <_scanf_float+0x60>
 8007f66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f6a:	e7f4      	b.n	8007f56 <_scanf_float+0x186>
 8007f6c:	f1ba 0f00 	cmp.w	sl, #0
 8007f70:	d10e      	bne.n	8007f90 <_scanf_float+0x1c0>
 8007f72:	f1b9 0f00 	cmp.w	r9, #0
 8007f76:	d10e      	bne.n	8007f96 <_scanf_float+0x1c6>
 8007f78:	6822      	ldr	r2, [r4, #0]
 8007f7a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007f7e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007f82:	d108      	bne.n	8007f96 <_scanf_float+0x1c6>
 8007f84:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007f88:	6022      	str	r2, [r4, #0]
 8007f8a:	f04f 0a01 	mov.w	sl, #1
 8007f8e:	e7e3      	b.n	8007f58 <_scanf_float+0x188>
 8007f90:	f1ba 0f02 	cmp.w	sl, #2
 8007f94:	d055      	beq.n	8008042 <_scanf_float+0x272>
 8007f96:	2d01      	cmp	r5, #1
 8007f98:	d002      	beq.n	8007fa0 <_scanf_float+0x1d0>
 8007f9a:	2d04      	cmp	r5, #4
 8007f9c:	f47f af48 	bne.w	8007e30 <_scanf_float+0x60>
 8007fa0:	3501      	adds	r5, #1
 8007fa2:	b2ed      	uxtb	r5, r5
 8007fa4:	e7d8      	b.n	8007f58 <_scanf_float+0x188>
 8007fa6:	f1ba 0f01 	cmp.w	sl, #1
 8007faa:	f47f af41 	bne.w	8007e30 <_scanf_float+0x60>
 8007fae:	f04f 0a02 	mov.w	sl, #2
 8007fb2:	e7d1      	b.n	8007f58 <_scanf_float+0x188>
 8007fb4:	b97d      	cbnz	r5, 8007fd6 <_scanf_float+0x206>
 8007fb6:	f1b9 0f00 	cmp.w	r9, #0
 8007fba:	f47f af3c 	bne.w	8007e36 <_scanf_float+0x66>
 8007fbe:	6822      	ldr	r2, [r4, #0]
 8007fc0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007fc4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007fc8:	f47f af39 	bne.w	8007e3e <_scanf_float+0x6e>
 8007fcc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007fd0:	6022      	str	r2, [r4, #0]
 8007fd2:	2501      	movs	r5, #1
 8007fd4:	e7c0      	b.n	8007f58 <_scanf_float+0x188>
 8007fd6:	2d03      	cmp	r5, #3
 8007fd8:	d0e2      	beq.n	8007fa0 <_scanf_float+0x1d0>
 8007fda:	2d05      	cmp	r5, #5
 8007fdc:	e7de      	b.n	8007f9c <_scanf_float+0x1cc>
 8007fde:	2d02      	cmp	r5, #2
 8007fe0:	f47f af26 	bne.w	8007e30 <_scanf_float+0x60>
 8007fe4:	2503      	movs	r5, #3
 8007fe6:	e7b7      	b.n	8007f58 <_scanf_float+0x188>
 8007fe8:	2d06      	cmp	r5, #6
 8007fea:	f47f af21 	bne.w	8007e30 <_scanf_float+0x60>
 8007fee:	2507      	movs	r5, #7
 8007ff0:	e7b2      	b.n	8007f58 <_scanf_float+0x188>
 8007ff2:	6822      	ldr	r2, [r4, #0]
 8007ff4:	0591      	lsls	r1, r2, #22
 8007ff6:	f57f af1b 	bpl.w	8007e30 <_scanf_float+0x60>
 8007ffa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007ffe:	6022      	str	r2, [r4, #0]
 8008000:	f8cd 9004 	str.w	r9, [sp, #4]
 8008004:	e7a8      	b.n	8007f58 <_scanf_float+0x188>
 8008006:	6822      	ldr	r2, [r4, #0]
 8008008:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800800c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008010:	d006      	beq.n	8008020 <_scanf_float+0x250>
 8008012:	0550      	lsls	r0, r2, #21
 8008014:	f57f af0c 	bpl.w	8007e30 <_scanf_float+0x60>
 8008018:	f1b9 0f00 	cmp.w	r9, #0
 800801c:	f43f af0f 	beq.w	8007e3e <_scanf_float+0x6e>
 8008020:	0591      	lsls	r1, r2, #22
 8008022:	bf58      	it	pl
 8008024:	9901      	ldrpl	r1, [sp, #4]
 8008026:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800802a:	bf58      	it	pl
 800802c:	eba9 0101 	subpl.w	r1, r9, r1
 8008030:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008034:	bf58      	it	pl
 8008036:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800803a:	6022      	str	r2, [r4, #0]
 800803c:	f04f 0900 	mov.w	r9, #0
 8008040:	e78a      	b.n	8007f58 <_scanf_float+0x188>
 8008042:	f04f 0a03 	mov.w	sl, #3
 8008046:	e787      	b.n	8007f58 <_scanf_float+0x188>
 8008048:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800804c:	4639      	mov	r1, r7
 800804e:	4640      	mov	r0, r8
 8008050:	4798      	blx	r3
 8008052:	2800      	cmp	r0, #0
 8008054:	f43f aedf 	beq.w	8007e16 <_scanf_float+0x46>
 8008058:	e6ea      	b.n	8007e30 <_scanf_float+0x60>
 800805a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800805e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008062:	463a      	mov	r2, r7
 8008064:	4640      	mov	r0, r8
 8008066:	4798      	blx	r3
 8008068:	6923      	ldr	r3, [r4, #16]
 800806a:	3b01      	subs	r3, #1
 800806c:	6123      	str	r3, [r4, #16]
 800806e:	e6ec      	b.n	8007e4a <_scanf_float+0x7a>
 8008070:	1e6b      	subs	r3, r5, #1
 8008072:	2b06      	cmp	r3, #6
 8008074:	d825      	bhi.n	80080c2 <_scanf_float+0x2f2>
 8008076:	2d02      	cmp	r5, #2
 8008078:	d836      	bhi.n	80080e8 <_scanf_float+0x318>
 800807a:	455e      	cmp	r6, fp
 800807c:	f67f aee8 	bls.w	8007e50 <_scanf_float+0x80>
 8008080:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008084:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008088:	463a      	mov	r2, r7
 800808a:	4640      	mov	r0, r8
 800808c:	4798      	blx	r3
 800808e:	6923      	ldr	r3, [r4, #16]
 8008090:	3b01      	subs	r3, #1
 8008092:	6123      	str	r3, [r4, #16]
 8008094:	e7f1      	b.n	800807a <_scanf_float+0x2aa>
 8008096:	9802      	ldr	r0, [sp, #8]
 8008098:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800809c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80080a0:	9002      	str	r0, [sp, #8]
 80080a2:	463a      	mov	r2, r7
 80080a4:	4640      	mov	r0, r8
 80080a6:	4798      	blx	r3
 80080a8:	6923      	ldr	r3, [r4, #16]
 80080aa:	3b01      	subs	r3, #1
 80080ac:	6123      	str	r3, [r4, #16]
 80080ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80080b2:	fa5f fa8a 	uxtb.w	sl, sl
 80080b6:	f1ba 0f02 	cmp.w	sl, #2
 80080ba:	d1ec      	bne.n	8008096 <_scanf_float+0x2c6>
 80080bc:	3d03      	subs	r5, #3
 80080be:	b2ed      	uxtb	r5, r5
 80080c0:	1b76      	subs	r6, r6, r5
 80080c2:	6823      	ldr	r3, [r4, #0]
 80080c4:	05da      	lsls	r2, r3, #23
 80080c6:	d52f      	bpl.n	8008128 <_scanf_float+0x358>
 80080c8:	055b      	lsls	r3, r3, #21
 80080ca:	d510      	bpl.n	80080ee <_scanf_float+0x31e>
 80080cc:	455e      	cmp	r6, fp
 80080ce:	f67f aebf 	bls.w	8007e50 <_scanf_float+0x80>
 80080d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80080d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80080da:	463a      	mov	r2, r7
 80080dc:	4640      	mov	r0, r8
 80080de:	4798      	blx	r3
 80080e0:	6923      	ldr	r3, [r4, #16]
 80080e2:	3b01      	subs	r3, #1
 80080e4:	6123      	str	r3, [r4, #16]
 80080e6:	e7f1      	b.n	80080cc <_scanf_float+0x2fc>
 80080e8:	46aa      	mov	sl, r5
 80080ea:	9602      	str	r6, [sp, #8]
 80080ec:	e7df      	b.n	80080ae <_scanf_float+0x2de>
 80080ee:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80080f2:	6923      	ldr	r3, [r4, #16]
 80080f4:	2965      	cmp	r1, #101	; 0x65
 80080f6:	f103 33ff 	add.w	r3, r3, #4294967295
 80080fa:	f106 35ff 	add.w	r5, r6, #4294967295
 80080fe:	6123      	str	r3, [r4, #16]
 8008100:	d00c      	beq.n	800811c <_scanf_float+0x34c>
 8008102:	2945      	cmp	r1, #69	; 0x45
 8008104:	d00a      	beq.n	800811c <_scanf_float+0x34c>
 8008106:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800810a:	463a      	mov	r2, r7
 800810c:	4640      	mov	r0, r8
 800810e:	4798      	blx	r3
 8008110:	6923      	ldr	r3, [r4, #16]
 8008112:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008116:	3b01      	subs	r3, #1
 8008118:	1eb5      	subs	r5, r6, #2
 800811a:	6123      	str	r3, [r4, #16]
 800811c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008120:	463a      	mov	r2, r7
 8008122:	4640      	mov	r0, r8
 8008124:	4798      	blx	r3
 8008126:	462e      	mov	r6, r5
 8008128:	6825      	ldr	r5, [r4, #0]
 800812a:	f015 0510 	ands.w	r5, r5, #16
 800812e:	d159      	bne.n	80081e4 <_scanf_float+0x414>
 8008130:	7035      	strb	r5, [r6, #0]
 8008132:	6823      	ldr	r3, [r4, #0]
 8008134:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800813c:	d11b      	bne.n	8008176 <_scanf_float+0x3a6>
 800813e:	9b01      	ldr	r3, [sp, #4]
 8008140:	454b      	cmp	r3, r9
 8008142:	eba3 0209 	sub.w	r2, r3, r9
 8008146:	d123      	bne.n	8008190 <_scanf_float+0x3c0>
 8008148:	2200      	movs	r2, #0
 800814a:	4659      	mov	r1, fp
 800814c:	4640      	mov	r0, r8
 800814e:	f000 ff3d 	bl	8008fcc <_strtod_r>
 8008152:	6822      	ldr	r2, [r4, #0]
 8008154:	9b03      	ldr	r3, [sp, #12]
 8008156:	f012 0f02 	tst.w	r2, #2
 800815a:	ec57 6b10 	vmov	r6, r7, d0
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	d021      	beq.n	80081a6 <_scanf_float+0x3d6>
 8008162:	9903      	ldr	r1, [sp, #12]
 8008164:	1d1a      	adds	r2, r3, #4
 8008166:	600a      	str	r2, [r1, #0]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	e9c3 6700 	strd	r6, r7, [r3]
 800816e:	68e3      	ldr	r3, [r4, #12]
 8008170:	3301      	adds	r3, #1
 8008172:	60e3      	str	r3, [r4, #12]
 8008174:	e66d      	b.n	8007e52 <_scanf_float+0x82>
 8008176:	9b04      	ldr	r3, [sp, #16]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d0e5      	beq.n	8008148 <_scanf_float+0x378>
 800817c:	9905      	ldr	r1, [sp, #20]
 800817e:	230a      	movs	r3, #10
 8008180:	462a      	mov	r2, r5
 8008182:	3101      	adds	r1, #1
 8008184:	4640      	mov	r0, r8
 8008186:	f000 ffa9 	bl	80090dc <_strtol_r>
 800818a:	9b04      	ldr	r3, [sp, #16]
 800818c:	9e05      	ldr	r6, [sp, #20]
 800818e:	1ac2      	subs	r2, r0, r3
 8008190:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008194:	429e      	cmp	r6, r3
 8008196:	bf28      	it	cs
 8008198:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800819c:	4912      	ldr	r1, [pc, #72]	; (80081e8 <_scanf_float+0x418>)
 800819e:	4630      	mov	r0, r6
 80081a0:	f000 f860 	bl	8008264 <siprintf>
 80081a4:	e7d0      	b.n	8008148 <_scanf_float+0x378>
 80081a6:	9903      	ldr	r1, [sp, #12]
 80081a8:	f012 0f04 	tst.w	r2, #4
 80081ac:	f103 0204 	add.w	r2, r3, #4
 80081b0:	600a      	str	r2, [r1, #0]
 80081b2:	d1d9      	bne.n	8008168 <_scanf_float+0x398>
 80081b4:	f8d3 8000 	ldr.w	r8, [r3]
 80081b8:	ee10 2a10 	vmov	r2, s0
 80081bc:	ee10 0a10 	vmov	r0, s0
 80081c0:	463b      	mov	r3, r7
 80081c2:	4639      	mov	r1, r7
 80081c4:	f7f8 fcd2 	bl	8000b6c <__aeabi_dcmpun>
 80081c8:	b128      	cbz	r0, 80081d6 <_scanf_float+0x406>
 80081ca:	4808      	ldr	r0, [pc, #32]	; (80081ec <_scanf_float+0x41c>)
 80081cc:	f000 f810 	bl	80081f0 <nanf>
 80081d0:	ed88 0a00 	vstr	s0, [r8]
 80081d4:	e7cb      	b.n	800816e <_scanf_float+0x39e>
 80081d6:	4630      	mov	r0, r6
 80081d8:	4639      	mov	r1, r7
 80081da:	f7f8 fd25 	bl	8000c28 <__aeabi_d2f>
 80081de:	f8c8 0000 	str.w	r0, [r8]
 80081e2:	e7c4      	b.n	800816e <_scanf_float+0x39e>
 80081e4:	2500      	movs	r5, #0
 80081e6:	e634      	b.n	8007e52 <_scanf_float+0x82>
 80081e8:	0800c756 	.word	0x0800c756
 80081ec:	0800cb7b 	.word	0x0800cb7b

080081f0 <nanf>:
 80081f0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80081f8 <nanf+0x8>
 80081f4:	4770      	bx	lr
 80081f6:	bf00      	nop
 80081f8:	7fc00000 	.word	0x7fc00000

080081fc <sniprintf>:
 80081fc:	b40c      	push	{r2, r3}
 80081fe:	b530      	push	{r4, r5, lr}
 8008200:	4b17      	ldr	r3, [pc, #92]	; (8008260 <sniprintf+0x64>)
 8008202:	1e0c      	subs	r4, r1, #0
 8008204:	681d      	ldr	r5, [r3, #0]
 8008206:	b09d      	sub	sp, #116	; 0x74
 8008208:	da08      	bge.n	800821c <sniprintf+0x20>
 800820a:	238b      	movs	r3, #139	; 0x8b
 800820c:	602b      	str	r3, [r5, #0]
 800820e:	f04f 30ff 	mov.w	r0, #4294967295
 8008212:	b01d      	add	sp, #116	; 0x74
 8008214:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008218:	b002      	add	sp, #8
 800821a:	4770      	bx	lr
 800821c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008220:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008224:	bf14      	ite	ne
 8008226:	f104 33ff 	addne.w	r3, r4, #4294967295
 800822a:	4623      	moveq	r3, r4
 800822c:	9304      	str	r3, [sp, #16]
 800822e:	9307      	str	r3, [sp, #28]
 8008230:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008234:	9002      	str	r0, [sp, #8]
 8008236:	9006      	str	r0, [sp, #24]
 8008238:	f8ad 3016 	strh.w	r3, [sp, #22]
 800823c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800823e:	ab21      	add	r3, sp, #132	; 0x84
 8008240:	a902      	add	r1, sp, #8
 8008242:	4628      	mov	r0, r5
 8008244:	9301      	str	r3, [sp, #4]
 8008246:	f002 ffab 	bl	800b1a0 <_svfiprintf_r>
 800824a:	1c43      	adds	r3, r0, #1
 800824c:	bfbc      	itt	lt
 800824e:	238b      	movlt	r3, #139	; 0x8b
 8008250:	602b      	strlt	r3, [r5, #0]
 8008252:	2c00      	cmp	r4, #0
 8008254:	d0dd      	beq.n	8008212 <sniprintf+0x16>
 8008256:	9b02      	ldr	r3, [sp, #8]
 8008258:	2200      	movs	r2, #0
 800825a:	701a      	strb	r2, [r3, #0]
 800825c:	e7d9      	b.n	8008212 <sniprintf+0x16>
 800825e:	bf00      	nop
 8008260:	2000000c 	.word	0x2000000c

08008264 <siprintf>:
 8008264:	b40e      	push	{r1, r2, r3}
 8008266:	b500      	push	{lr}
 8008268:	b09c      	sub	sp, #112	; 0x70
 800826a:	ab1d      	add	r3, sp, #116	; 0x74
 800826c:	9002      	str	r0, [sp, #8]
 800826e:	9006      	str	r0, [sp, #24]
 8008270:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008274:	4809      	ldr	r0, [pc, #36]	; (800829c <siprintf+0x38>)
 8008276:	9107      	str	r1, [sp, #28]
 8008278:	9104      	str	r1, [sp, #16]
 800827a:	4909      	ldr	r1, [pc, #36]	; (80082a0 <siprintf+0x3c>)
 800827c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008280:	9105      	str	r1, [sp, #20]
 8008282:	6800      	ldr	r0, [r0, #0]
 8008284:	9301      	str	r3, [sp, #4]
 8008286:	a902      	add	r1, sp, #8
 8008288:	f002 ff8a 	bl	800b1a0 <_svfiprintf_r>
 800828c:	9b02      	ldr	r3, [sp, #8]
 800828e:	2200      	movs	r2, #0
 8008290:	701a      	strb	r2, [r3, #0]
 8008292:	b01c      	add	sp, #112	; 0x70
 8008294:	f85d eb04 	ldr.w	lr, [sp], #4
 8008298:	b003      	add	sp, #12
 800829a:	4770      	bx	lr
 800829c:	2000000c 	.word	0x2000000c
 80082a0:	ffff0208 	.word	0xffff0208

080082a4 <siscanf>:
 80082a4:	b40e      	push	{r1, r2, r3}
 80082a6:	b510      	push	{r4, lr}
 80082a8:	b09f      	sub	sp, #124	; 0x7c
 80082aa:	ac21      	add	r4, sp, #132	; 0x84
 80082ac:	f44f 7101 	mov.w	r1, #516	; 0x204
 80082b0:	f854 2b04 	ldr.w	r2, [r4], #4
 80082b4:	9201      	str	r2, [sp, #4]
 80082b6:	f8ad 101c 	strh.w	r1, [sp, #28]
 80082ba:	9004      	str	r0, [sp, #16]
 80082bc:	9008      	str	r0, [sp, #32]
 80082be:	f7f7 ffa7 	bl	8000210 <strlen>
 80082c2:	4b0c      	ldr	r3, [pc, #48]	; (80082f4 <siscanf+0x50>)
 80082c4:	9005      	str	r0, [sp, #20]
 80082c6:	9009      	str	r0, [sp, #36]	; 0x24
 80082c8:	930d      	str	r3, [sp, #52]	; 0x34
 80082ca:	480b      	ldr	r0, [pc, #44]	; (80082f8 <siscanf+0x54>)
 80082cc:	9a01      	ldr	r2, [sp, #4]
 80082ce:	6800      	ldr	r0, [r0, #0]
 80082d0:	9403      	str	r4, [sp, #12]
 80082d2:	2300      	movs	r3, #0
 80082d4:	9311      	str	r3, [sp, #68]	; 0x44
 80082d6:	9316      	str	r3, [sp, #88]	; 0x58
 80082d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80082dc:	f8ad 301e 	strh.w	r3, [sp, #30]
 80082e0:	a904      	add	r1, sp, #16
 80082e2:	4623      	mov	r3, r4
 80082e4:	f003 f8b6 	bl	800b454 <__ssvfiscanf_r>
 80082e8:	b01f      	add	sp, #124	; 0x7c
 80082ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082ee:	b003      	add	sp, #12
 80082f0:	4770      	bx	lr
 80082f2:	bf00      	nop
 80082f4:	0800831f 	.word	0x0800831f
 80082f8:	2000000c 	.word	0x2000000c

080082fc <__sread>:
 80082fc:	b510      	push	{r4, lr}
 80082fe:	460c      	mov	r4, r1
 8008300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008304:	f003 fb70 	bl	800b9e8 <_read_r>
 8008308:	2800      	cmp	r0, #0
 800830a:	bfab      	itete	ge
 800830c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800830e:	89a3      	ldrhlt	r3, [r4, #12]
 8008310:	181b      	addge	r3, r3, r0
 8008312:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008316:	bfac      	ite	ge
 8008318:	6563      	strge	r3, [r4, #84]	; 0x54
 800831a:	81a3      	strhlt	r3, [r4, #12]
 800831c:	bd10      	pop	{r4, pc}

0800831e <__seofread>:
 800831e:	2000      	movs	r0, #0
 8008320:	4770      	bx	lr

08008322 <__swrite>:
 8008322:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008326:	461f      	mov	r7, r3
 8008328:	898b      	ldrh	r3, [r1, #12]
 800832a:	05db      	lsls	r3, r3, #23
 800832c:	4605      	mov	r5, r0
 800832e:	460c      	mov	r4, r1
 8008330:	4616      	mov	r6, r2
 8008332:	d505      	bpl.n	8008340 <__swrite+0x1e>
 8008334:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008338:	2302      	movs	r3, #2
 800833a:	2200      	movs	r2, #0
 800833c:	f002 f8e2 	bl	800a504 <_lseek_r>
 8008340:	89a3      	ldrh	r3, [r4, #12]
 8008342:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008346:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800834a:	81a3      	strh	r3, [r4, #12]
 800834c:	4632      	mov	r2, r6
 800834e:	463b      	mov	r3, r7
 8008350:	4628      	mov	r0, r5
 8008352:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008356:	f000 bec3 	b.w	80090e0 <_write_r>

0800835a <__sseek>:
 800835a:	b510      	push	{r4, lr}
 800835c:	460c      	mov	r4, r1
 800835e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008362:	f002 f8cf 	bl	800a504 <_lseek_r>
 8008366:	1c43      	adds	r3, r0, #1
 8008368:	89a3      	ldrh	r3, [r4, #12]
 800836a:	bf15      	itete	ne
 800836c:	6560      	strne	r0, [r4, #84]	; 0x54
 800836e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008372:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008376:	81a3      	strheq	r3, [r4, #12]
 8008378:	bf18      	it	ne
 800837a:	81a3      	strhne	r3, [r4, #12]
 800837c:	bd10      	pop	{r4, pc}

0800837e <__sclose>:
 800837e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008382:	f000 bebf 	b.w	8009104 <_close_r>

08008386 <sulp>:
 8008386:	b570      	push	{r4, r5, r6, lr}
 8008388:	4604      	mov	r4, r0
 800838a:	460d      	mov	r5, r1
 800838c:	ec45 4b10 	vmov	d0, r4, r5
 8008390:	4616      	mov	r6, r2
 8008392:	f002 fc63 	bl	800ac5c <__ulp>
 8008396:	ec51 0b10 	vmov	r0, r1, d0
 800839a:	b17e      	cbz	r6, 80083bc <sulp+0x36>
 800839c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80083a0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	dd09      	ble.n	80083bc <sulp+0x36>
 80083a8:	051b      	lsls	r3, r3, #20
 80083aa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80083ae:	2400      	movs	r4, #0
 80083b0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80083b4:	4622      	mov	r2, r4
 80083b6:	462b      	mov	r3, r5
 80083b8:	f7f8 f93e 	bl	8000638 <__aeabi_dmul>
 80083bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080083c0 <_strtod_l>:
 80083c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083c4:	ed2d 8b02 	vpush	{d8}
 80083c8:	b09d      	sub	sp, #116	; 0x74
 80083ca:	461f      	mov	r7, r3
 80083cc:	2300      	movs	r3, #0
 80083ce:	9318      	str	r3, [sp, #96]	; 0x60
 80083d0:	4ba2      	ldr	r3, [pc, #648]	; (800865c <_strtod_l+0x29c>)
 80083d2:	9213      	str	r2, [sp, #76]	; 0x4c
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	9305      	str	r3, [sp, #20]
 80083d8:	4604      	mov	r4, r0
 80083da:	4618      	mov	r0, r3
 80083dc:	4688      	mov	r8, r1
 80083de:	f7f7 ff17 	bl	8000210 <strlen>
 80083e2:	f04f 0a00 	mov.w	sl, #0
 80083e6:	4605      	mov	r5, r0
 80083e8:	f04f 0b00 	mov.w	fp, #0
 80083ec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80083f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80083f2:	781a      	ldrb	r2, [r3, #0]
 80083f4:	2a2b      	cmp	r2, #43	; 0x2b
 80083f6:	d04e      	beq.n	8008496 <_strtod_l+0xd6>
 80083f8:	d83b      	bhi.n	8008472 <_strtod_l+0xb2>
 80083fa:	2a0d      	cmp	r2, #13
 80083fc:	d834      	bhi.n	8008468 <_strtod_l+0xa8>
 80083fe:	2a08      	cmp	r2, #8
 8008400:	d834      	bhi.n	800846c <_strtod_l+0xac>
 8008402:	2a00      	cmp	r2, #0
 8008404:	d03e      	beq.n	8008484 <_strtod_l+0xc4>
 8008406:	2300      	movs	r3, #0
 8008408:	930a      	str	r3, [sp, #40]	; 0x28
 800840a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800840c:	7833      	ldrb	r3, [r6, #0]
 800840e:	2b30      	cmp	r3, #48	; 0x30
 8008410:	f040 80b0 	bne.w	8008574 <_strtod_l+0x1b4>
 8008414:	7873      	ldrb	r3, [r6, #1]
 8008416:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800841a:	2b58      	cmp	r3, #88	; 0x58
 800841c:	d168      	bne.n	80084f0 <_strtod_l+0x130>
 800841e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008420:	9301      	str	r3, [sp, #4]
 8008422:	ab18      	add	r3, sp, #96	; 0x60
 8008424:	9702      	str	r7, [sp, #8]
 8008426:	9300      	str	r3, [sp, #0]
 8008428:	4a8d      	ldr	r2, [pc, #564]	; (8008660 <_strtod_l+0x2a0>)
 800842a:	ab19      	add	r3, sp, #100	; 0x64
 800842c:	a917      	add	r1, sp, #92	; 0x5c
 800842e:	4620      	mov	r0, r4
 8008430:	f001 fd5c 	bl	8009eec <__gethex>
 8008434:	f010 0707 	ands.w	r7, r0, #7
 8008438:	4605      	mov	r5, r0
 800843a:	d005      	beq.n	8008448 <_strtod_l+0x88>
 800843c:	2f06      	cmp	r7, #6
 800843e:	d12c      	bne.n	800849a <_strtod_l+0xda>
 8008440:	3601      	adds	r6, #1
 8008442:	2300      	movs	r3, #0
 8008444:	9617      	str	r6, [sp, #92]	; 0x5c
 8008446:	930a      	str	r3, [sp, #40]	; 0x28
 8008448:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800844a:	2b00      	cmp	r3, #0
 800844c:	f040 8590 	bne.w	8008f70 <_strtod_l+0xbb0>
 8008450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008452:	b1eb      	cbz	r3, 8008490 <_strtod_l+0xd0>
 8008454:	4652      	mov	r2, sl
 8008456:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800845a:	ec43 2b10 	vmov	d0, r2, r3
 800845e:	b01d      	add	sp, #116	; 0x74
 8008460:	ecbd 8b02 	vpop	{d8}
 8008464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008468:	2a20      	cmp	r2, #32
 800846a:	d1cc      	bne.n	8008406 <_strtod_l+0x46>
 800846c:	3301      	adds	r3, #1
 800846e:	9317      	str	r3, [sp, #92]	; 0x5c
 8008470:	e7be      	b.n	80083f0 <_strtod_l+0x30>
 8008472:	2a2d      	cmp	r2, #45	; 0x2d
 8008474:	d1c7      	bne.n	8008406 <_strtod_l+0x46>
 8008476:	2201      	movs	r2, #1
 8008478:	920a      	str	r2, [sp, #40]	; 0x28
 800847a:	1c5a      	adds	r2, r3, #1
 800847c:	9217      	str	r2, [sp, #92]	; 0x5c
 800847e:	785b      	ldrb	r3, [r3, #1]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d1c2      	bne.n	800840a <_strtod_l+0x4a>
 8008484:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008486:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800848a:	2b00      	cmp	r3, #0
 800848c:	f040 856e 	bne.w	8008f6c <_strtod_l+0xbac>
 8008490:	4652      	mov	r2, sl
 8008492:	465b      	mov	r3, fp
 8008494:	e7e1      	b.n	800845a <_strtod_l+0x9a>
 8008496:	2200      	movs	r2, #0
 8008498:	e7ee      	b.n	8008478 <_strtod_l+0xb8>
 800849a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800849c:	b13a      	cbz	r2, 80084ae <_strtod_l+0xee>
 800849e:	2135      	movs	r1, #53	; 0x35
 80084a0:	a81a      	add	r0, sp, #104	; 0x68
 80084a2:	f002 fce6 	bl	800ae72 <__copybits>
 80084a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80084a8:	4620      	mov	r0, r4
 80084aa:	f002 f8a5 	bl	800a5f8 <_Bfree>
 80084ae:	3f01      	subs	r7, #1
 80084b0:	2f04      	cmp	r7, #4
 80084b2:	d806      	bhi.n	80084c2 <_strtod_l+0x102>
 80084b4:	e8df f007 	tbb	[pc, r7]
 80084b8:	1714030a 	.word	0x1714030a
 80084bc:	0a          	.byte	0x0a
 80084bd:	00          	.byte	0x00
 80084be:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80084c2:	0728      	lsls	r0, r5, #28
 80084c4:	d5c0      	bpl.n	8008448 <_strtod_l+0x88>
 80084c6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80084ca:	e7bd      	b.n	8008448 <_strtod_l+0x88>
 80084cc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80084d0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80084d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80084d6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80084da:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80084de:	e7f0      	b.n	80084c2 <_strtod_l+0x102>
 80084e0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8008664 <_strtod_l+0x2a4>
 80084e4:	e7ed      	b.n	80084c2 <_strtod_l+0x102>
 80084e6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80084ea:	f04f 3aff 	mov.w	sl, #4294967295
 80084ee:	e7e8      	b.n	80084c2 <_strtod_l+0x102>
 80084f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80084f2:	1c5a      	adds	r2, r3, #1
 80084f4:	9217      	str	r2, [sp, #92]	; 0x5c
 80084f6:	785b      	ldrb	r3, [r3, #1]
 80084f8:	2b30      	cmp	r3, #48	; 0x30
 80084fa:	d0f9      	beq.n	80084f0 <_strtod_l+0x130>
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d0a3      	beq.n	8008448 <_strtod_l+0x88>
 8008500:	2301      	movs	r3, #1
 8008502:	f04f 0900 	mov.w	r9, #0
 8008506:	9304      	str	r3, [sp, #16]
 8008508:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800850a:	9308      	str	r3, [sp, #32]
 800850c:	f8cd 901c 	str.w	r9, [sp, #28]
 8008510:	464f      	mov	r7, r9
 8008512:	220a      	movs	r2, #10
 8008514:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008516:	7806      	ldrb	r6, [r0, #0]
 8008518:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800851c:	b2d9      	uxtb	r1, r3
 800851e:	2909      	cmp	r1, #9
 8008520:	d92a      	bls.n	8008578 <_strtod_l+0x1b8>
 8008522:	9905      	ldr	r1, [sp, #20]
 8008524:	462a      	mov	r2, r5
 8008526:	f003 fac3 	bl	800bab0 <strncmp>
 800852a:	b398      	cbz	r0, 8008594 <_strtod_l+0x1d4>
 800852c:	2000      	movs	r0, #0
 800852e:	4632      	mov	r2, r6
 8008530:	463d      	mov	r5, r7
 8008532:	9005      	str	r0, [sp, #20]
 8008534:	4603      	mov	r3, r0
 8008536:	2a65      	cmp	r2, #101	; 0x65
 8008538:	d001      	beq.n	800853e <_strtod_l+0x17e>
 800853a:	2a45      	cmp	r2, #69	; 0x45
 800853c:	d118      	bne.n	8008570 <_strtod_l+0x1b0>
 800853e:	b91d      	cbnz	r5, 8008548 <_strtod_l+0x188>
 8008540:	9a04      	ldr	r2, [sp, #16]
 8008542:	4302      	orrs	r2, r0
 8008544:	d09e      	beq.n	8008484 <_strtod_l+0xc4>
 8008546:	2500      	movs	r5, #0
 8008548:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800854c:	f108 0201 	add.w	r2, r8, #1
 8008550:	9217      	str	r2, [sp, #92]	; 0x5c
 8008552:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008556:	2a2b      	cmp	r2, #43	; 0x2b
 8008558:	d075      	beq.n	8008646 <_strtod_l+0x286>
 800855a:	2a2d      	cmp	r2, #45	; 0x2d
 800855c:	d07b      	beq.n	8008656 <_strtod_l+0x296>
 800855e:	f04f 0c00 	mov.w	ip, #0
 8008562:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008566:	2909      	cmp	r1, #9
 8008568:	f240 8082 	bls.w	8008670 <_strtod_l+0x2b0>
 800856c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008570:	2600      	movs	r6, #0
 8008572:	e09d      	b.n	80086b0 <_strtod_l+0x2f0>
 8008574:	2300      	movs	r3, #0
 8008576:	e7c4      	b.n	8008502 <_strtod_l+0x142>
 8008578:	2f08      	cmp	r7, #8
 800857a:	bfd8      	it	le
 800857c:	9907      	ldrle	r1, [sp, #28]
 800857e:	f100 0001 	add.w	r0, r0, #1
 8008582:	bfda      	itte	le
 8008584:	fb02 3301 	mlale	r3, r2, r1, r3
 8008588:	9307      	strle	r3, [sp, #28]
 800858a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800858e:	3701      	adds	r7, #1
 8008590:	9017      	str	r0, [sp, #92]	; 0x5c
 8008592:	e7bf      	b.n	8008514 <_strtod_l+0x154>
 8008594:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008596:	195a      	adds	r2, r3, r5
 8008598:	9217      	str	r2, [sp, #92]	; 0x5c
 800859a:	5d5a      	ldrb	r2, [r3, r5]
 800859c:	2f00      	cmp	r7, #0
 800859e:	d037      	beq.n	8008610 <_strtod_l+0x250>
 80085a0:	9005      	str	r0, [sp, #20]
 80085a2:	463d      	mov	r5, r7
 80085a4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80085a8:	2b09      	cmp	r3, #9
 80085aa:	d912      	bls.n	80085d2 <_strtod_l+0x212>
 80085ac:	2301      	movs	r3, #1
 80085ae:	e7c2      	b.n	8008536 <_strtod_l+0x176>
 80085b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80085b2:	1c5a      	adds	r2, r3, #1
 80085b4:	9217      	str	r2, [sp, #92]	; 0x5c
 80085b6:	785a      	ldrb	r2, [r3, #1]
 80085b8:	3001      	adds	r0, #1
 80085ba:	2a30      	cmp	r2, #48	; 0x30
 80085bc:	d0f8      	beq.n	80085b0 <_strtod_l+0x1f0>
 80085be:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80085c2:	2b08      	cmp	r3, #8
 80085c4:	f200 84d9 	bhi.w	8008f7a <_strtod_l+0xbba>
 80085c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80085ca:	9005      	str	r0, [sp, #20]
 80085cc:	2000      	movs	r0, #0
 80085ce:	9308      	str	r3, [sp, #32]
 80085d0:	4605      	mov	r5, r0
 80085d2:	3a30      	subs	r2, #48	; 0x30
 80085d4:	f100 0301 	add.w	r3, r0, #1
 80085d8:	d014      	beq.n	8008604 <_strtod_l+0x244>
 80085da:	9905      	ldr	r1, [sp, #20]
 80085dc:	4419      	add	r1, r3
 80085de:	9105      	str	r1, [sp, #20]
 80085e0:	462b      	mov	r3, r5
 80085e2:	eb00 0e05 	add.w	lr, r0, r5
 80085e6:	210a      	movs	r1, #10
 80085e8:	4573      	cmp	r3, lr
 80085ea:	d113      	bne.n	8008614 <_strtod_l+0x254>
 80085ec:	182b      	adds	r3, r5, r0
 80085ee:	2b08      	cmp	r3, #8
 80085f0:	f105 0501 	add.w	r5, r5, #1
 80085f4:	4405      	add	r5, r0
 80085f6:	dc1c      	bgt.n	8008632 <_strtod_l+0x272>
 80085f8:	9907      	ldr	r1, [sp, #28]
 80085fa:	230a      	movs	r3, #10
 80085fc:	fb03 2301 	mla	r3, r3, r1, r2
 8008600:	9307      	str	r3, [sp, #28]
 8008602:	2300      	movs	r3, #0
 8008604:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008606:	1c51      	adds	r1, r2, #1
 8008608:	9117      	str	r1, [sp, #92]	; 0x5c
 800860a:	7852      	ldrb	r2, [r2, #1]
 800860c:	4618      	mov	r0, r3
 800860e:	e7c9      	b.n	80085a4 <_strtod_l+0x1e4>
 8008610:	4638      	mov	r0, r7
 8008612:	e7d2      	b.n	80085ba <_strtod_l+0x1fa>
 8008614:	2b08      	cmp	r3, #8
 8008616:	dc04      	bgt.n	8008622 <_strtod_l+0x262>
 8008618:	9e07      	ldr	r6, [sp, #28]
 800861a:	434e      	muls	r6, r1
 800861c:	9607      	str	r6, [sp, #28]
 800861e:	3301      	adds	r3, #1
 8008620:	e7e2      	b.n	80085e8 <_strtod_l+0x228>
 8008622:	f103 0c01 	add.w	ip, r3, #1
 8008626:	f1bc 0f10 	cmp.w	ip, #16
 800862a:	bfd8      	it	le
 800862c:	fb01 f909 	mulle.w	r9, r1, r9
 8008630:	e7f5      	b.n	800861e <_strtod_l+0x25e>
 8008632:	2d10      	cmp	r5, #16
 8008634:	bfdc      	itt	le
 8008636:	230a      	movle	r3, #10
 8008638:	fb03 2909 	mlale	r9, r3, r9, r2
 800863c:	e7e1      	b.n	8008602 <_strtod_l+0x242>
 800863e:	2300      	movs	r3, #0
 8008640:	9305      	str	r3, [sp, #20]
 8008642:	2301      	movs	r3, #1
 8008644:	e77c      	b.n	8008540 <_strtod_l+0x180>
 8008646:	f04f 0c00 	mov.w	ip, #0
 800864a:	f108 0202 	add.w	r2, r8, #2
 800864e:	9217      	str	r2, [sp, #92]	; 0x5c
 8008650:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008654:	e785      	b.n	8008562 <_strtod_l+0x1a2>
 8008656:	f04f 0c01 	mov.w	ip, #1
 800865a:	e7f6      	b.n	800864a <_strtod_l+0x28a>
 800865c:	0800c9a8 	.word	0x0800c9a8
 8008660:	0800c75c 	.word	0x0800c75c
 8008664:	7ff00000 	.word	0x7ff00000
 8008668:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800866a:	1c51      	adds	r1, r2, #1
 800866c:	9117      	str	r1, [sp, #92]	; 0x5c
 800866e:	7852      	ldrb	r2, [r2, #1]
 8008670:	2a30      	cmp	r2, #48	; 0x30
 8008672:	d0f9      	beq.n	8008668 <_strtod_l+0x2a8>
 8008674:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008678:	2908      	cmp	r1, #8
 800867a:	f63f af79 	bhi.w	8008570 <_strtod_l+0x1b0>
 800867e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008682:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008684:	9206      	str	r2, [sp, #24]
 8008686:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008688:	1c51      	adds	r1, r2, #1
 800868a:	9117      	str	r1, [sp, #92]	; 0x5c
 800868c:	7852      	ldrb	r2, [r2, #1]
 800868e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008692:	2e09      	cmp	r6, #9
 8008694:	d937      	bls.n	8008706 <_strtod_l+0x346>
 8008696:	9e06      	ldr	r6, [sp, #24]
 8008698:	1b89      	subs	r1, r1, r6
 800869a:	2908      	cmp	r1, #8
 800869c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80086a0:	dc02      	bgt.n	80086a8 <_strtod_l+0x2e8>
 80086a2:	4576      	cmp	r6, lr
 80086a4:	bfa8      	it	ge
 80086a6:	4676      	movge	r6, lr
 80086a8:	f1bc 0f00 	cmp.w	ip, #0
 80086ac:	d000      	beq.n	80086b0 <_strtod_l+0x2f0>
 80086ae:	4276      	negs	r6, r6
 80086b0:	2d00      	cmp	r5, #0
 80086b2:	d14d      	bne.n	8008750 <_strtod_l+0x390>
 80086b4:	9904      	ldr	r1, [sp, #16]
 80086b6:	4301      	orrs	r1, r0
 80086b8:	f47f aec6 	bne.w	8008448 <_strtod_l+0x88>
 80086bc:	2b00      	cmp	r3, #0
 80086be:	f47f aee1 	bne.w	8008484 <_strtod_l+0xc4>
 80086c2:	2a69      	cmp	r2, #105	; 0x69
 80086c4:	d027      	beq.n	8008716 <_strtod_l+0x356>
 80086c6:	dc24      	bgt.n	8008712 <_strtod_l+0x352>
 80086c8:	2a49      	cmp	r2, #73	; 0x49
 80086ca:	d024      	beq.n	8008716 <_strtod_l+0x356>
 80086cc:	2a4e      	cmp	r2, #78	; 0x4e
 80086ce:	f47f aed9 	bne.w	8008484 <_strtod_l+0xc4>
 80086d2:	499f      	ldr	r1, [pc, #636]	; (8008950 <_strtod_l+0x590>)
 80086d4:	a817      	add	r0, sp, #92	; 0x5c
 80086d6:	f001 fe61 	bl	800a39c <__match>
 80086da:	2800      	cmp	r0, #0
 80086dc:	f43f aed2 	beq.w	8008484 <_strtod_l+0xc4>
 80086e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	2b28      	cmp	r3, #40	; 0x28
 80086e6:	d12d      	bne.n	8008744 <_strtod_l+0x384>
 80086e8:	499a      	ldr	r1, [pc, #616]	; (8008954 <_strtod_l+0x594>)
 80086ea:	aa1a      	add	r2, sp, #104	; 0x68
 80086ec:	a817      	add	r0, sp, #92	; 0x5c
 80086ee:	f001 fe69 	bl	800a3c4 <__hexnan>
 80086f2:	2805      	cmp	r0, #5
 80086f4:	d126      	bne.n	8008744 <_strtod_l+0x384>
 80086f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80086f8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80086fc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008700:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008704:	e6a0      	b.n	8008448 <_strtod_l+0x88>
 8008706:	210a      	movs	r1, #10
 8008708:	fb01 2e0e 	mla	lr, r1, lr, r2
 800870c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008710:	e7b9      	b.n	8008686 <_strtod_l+0x2c6>
 8008712:	2a6e      	cmp	r2, #110	; 0x6e
 8008714:	e7db      	b.n	80086ce <_strtod_l+0x30e>
 8008716:	4990      	ldr	r1, [pc, #576]	; (8008958 <_strtod_l+0x598>)
 8008718:	a817      	add	r0, sp, #92	; 0x5c
 800871a:	f001 fe3f 	bl	800a39c <__match>
 800871e:	2800      	cmp	r0, #0
 8008720:	f43f aeb0 	beq.w	8008484 <_strtod_l+0xc4>
 8008724:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008726:	498d      	ldr	r1, [pc, #564]	; (800895c <_strtod_l+0x59c>)
 8008728:	3b01      	subs	r3, #1
 800872a:	a817      	add	r0, sp, #92	; 0x5c
 800872c:	9317      	str	r3, [sp, #92]	; 0x5c
 800872e:	f001 fe35 	bl	800a39c <__match>
 8008732:	b910      	cbnz	r0, 800873a <_strtod_l+0x37a>
 8008734:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008736:	3301      	adds	r3, #1
 8008738:	9317      	str	r3, [sp, #92]	; 0x5c
 800873a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800896c <_strtod_l+0x5ac>
 800873e:	f04f 0a00 	mov.w	sl, #0
 8008742:	e681      	b.n	8008448 <_strtod_l+0x88>
 8008744:	4886      	ldr	r0, [pc, #536]	; (8008960 <_strtod_l+0x5a0>)
 8008746:	f003 f963 	bl	800ba10 <nan>
 800874a:	ec5b ab10 	vmov	sl, fp, d0
 800874e:	e67b      	b.n	8008448 <_strtod_l+0x88>
 8008750:	9b05      	ldr	r3, [sp, #20]
 8008752:	9807      	ldr	r0, [sp, #28]
 8008754:	1af3      	subs	r3, r6, r3
 8008756:	2f00      	cmp	r7, #0
 8008758:	bf08      	it	eq
 800875a:	462f      	moveq	r7, r5
 800875c:	2d10      	cmp	r5, #16
 800875e:	9306      	str	r3, [sp, #24]
 8008760:	46a8      	mov	r8, r5
 8008762:	bfa8      	it	ge
 8008764:	f04f 0810 	movge.w	r8, #16
 8008768:	f7f7 feec 	bl	8000544 <__aeabi_ui2d>
 800876c:	2d09      	cmp	r5, #9
 800876e:	4682      	mov	sl, r0
 8008770:	468b      	mov	fp, r1
 8008772:	dd13      	ble.n	800879c <_strtod_l+0x3dc>
 8008774:	4b7b      	ldr	r3, [pc, #492]	; (8008964 <_strtod_l+0x5a4>)
 8008776:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800877a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800877e:	f7f7 ff5b 	bl	8000638 <__aeabi_dmul>
 8008782:	4682      	mov	sl, r0
 8008784:	4648      	mov	r0, r9
 8008786:	468b      	mov	fp, r1
 8008788:	f7f7 fedc 	bl	8000544 <__aeabi_ui2d>
 800878c:	4602      	mov	r2, r0
 800878e:	460b      	mov	r3, r1
 8008790:	4650      	mov	r0, sl
 8008792:	4659      	mov	r1, fp
 8008794:	f7f7 fd9a 	bl	80002cc <__adddf3>
 8008798:	4682      	mov	sl, r0
 800879a:	468b      	mov	fp, r1
 800879c:	2d0f      	cmp	r5, #15
 800879e:	dc38      	bgt.n	8008812 <_strtod_l+0x452>
 80087a0:	9b06      	ldr	r3, [sp, #24]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	f43f ae50 	beq.w	8008448 <_strtod_l+0x88>
 80087a8:	dd24      	ble.n	80087f4 <_strtod_l+0x434>
 80087aa:	2b16      	cmp	r3, #22
 80087ac:	dc0b      	bgt.n	80087c6 <_strtod_l+0x406>
 80087ae:	496d      	ldr	r1, [pc, #436]	; (8008964 <_strtod_l+0x5a4>)
 80087b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80087b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087b8:	4652      	mov	r2, sl
 80087ba:	465b      	mov	r3, fp
 80087bc:	f7f7 ff3c 	bl	8000638 <__aeabi_dmul>
 80087c0:	4682      	mov	sl, r0
 80087c2:	468b      	mov	fp, r1
 80087c4:	e640      	b.n	8008448 <_strtod_l+0x88>
 80087c6:	9a06      	ldr	r2, [sp, #24]
 80087c8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80087cc:	4293      	cmp	r3, r2
 80087ce:	db20      	blt.n	8008812 <_strtod_l+0x452>
 80087d0:	4c64      	ldr	r4, [pc, #400]	; (8008964 <_strtod_l+0x5a4>)
 80087d2:	f1c5 050f 	rsb	r5, r5, #15
 80087d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80087da:	4652      	mov	r2, sl
 80087dc:	465b      	mov	r3, fp
 80087de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087e2:	f7f7 ff29 	bl	8000638 <__aeabi_dmul>
 80087e6:	9b06      	ldr	r3, [sp, #24]
 80087e8:	1b5d      	subs	r5, r3, r5
 80087ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80087ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 80087f2:	e7e3      	b.n	80087bc <_strtod_l+0x3fc>
 80087f4:	9b06      	ldr	r3, [sp, #24]
 80087f6:	3316      	adds	r3, #22
 80087f8:	db0b      	blt.n	8008812 <_strtod_l+0x452>
 80087fa:	9b05      	ldr	r3, [sp, #20]
 80087fc:	1b9e      	subs	r6, r3, r6
 80087fe:	4b59      	ldr	r3, [pc, #356]	; (8008964 <_strtod_l+0x5a4>)
 8008800:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008804:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008808:	4650      	mov	r0, sl
 800880a:	4659      	mov	r1, fp
 800880c:	f7f8 f83e 	bl	800088c <__aeabi_ddiv>
 8008810:	e7d6      	b.n	80087c0 <_strtod_l+0x400>
 8008812:	9b06      	ldr	r3, [sp, #24]
 8008814:	eba5 0808 	sub.w	r8, r5, r8
 8008818:	4498      	add	r8, r3
 800881a:	f1b8 0f00 	cmp.w	r8, #0
 800881e:	dd74      	ble.n	800890a <_strtod_l+0x54a>
 8008820:	f018 030f 	ands.w	r3, r8, #15
 8008824:	d00a      	beq.n	800883c <_strtod_l+0x47c>
 8008826:	494f      	ldr	r1, [pc, #316]	; (8008964 <_strtod_l+0x5a4>)
 8008828:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800882c:	4652      	mov	r2, sl
 800882e:	465b      	mov	r3, fp
 8008830:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008834:	f7f7 ff00 	bl	8000638 <__aeabi_dmul>
 8008838:	4682      	mov	sl, r0
 800883a:	468b      	mov	fp, r1
 800883c:	f038 080f 	bics.w	r8, r8, #15
 8008840:	d04f      	beq.n	80088e2 <_strtod_l+0x522>
 8008842:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008846:	dd22      	ble.n	800888e <_strtod_l+0x4ce>
 8008848:	2500      	movs	r5, #0
 800884a:	462e      	mov	r6, r5
 800884c:	9507      	str	r5, [sp, #28]
 800884e:	9505      	str	r5, [sp, #20]
 8008850:	2322      	movs	r3, #34	; 0x22
 8008852:	f8df b118 	ldr.w	fp, [pc, #280]	; 800896c <_strtod_l+0x5ac>
 8008856:	6023      	str	r3, [r4, #0]
 8008858:	f04f 0a00 	mov.w	sl, #0
 800885c:	9b07      	ldr	r3, [sp, #28]
 800885e:	2b00      	cmp	r3, #0
 8008860:	f43f adf2 	beq.w	8008448 <_strtod_l+0x88>
 8008864:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008866:	4620      	mov	r0, r4
 8008868:	f001 fec6 	bl	800a5f8 <_Bfree>
 800886c:	9905      	ldr	r1, [sp, #20]
 800886e:	4620      	mov	r0, r4
 8008870:	f001 fec2 	bl	800a5f8 <_Bfree>
 8008874:	4631      	mov	r1, r6
 8008876:	4620      	mov	r0, r4
 8008878:	f001 febe 	bl	800a5f8 <_Bfree>
 800887c:	9907      	ldr	r1, [sp, #28]
 800887e:	4620      	mov	r0, r4
 8008880:	f001 feba 	bl	800a5f8 <_Bfree>
 8008884:	4629      	mov	r1, r5
 8008886:	4620      	mov	r0, r4
 8008888:	f001 feb6 	bl	800a5f8 <_Bfree>
 800888c:	e5dc      	b.n	8008448 <_strtod_l+0x88>
 800888e:	4b36      	ldr	r3, [pc, #216]	; (8008968 <_strtod_l+0x5a8>)
 8008890:	9304      	str	r3, [sp, #16]
 8008892:	2300      	movs	r3, #0
 8008894:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008898:	4650      	mov	r0, sl
 800889a:	4659      	mov	r1, fp
 800889c:	4699      	mov	r9, r3
 800889e:	f1b8 0f01 	cmp.w	r8, #1
 80088a2:	dc21      	bgt.n	80088e8 <_strtod_l+0x528>
 80088a4:	b10b      	cbz	r3, 80088aa <_strtod_l+0x4ea>
 80088a6:	4682      	mov	sl, r0
 80088a8:	468b      	mov	fp, r1
 80088aa:	4b2f      	ldr	r3, [pc, #188]	; (8008968 <_strtod_l+0x5a8>)
 80088ac:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80088b0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80088b4:	4652      	mov	r2, sl
 80088b6:	465b      	mov	r3, fp
 80088b8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80088bc:	f7f7 febc 	bl	8000638 <__aeabi_dmul>
 80088c0:	4b2a      	ldr	r3, [pc, #168]	; (800896c <_strtod_l+0x5ac>)
 80088c2:	460a      	mov	r2, r1
 80088c4:	400b      	ands	r3, r1
 80088c6:	492a      	ldr	r1, [pc, #168]	; (8008970 <_strtod_l+0x5b0>)
 80088c8:	428b      	cmp	r3, r1
 80088ca:	4682      	mov	sl, r0
 80088cc:	d8bc      	bhi.n	8008848 <_strtod_l+0x488>
 80088ce:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80088d2:	428b      	cmp	r3, r1
 80088d4:	bf86      	itte	hi
 80088d6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8008974 <_strtod_l+0x5b4>
 80088da:	f04f 3aff 	movhi.w	sl, #4294967295
 80088de:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80088e2:	2300      	movs	r3, #0
 80088e4:	9304      	str	r3, [sp, #16]
 80088e6:	e084      	b.n	80089f2 <_strtod_l+0x632>
 80088e8:	f018 0f01 	tst.w	r8, #1
 80088ec:	d005      	beq.n	80088fa <_strtod_l+0x53a>
 80088ee:	9b04      	ldr	r3, [sp, #16]
 80088f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f4:	f7f7 fea0 	bl	8000638 <__aeabi_dmul>
 80088f8:	2301      	movs	r3, #1
 80088fa:	9a04      	ldr	r2, [sp, #16]
 80088fc:	3208      	adds	r2, #8
 80088fe:	f109 0901 	add.w	r9, r9, #1
 8008902:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008906:	9204      	str	r2, [sp, #16]
 8008908:	e7c9      	b.n	800889e <_strtod_l+0x4de>
 800890a:	d0ea      	beq.n	80088e2 <_strtod_l+0x522>
 800890c:	f1c8 0800 	rsb	r8, r8, #0
 8008910:	f018 020f 	ands.w	r2, r8, #15
 8008914:	d00a      	beq.n	800892c <_strtod_l+0x56c>
 8008916:	4b13      	ldr	r3, [pc, #76]	; (8008964 <_strtod_l+0x5a4>)
 8008918:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800891c:	4650      	mov	r0, sl
 800891e:	4659      	mov	r1, fp
 8008920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008924:	f7f7 ffb2 	bl	800088c <__aeabi_ddiv>
 8008928:	4682      	mov	sl, r0
 800892a:	468b      	mov	fp, r1
 800892c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008930:	d0d7      	beq.n	80088e2 <_strtod_l+0x522>
 8008932:	f1b8 0f1f 	cmp.w	r8, #31
 8008936:	dd1f      	ble.n	8008978 <_strtod_l+0x5b8>
 8008938:	2500      	movs	r5, #0
 800893a:	462e      	mov	r6, r5
 800893c:	9507      	str	r5, [sp, #28]
 800893e:	9505      	str	r5, [sp, #20]
 8008940:	2322      	movs	r3, #34	; 0x22
 8008942:	f04f 0a00 	mov.w	sl, #0
 8008946:	f04f 0b00 	mov.w	fp, #0
 800894a:	6023      	str	r3, [r4, #0]
 800894c:	e786      	b.n	800885c <_strtod_l+0x49c>
 800894e:	bf00      	nop
 8008950:	0800c731 	.word	0x0800c731
 8008954:	0800c770 	.word	0x0800c770
 8008958:	0800c729 	.word	0x0800c729
 800895c:	0800c8b4 	.word	0x0800c8b4
 8008960:	0800cb7b 	.word	0x0800cb7b
 8008964:	0800ca40 	.word	0x0800ca40
 8008968:	0800ca18 	.word	0x0800ca18
 800896c:	7ff00000 	.word	0x7ff00000
 8008970:	7ca00000 	.word	0x7ca00000
 8008974:	7fefffff 	.word	0x7fefffff
 8008978:	f018 0310 	ands.w	r3, r8, #16
 800897c:	bf18      	it	ne
 800897e:	236a      	movne	r3, #106	; 0x6a
 8008980:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008d30 <_strtod_l+0x970>
 8008984:	9304      	str	r3, [sp, #16]
 8008986:	4650      	mov	r0, sl
 8008988:	4659      	mov	r1, fp
 800898a:	2300      	movs	r3, #0
 800898c:	f018 0f01 	tst.w	r8, #1
 8008990:	d004      	beq.n	800899c <_strtod_l+0x5dc>
 8008992:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008996:	f7f7 fe4f 	bl	8000638 <__aeabi_dmul>
 800899a:	2301      	movs	r3, #1
 800899c:	ea5f 0868 	movs.w	r8, r8, asr #1
 80089a0:	f109 0908 	add.w	r9, r9, #8
 80089a4:	d1f2      	bne.n	800898c <_strtod_l+0x5cc>
 80089a6:	b10b      	cbz	r3, 80089ac <_strtod_l+0x5ec>
 80089a8:	4682      	mov	sl, r0
 80089aa:	468b      	mov	fp, r1
 80089ac:	9b04      	ldr	r3, [sp, #16]
 80089ae:	b1c3      	cbz	r3, 80089e2 <_strtod_l+0x622>
 80089b0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80089b4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	4659      	mov	r1, fp
 80089bc:	dd11      	ble.n	80089e2 <_strtod_l+0x622>
 80089be:	2b1f      	cmp	r3, #31
 80089c0:	f340 8124 	ble.w	8008c0c <_strtod_l+0x84c>
 80089c4:	2b34      	cmp	r3, #52	; 0x34
 80089c6:	bfde      	ittt	le
 80089c8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80089cc:	f04f 33ff 	movle.w	r3, #4294967295
 80089d0:	fa03 f202 	lslle.w	r2, r3, r2
 80089d4:	f04f 0a00 	mov.w	sl, #0
 80089d8:	bfcc      	ite	gt
 80089da:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80089de:	ea02 0b01 	andle.w	fp, r2, r1
 80089e2:	2200      	movs	r2, #0
 80089e4:	2300      	movs	r3, #0
 80089e6:	4650      	mov	r0, sl
 80089e8:	4659      	mov	r1, fp
 80089ea:	f7f8 f88d 	bl	8000b08 <__aeabi_dcmpeq>
 80089ee:	2800      	cmp	r0, #0
 80089f0:	d1a2      	bne.n	8008938 <_strtod_l+0x578>
 80089f2:	9b07      	ldr	r3, [sp, #28]
 80089f4:	9300      	str	r3, [sp, #0]
 80089f6:	9908      	ldr	r1, [sp, #32]
 80089f8:	462b      	mov	r3, r5
 80089fa:	463a      	mov	r2, r7
 80089fc:	4620      	mov	r0, r4
 80089fe:	f001 fe63 	bl	800a6c8 <__s2b>
 8008a02:	9007      	str	r0, [sp, #28]
 8008a04:	2800      	cmp	r0, #0
 8008a06:	f43f af1f 	beq.w	8008848 <_strtod_l+0x488>
 8008a0a:	9b05      	ldr	r3, [sp, #20]
 8008a0c:	1b9e      	subs	r6, r3, r6
 8008a0e:	9b06      	ldr	r3, [sp, #24]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	bfb4      	ite	lt
 8008a14:	4633      	movlt	r3, r6
 8008a16:	2300      	movge	r3, #0
 8008a18:	930c      	str	r3, [sp, #48]	; 0x30
 8008a1a:	9b06      	ldr	r3, [sp, #24]
 8008a1c:	2500      	movs	r5, #0
 8008a1e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008a22:	9312      	str	r3, [sp, #72]	; 0x48
 8008a24:	462e      	mov	r6, r5
 8008a26:	9b07      	ldr	r3, [sp, #28]
 8008a28:	4620      	mov	r0, r4
 8008a2a:	6859      	ldr	r1, [r3, #4]
 8008a2c:	f001 fda4 	bl	800a578 <_Balloc>
 8008a30:	9005      	str	r0, [sp, #20]
 8008a32:	2800      	cmp	r0, #0
 8008a34:	f43f af0c 	beq.w	8008850 <_strtod_l+0x490>
 8008a38:	9b07      	ldr	r3, [sp, #28]
 8008a3a:	691a      	ldr	r2, [r3, #16]
 8008a3c:	3202      	adds	r2, #2
 8008a3e:	f103 010c 	add.w	r1, r3, #12
 8008a42:	0092      	lsls	r2, r2, #2
 8008a44:	300c      	adds	r0, #12
 8008a46:	f001 fd89 	bl	800a55c <memcpy>
 8008a4a:	ec4b ab10 	vmov	d0, sl, fp
 8008a4e:	aa1a      	add	r2, sp, #104	; 0x68
 8008a50:	a919      	add	r1, sp, #100	; 0x64
 8008a52:	4620      	mov	r0, r4
 8008a54:	f002 f97e 	bl	800ad54 <__d2b>
 8008a58:	ec4b ab18 	vmov	d8, sl, fp
 8008a5c:	9018      	str	r0, [sp, #96]	; 0x60
 8008a5e:	2800      	cmp	r0, #0
 8008a60:	f43f aef6 	beq.w	8008850 <_strtod_l+0x490>
 8008a64:	2101      	movs	r1, #1
 8008a66:	4620      	mov	r0, r4
 8008a68:	f001 fec8 	bl	800a7fc <__i2b>
 8008a6c:	4606      	mov	r6, r0
 8008a6e:	2800      	cmp	r0, #0
 8008a70:	f43f aeee 	beq.w	8008850 <_strtod_l+0x490>
 8008a74:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008a76:	9904      	ldr	r1, [sp, #16]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	bfab      	itete	ge
 8008a7c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8008a7e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008a80:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008a82:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8008a86:	bfac      	ite	ge
 8008a88:	eb03 0902 	addge.w	r9, r3, r2
 8008a8c:	1ad7      	sublt	r7, r2, r3
 8008a8e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008a90:	eba3 0801 	sub.w	r8, r3, r1
 8008a94:	4490      	add	r8, r2
 8008a96:	4ba1      	ldr	r3, [pc, #644]	; (8008d1c <_strtod_l+0x95c>)
 8008a98:	f108 38ff 	add.w	r8, r8, #4294967295
 8008a9c:	4598      	cmp	r8, r3
 8008a9e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008aa2:	f280 80c7 	bge.w	8008c34 <_strtod_l+0x874>
 8008aa6:	eba3 0308 	sub.w	r3, r3, r8
 8008aaa:	2b1f      	cmp	r3, #31
 8008aac:	eba2 0203 	sub.w	r2, r2, r3
 8008ab0:	f04f 0101 	mov.w	r1, #1
 8008ab4:	f300 80b1 	bgt.w	8008c1a <_strtod_l+0x85a>
 8008ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8008abc:	930d      	str	r3, [sp, #52]	; 0x34
 8008abe:	2300      	movs	r3, #0
 8008ac0:	9308      	str	r3, [sp, #32]
 8008ac2:	eb09 0802 	add.w	r8, r9, r2
 8008ac6:	9b04      	ldr	r3, [sp, #16]
 8008ac8:	45c1      	cmp	r9, r8
 8008aca:	4417      	add	r7, r2
 8008acc:	441f      	add	r7, r3
 8008ace:	464b      	mov	r3, r9
 8008ad0:	bfa8      	it	ge
 8008ad2:	4643      	movge	r3, r8
 8008ad4:	42bb      	cmp	r3, r7
 8008ad6:	bfa8      	it	ge
 8008ad8:	463b      	movge	r3, r7
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	bfc2      	ittt	gt
 8008ade:	eba8 0803 	subgt.w	r8, r8, r3
 8008ae2:	1aff      	subgt	r7, r7, r3
 8008ae4:	eba9 0903 	subgt.w	r9, r9, r3
 8008ae8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	dd17      	ble.n	8008b1e <_strtod_l+0x75e>
 8008aee:	4631      	mov	r1, r6
 8008af0:	461a      	mov	r2, r3
 8008af2:	4620      	mov	r0, r4
 8008af4:	f001 ff42 	bl	800a97c <__pow5mult>
 8008af8:	4606      	mov	r6, r0
 8008afa:	2800      	cmp	r0, #0
 8008afc:	f43f aea8 	beq.w	8008850 <_strtod_l+0x490>
 8008b00:	4601      	mov	r1, r0
 8008b02:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008b04:	4620      	mov	r0, r4
 8008b06:	f001 fe8f 	bl	800a828 <__multiply>
 8008b0a:	900b      	str	r0, [sp, #44]	; 0x2c
 8008b0c:	2800      	cmp	r0, #0
 8008b0e:	f43f ae9f 	beq.w	8008850 <_strtod_l+0x490>
 8008b12:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008b14:	4620      	mov	r0, r4
 8008b16:	f001 fd6f 	bl	800a5f8 <_Bfree>
 8008b1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b1c:	9318      	str	r3, [sp, #96]	; 0x60
 8008b1e:	f1b8 0f00 	cmp.w	r8, #0
 8008b22:	f300 808c 	bgt.w	8008c3e <_strtod_l+0x87e>
 8008b26:	9b06      	ldr	r3, [sp, #24]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	dd08      	ble.n	8008b3e <_strtod_l+0x77e>
 8008b2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008b2e:	9905      	ldr	r1, [sp, #20]
 8008b30:	4620      	mov	r0, r4
 8008b32:	f001 ff23 	bl	800a97c <__pow5mult>
 8008b36:	9005      	str	r0, [sp, #20]
 8008b38:	2800      	cmp	r0, #0
 8008b3a:	f43f ae89 	beq.w	8008850 <_strtod_l+0x490>
 8008b3e:	2f00      	cmp	r7, #0
 8008b40:	dd08      	ble.n	8008b54 <_strtod_l+0x794>
 8008b42:	9905      	ldr	r1, [sp, #20]
 8008b44:	463a      	mov	r2, r7
 8008b46:	4620      	mov	r0, r4
 8008b48:	f001 ff72 	bl	800aa30 <__lshift>
 8008b4c:	9005      	str	r0, [sp, #20]
 8008b4e:	2800      	cmp	r0, #0
 8008b50:	f43f ae7e 	beq.w	8008850 <_strtod_l+0x490>
 8008b54:	f1b9 0f00 	cmp.w	r9, #0
 8008b58:	dd08      	ble.n	8008b6c <_strtod_l+0x7ac>
 8008b5a:	4631      	mov	r1, r6
 8008b5c:	464a      	mov	r2, r9
 8008b5e:	4620      	mov	r0, r4
 8008b60:	f001 ff66 	bl	800aa30 <__lshift>
 8008b64:	4606      	mov	r6, r0
 8008b66:	2800      	cmp	r0, #0
 8008b68:	f43f ae72 	beq.w	8008850 <_strtod_l+0x490>
 8008b6c:	9a05      	ldr	r2, [sp, #20]
 8008b6e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008b70:	4620      	mov	r0, r4
 8008b72:	f001 ffe9 	bl	800ab48 <__mdiff>
 8008b76:	4605      	mov	r5, r0
 8008b78:	2800      	cmp	r0, #0
 8008b7a:	f43f ae69 	beq.w	8008850 <_strtod_l+0x490>
 8008b7e:	68c3      	ldr	r3, [r0, #12]
 8008b80:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b82:	2300      	movs	r3, #0
 8008b84:	60c3      	str	r3, [r0, #12]
 8008b86:	4631      	mov	r1, r6
 8008b88:	f001 ffc2 	bl	800ab10 <__mcmp>
 8008b8c:	2800      	cmp	r0, #0
 8008b8e:	da60      	bge.n	8008c52 <_strtod_l+0x892>
 8008b90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b92:	ea53 030a 	orrs.w	r3, r3, sl
 8008b96:	f040 8082 	bne.w	8008c9e <_strtod_l+0x8de>
 8008b9a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d17d      	bne.n	8008c9e <_strtod_l+0x8de>
 8008ba2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008ba6:	0d1b      	lsrs	r3, r3, #20
 8008ba8:	051b      	lsls	r3, r3, #20
 8008baa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008bae:	d976      	bls.n	8008c9e <_strtod_l+0x8de>
 8008bb0:	696b      	ldr	r3, [r5, #20]
 8008bb2:	b913      	cbnz	r3, 8008bba <_strtod_l+0x7fa>
 8008bb4:	692b      	ldr	r3, [r5, #16]
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	dd71      	ble.n	8008c9e <_strtod_l+0x8de>
 8008bba:	4629      	mov	r1, r5
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	f001 ff36 	bl	800aa30 <__lshift>
 8008bc4:	4631      	mov	r1, r6
 8008bc6:	4605      	mov	r5, r0
 8008bc8:	f001 ffa2 	bl	800ab10 <__mcmp>
 8008bcc:	2800      	cmp	r0, #0
 8008bce:	dd66      	ble.n	8008c9e <_strtod_l+0x8de>
 8008bd0:	9904      	ldr	r1, [sp, #16]
 8008bd2:	4a53      	ldr	r2, [pc, #332]	; (8008d20 <_strtod_l+0x960>)
 8008bd4:	465b      	mov	r3, fp
 8008bd6:	2900      	cmp	r1, #0
 8008bd8:	f000 8081 	beq.w	8008cde <_strtod_l+0x91e>
 8008bdc:	ea02 010b 	and.w	r1, r2, fp
 8008be0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008be4:	dc7b      	bgt.n	8008cde <_strtod_l+0x91e>
 8008be6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008bea:	f77f aea9 	ble.w	8008940 <_strtod_l+0x580>
 8008bee:	4b4d      	ldr	r3, [pc, #308]	; (8008d24 <_strtod_l+0x964>)
 8008bf0:	4650      	mov	r0, sl
 8008bf2:	4659      	mov	r1, fp
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f7f7 fd1f 	bl	8000638 <__aeabi_dmul>
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	4303      	orrs	r3, r0
 8008bfe:	bf08      	it	eq
 8008c00:	2322      	moveq	r3, #34	; 0x22
 8008c02:	4682      	mov	sl, r0
 8008c04:	468b      	mov	fp, r1
 8008c06:	bf08      	it	eq
 8008c08:	6023      	streq	r3, [r4, #0]
 8008c0a:	e62b      	b.n	8008864 <_strtod_l+0x4a4>
 8008c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c10:	fa02 f303 	lsl.w	r3, r2, r3
 8008c14:	ea03 0a0a 	and.w	sl, r3, sl
 8008c18:	e6e3      	b.n	80089e2 <_strtod_l+0x622>
 8008c1a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008c1e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008c22:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008c26:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008c2a:	fa01 f308 	lsl.w	r3, r1, r8
 8008c2e:	9308      	str	r3, [sp, #32]
 8008c30:	910d      	str	r1, [sp, #52]	; 0x34
 8008c32:	e746      	b.n	8008ac2 <_strtod_l+0x702>
 8008c34:	2300      	movs	r3, #0
 8008c36:	9308      	str	r3, [sp, #32]
 8008c38:	2301      	movs	r3, #1
 8008c3a:	930d      	str	r3, [sp, #52]	; 0x34
 8008c3c:	e741      	b.n	8008ac2 <_strtod_l+0x702>
 8008c3e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008c40:	4642      	mov	r2, r8
 8008c42:	4620      	mov	r0, r4
 8008c44:	f001 fef4 	bl	800aa30 <__lshift>
 8008c48:	9018      	str	r0, [sp, #96]	; 0x60
 8008c4a:	2800      	cmp	r0, #0
 8008c4c:	f47f af6b 	bne.w	8008b26 <_strtod_l+0x766>
 8008c50:	e5fe      	b.n	8008850 <_strtod_l+0x490>
 8008c52:	465f      	mov	r7, fp
 8008c54:	d16e      	bne.n	8008d34 <_strtod_l+0x974>
 8008c56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008c58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c5c:	b342      	cbz	r2, 8008cb0 <_strtod_l+0x8f0>
 8008c5e:	4a32      	ldr	r2, [pc, #200]	; (8008d28 <_strtod_l+0x968>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d128      	bne.n	8008cb6 <_strtod_l+0x8f6>
 8008c64:	9b04      	ldr	r3, [sp, #16]
 8008c66:	4651      	mov	r1, sl
 8008c68:	b1eb      	cbz	r3, 8008ca6 <_strtod_l+0x8e6>
 8008c6a:	4b2d      	ldr	r3, [pc, #180]	; (8008d20 <_strtod_l+0x960>)
 8008c6c:	403b      	ands	r3, r7
 8008c6e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008c72:	f04f 32ff 	mov.w	r2, #4294967295
 8008c76:	d819      	bhi.n	8008cac <_strtod_l+0x8ec>
 8008c78:	0d1b      	lsrs	r3, r3, #20
 8008c7a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c82:	4299      	cmp	r1, r3
 8008c84:	d117      	bne.n	8008cb6 <_strtod_l+0x8f6>
 8008c86:	4b29      	ldr	r3, [pc, #164]	; (8008d2c <_strtod_l+0x96c>)
 8008c88:	429f      	cmp	r7, r3
 8008c8a:	d102      	bne.n	8008c92 <_strtod_l+0x8d2>
 8008c8c:	3101      	adds	r1, #1
 8008c8e:	f43f addf 	beq.w	8008850 <_strtod_l+0x490>
 8008c92:	4b23      	ldr	r3, [pc, #140]	; (8008d20 <_strtod_l+0x960>)
 8008c94:	403b      	ands	r3, r7
 8008c96:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008c9a:	f04f 0a00 	mov.w	sl, #0
 8008c9e:	9b04      	ldr	r3, [sp, #16]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d1a4      	bne.n	8008bee <_strtod_l+0x82e>
 8008ca4:	e5de      	b.n	8008864 <_strtod_l+0x4a4>
 8008ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8008caa:	e7ea      	b.n	8008c82 <_strtod_l+0x8c2>
 8008cac:	4613      	mov	r3, r2
 8008cae:	e7e8      	b.n	8008c82 <_strtod_l+0x8c2>
 8008cb0:	ea53 030a 	orrs.w	r3, r3, sl
 8008cb4:	d08c      	beq.n	8008bd0 <_strtod_l+0x810>
 8008cb6:	9b08      	ldr	r3, [sp, #32]
 8008cb8:	b1db      	cbz	r3, 8008cf2 <_strtod_l+0x932>
 8008cba:	423b      	tst	r3, r7
 8008cbc:	d0ef      	beq.n	8008c9e <_strtod_l+0x8de>
 8008cbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cc0:	9a04      	ldr	r2, [sp, #16]
 8008cc2:	4650      	mov	r0, sl
 8008cc4:	4659      	mov	r1, fp
 8008cc6:	b1c3      	cbz	r3, 8008cfa <_strtod_l+0x93a>
 8008cc8:	f7ff fb5d 	bl	8008386 <sulp>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	460b      	mov	r3, r1
 8008cd0:	ec51 0b18 	vmov	r0, r1, d8
 8008cd4:	f7f7 fafa 	bl	80002cc <__adddf3>
 8008cd8:	4682      	mov	sl, r0
 8008cda:	468b      	mov	fp, r1
 8008cdc:	e7df      	b.n	8008c9e <_strtod_l+0x8de>
 8008cde:	4013      	ands	r3, r2
 8008ce0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008ce4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008ce8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008cec:	f04f 3aff 	mov.w	sl, #4294967295
 8008cf0:	e7d5      	b.n	8008c9e <_strtod_l+0x8de>
 8008cf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008cf4:	ea13 0f0a 	tst.w	r3, sl
 8008cf8:	e7e0      	b.n	8008cbc <_strtod_l+0x8fc>
 8008cfa:	f7ff fb44 	bl	8008386 <sulp>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	460b      	mov	r3, r1
 8008d02:	ec51 0b18 	vmov	r0, r1, d8
 8008d06:	f7f7 fadf 	bl	80002c8 <__aeabi_dsub>
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	4682      	mov	sl, r0
 8008d10:	468b      	mov	fp, r1
 8008d12:	f7f7 fef9 	bl	8000b08 <__aeabi_dcmpeq>
 8008d16:	2800      	cmp	r0, #0
 8008d18:	d0c1      	beq.n	8008c9e <_strtod_l+0x8de>
 8008d1a:	e611      	b.n	8008940 <_strtod_l+0x580>
 8008d1c:	fffffc02 	.word	0xfffffc02
 8008d20:	7ff00000 	.word	0x7ff00000
 8008d24:	39500000 	.word	0x39500000
 8008d28:	000fffff 	.word	0x000fffff
 8008d2c:	7fefffff 	.word	0x7fefffff
 8008d30:	0800c788 	.word	0x0800c788
 8008d34:	4631      	mov	r1, r6
 8008d36:	4628      	mov	r0, r5
 8008d38:	f002 f868 	bl	800ae0c <__ratio>
 8008d3c:	ec59 8b10 	vmov	r8, r9, d0
 8008d40:	ee10 0a10 	vmov	r0, s0
 8008d44:	2200      	movs	r2, #0
 8008d46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008d4a:	4649      	mov	r1, r9
 8008d4c:	f7f7 fef0 	bl	8000b30 <__aeabi_dcmple>
 8008d50:	2800      	cmp	r0, #0
 8008d52:	d07a      	beq.n	8008e4a <_strtod_l+0xa8a>
 8008d54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d04a      	beq.n	8008df0 <_strtod_l+0xa30>
 8008d5a:	4b95      	ldr	r3, [pc, #596]	; (8008fb0 <_strtod_l+0xbf0>)
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008d62:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008fb0 <_strtod_l+0xbf0>
 8008d66:	f04f 0800 	mov.w	r8, #0
 8008d6a:	4b92      	ldr	r3, [pc, #584]	; (8008fb4 <_strtod_l+0xbf4>)
 8008d6c:	403b      	ands	r3, r7
 8008d6e:	930d      	str	r3, [sp, #52]	; 0x34
 8008d70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d72:	4b91      	ldr	r3, [pc, #580]	; (8008fb8 <_strtod_l+0xbf8>)
 8008d74:	429a      	cmp	r2, r3
 8008d76:	f040 80b0 	bne.w	8008eda <_strtod_l+0xb1a>
 8008d7a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008d7e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008d82:	ec4b ab10 	vmov	d0, sl, fp
 8008d86:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008d8a:	f001 ff67 	bl	800ac5c <__ulp>
 8008d8e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008d92:	ec53 2b10 	vmov	r2, r3, d0
 8008d96:	f7f7 fc4f 	bl	8000638 <__aeabi_dmul>
 8008d9a:	4652      	mov	r2, sl
 8008d9c:	465b      	mov	r3, fp
 8008d9e:	f7f7 fa95 	bl	80002cc <__adddf3>
 8008da2:	460b      	mov	r3, r1
 8008da4:	4983      	ldr	r1, [pc, #524]	; (8008fb4 <_strtod_l+0xbf4>)
 8008da6:	4a85      	ldr	r2, [pc, #532]	; (8008fbc <_strtod_l+0xbfc>)
 8008da8:	4019      	ands	r1, r3
 8008daa:	4291      	cmp	r1, r2
 8008dac:	4682      	mov	sl, r0
 8008dae:	d960      	bls.n	8008e72 <_strtod_l+0xab2>
 8008db0:	ee18 3a90 	vmov	r3, s17
 8008db4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d104      	bne.n	8008dc6 <_strtod_l+0xa06>
 8008dbc:	ee18 3a10 	vmov	r3, s16
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	f43f ad45 	beq.w	8008850 <_strtod_l+0x490>
 8008dc6:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008fc8 <_strtod_l+0xc08>
 8008dca:	f04f 3aff 	mov.w	sl, #4294967295
 8008dce:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	f001 fc11 	bl	800a5f8 <_Bfree>
 8008dd6:	9905      	ldr	r1, [sp, #20]
 8008dd8:	4620      	mov	r0, r4
 8008dda:	f001 fc0d 	bl	800a5f8 <_Bfree>
 8008dde:	4631      	mov	r1, r6
 8008de0:	4620      	mov	r0, r4
 8008de2:	f001 fc09 	bl	800a5f8 <_Bfree>
 8008de6:	4629      	mov	r1, r5
 8008de8:	4620      	mov	r0, r4
 8008dea:	f001 fc05 	bl	800a5f8 <_Bfree>
 8008dee:	e61a      	b.n	8008a26 <_strtod_l+0x666>
 8008df0:	f1ba 0f00 	cmp.w	sl, #0
 8008df4:	d11b      	bne.n	8008e2e <_strtod_l+0xa6e>
 8008df6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008dfa:	b9f3      	cbnz	r3, 8008e3a <_strtod_l+0xa7a>
 8008dfc:	4b6c      	ldr	r3, [pc, #432]	; (8008fb0 <_strtod_l+0xbf0>)
 8008dfe:	2200      	movs	r2, #0
 8008e00:	4640      	mov	r0, r8
 8008e02:	4649      	mov	r1, r9
 8008e04:	f7f7 fe8a 	bl	8000b1c <__aeabi_dcmplt>
 8008e08:	b9d0      	cbnz	r0, 8008e40 <_strtod_l+0xa80>
 8008e0a:	4640      	mov	r0, r8
 8008e0c:	4649      	mov	r1, r9
 8008e0e:	4b6c      	ldr	r3, [pc, #432]	; (8008fc0 <_strtod_l+0xc00>)
 8008e10:	2200      	movs	r2, #0
 8008e12:	f7f7 fc11 	bl	8000638 <__aeabi_dmul>
 8008e16:	4680      	mov	r8, r0
 8008e18:	4689      	mov	r9, r1
 8008e1a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008e1e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8008e22:	9315      	str	r3, [sp, #84]	; 0x54
 8008e24:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008e28:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008e2c:	e79d      	b.n	8008d6a <_strtod_l+0x9aa>
 8008e2e:	f1ba 0f01 	cmp.w	sl, #1
 8008e32:	d102      	bne.n	8008e3a <_strtod_l+0xa7a>
 8008e34:	2f00      	cmp	r7, #0
 8008e36:	f43f ad83 	beq.w	8008940 <_strtod_l+0x580>
 8008e3a:	4b62      	ldr	r3, [pc, #392]	; (8008fc4 <_strtod_l+0xc04>)
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	e78e      	b.n	8008d5e <_strtod_l+0x99e>
 8008e40:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008fc0 <_strtod_l+0xc00>
 8008e44:	f04f 0800 	mov.w	r8, #0
 8008e48:	e7e7      	b.n	8008e1a <_strtod_l+0xa5a>
 8008e4a:	4b5d      	ldr	r3, [pc, #372]	; (8008fc0 <_strtod_l+0xc00>)
 8008e4c:	4640      	mov	r0, r8
 8008e4e:	4649      	mov	r1, r9
 8008e50:	2200      	movs	r2, #0
 8008e52:	f7f7 fbf1 	bl	8000638 <__aeabi_dmul>
 8008e56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e58:	4680      	mov	r8, r0
 8008e5a:	4689      	mov	r9, r1
 8008e5c:	b933      	cbnz	r3, 8008e6c <_strtod_l+0xaac>
 8008e5e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e62:	900e      	str	r0, [sp, #56]	; 0x38
 8008e64:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e66:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008e6a:	e7dd      	b.n	8008e28 <_strtod_l+0xa68>
 8008e6c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008e70:	e7f9      	b.n	8008e66 <_strtod_l+0xaa6>
 8008e72:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008e76:	9b04      	ldr	r3, [sp, #16]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d1a8      	bne.n	8008dce <_strtod_l+0xa0e>
 8008e7c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008e80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e82:	0d1b      	lsrs	r3, r3, #20
 8008e84:	051b      	lsls	r3, r3, #20
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d1a1      	bne.n	8008dce <_strtod_l+0xa0e>
 8008e8a:	4640      	mov	r0, r8
 8008e8c:	4649      	mov	r1, r9
 8008e8e:	f7f7 ff83 	bl	8000d98 <__aeabi_d2lz>
 8008e92:	f7f7 fba3 	bl	80005dc <__aeabi_l2d>
 8008e96:	4602      	mov	r2, r0
 8008e98:	460b      	mov	r3, r1
 8008e9a:	4640      	mov	r0, r8
 8008e9c:	4649      	mov	r1, r9
 8008e9e:	f7f7 fa13 	bl	80002c8 <__aeabi_dsub>
 8008ea2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008ea4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008ea8:	ea43 030a 	orr.w	r3, r3, sl
 8008eac:	4313      	orrs	r3, r2
 8008eae:	4680      	mov	r8, r0
 8008eb0:	4689      	mov	r9, r1
 8008eb2:	d055      	beq.n	8008f60 <_strtod_l+0xba0>
 8008eb4:	a336      	add	r3, pc, #216	; (adr r3, 8008f90 <_strtod_l+0xbd0>)
 8008eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eba:	f7f7 fe2f 	bl	8000b1c <__aeabi_dcmplt>
 8008ebe:	2800      	cmp	r0, #0
 8008ec0:	f47f acd0 	bne.w	8008864 <_strtod_l+0x4a4>
 8008ec4:	a334      	add	r3, pc, #208	; (adr r3, 8008f98 <_strtod_l+0xbd8>)
 8008ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eca:	4640      	mov	r0, r8
 8008ecc:	4649      	mov	r1, r9
 8008ece:	f7f7 fe43 	bl	8000b58 <__aeabi_dcmpgt>
 8008ed2:	2800      	cmp	r0, #0
 8008ed4:	f43f af7b 	beq.w	8008dce <_strtod_l+0xa0e>
 8008ed8:	e4c4      	b.n	8008864 <_strtod_l+0x4a4>
 8008eda:	9b04      	ldr	r3, [sp, #16]
 8008edc:	b333      	cbz	r3, 8008f2c <_strtod_l+0xb6c>
 8008ede:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ee0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008ee4:	d822      	bhi.n	8008f2c <_strtod_l+0xb6c>
 8008ee6:	a32e      	add	r3, pc, #184	; (adr r3, 8008fa0 <_strtod_l+0xbe0>)
 8008ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eec:	4640      	mov	r0, r8
 8008eee:	4649      	mov	r1, r9
 8008ef0:	f7f7 fe1e 	bl	8000b30 <__aeabi_dcmple>
 8008ef4:	b1a0      	cbz	r0, 8008f20 <_strtod_l+0xb60>
 8008ef6:	4649      	mov	r1, r9
 8008ef8:	4640      	mov	r0, r8
 8008efa:	f7f7 fe75 	bl	8000be8 <__aeabi_d2uiz>
 8008efe:	2801      	cmp	r0, #1
 8008f00:	bf38      	it	cc
 8008f02:	2001      	movcc	r0, #1
 8008f04:	f7f7 fb1e 	bl	8000544 <__aeabi_ui2d>
 8008f08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f0a:	4680      	mov	r8, r0
 8008f0c:	4689      	mov	r9, r1
 8008f0e:	bb23      	cbnz	r3, 8008f5a <_strtod_l+0xb9a>
 8008f10:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f14:	9010      	str	r0, [sp, #64]	; 0x40
 8008f16:	9311      	str	r3, [sp, #68]	; 0x44
 8008f18:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008f1c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f22:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f24:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008f28:	1a9b      	subs	r3, r3, r2
 8008f2a:	9309      	str	r3, [sp, #36]	; 0x24
 8008f2c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008f30:	eeb0 0a48 	vmov.f32	s0, s16
 8008f34:	eef0 0a68 	vmov.f32	s1, s17
 8008f38:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008f3c:	f001 fe8e 	bl	800ac5c <__ulp>
 8008f40:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008f44:	ec53 2b10 	vmov	r2, r3, d0
 8008f48:	f7f7 fb76 	bl	8000638 <__aeabi_dmul>
 8008f4c:	ec53 2b18 	vmov	r2, r3, d8
 8008f50:	f7f7 f9bc 	bl	80002cc <__adddf3>
 8008f54:	4682      	mov	sl, r0
 8008f56:	468b      	mov	fp, r1
 8008f58:	e78d      	b.n	8008e76 <_strtod_l+0xab6>
 8008f5a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8008f5e:	e7db      	b.n	8008f18 <_strtod_l+0xb58>
 8008f60:	a311      	add	r3, pc, #68	; (adr r3, 8008fa8 <_strtod_l+0xbe8>)
 8008f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f66:	f7f7 fdd9 	bl	8000b1c <__aeabi_dcmplt>
 8008f6a:	e7b2      	b.n	8008ed2 <_strtod_l+0xb12>
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	930a      	str	r3, [sp, #40]	; 0x28
 8008f70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008f72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008f74:	6013      	str	r3, [r2, #0]
 8008f76:	f7ff ba6b 	b.w	8008450 <_strtod_l+0x90>
 8008f7a:	2a65      	cmp	r2, #101	; 0x65
 8008f7c:	f43f ab5f 	beq.w	800863e <_strtod_l+0x27e>
 8008f80:	2a45      	cmp	r2, #69	; 0x45
 8008f82:	f43f ab5c 	beq.w	800863e <_strtod_l+0x27e>
 8008f86:	2301      	movs	r3, #1
 8008f88:	f7ff bb94 	b.w	80086b4 <_strtod_l+0x2f4>
 8008f8c:	f3af 8000 	nop.w
 8008f90:	94a03595 	.word	0x94a03595
 8008f94:	3fdfffff 	.word	0x3fdfffff
 8008f98:	35afe535 	.word	0x35afe535
 8008f9c:	3fe00000 	.word	0x3fe00000
 8008fa0:	ffc00000 	.word	0xffc00000
 8008fa4:	41dfffff 	.word	0x41dfffff
 8008fa8:	94a03595 	.word	0x94a03595
 8008fac:	3fcfffff 	.word	0x3fcfffff
 8008fb0:	3ff00000 	.word	0x3ff00000
 8008fb4:	7ff00000 	.word	0x7ff00000
 8008fb8:	7fe00000 	.word	0x7fe00000
 8008fbc:	7c9fffff 	.word	0x7c9fffff
 8008fc0:	3fe00000 	.word	0x3fe00000
 8008fc4:	bff00000 	.word	0xbff00000
 8008fc8:	7fefffff 	.word	0x7fefffff

08008fcc <_strtod_r>:
 8008fcc:	4b01      	ldr	r3, [pc, #4]	; (8008fd4 <_strtod_r+0x8>)
 8008fce:	f7ff b9f7 	b.w	80083c0 <_strtod_l>
 8008fd2:	bf00      	nop
 8008fd4:	20000074 	.word	0x20000074

08008fd8 <_strtol_l.constprop.0>:
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fde:	d001      	beq.n	8008fe4 <_strtol_l.constprop.0+0xc>
 8008fe0:	2b24      	cmp	r3, #36	; 0x24
 8008fe2:	d906      	bls.n	8008ff2 <_strtol_l.constprop.0+0x1a>
 8008fe4:	f7fe fa58 	bl	8007498 <__errno>
 8008fe8:	2316      	movs	r3, #22
 8008fea:	6003      	str	r3, [r0, #0]
 8008fec:	2000      	movs	r0, #0
 8008fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ff2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80090d8 <_strtol_l.constprop.0+0x100>
 8008ff6:	460d      	mov	r5, r1
 8008ff8:	462e      	mov	r6, r5
 8008ffa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008ffe:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009002:	f017 0708 	ands.w	r7, r7, #8
 8009006:	d1f7      	bne.n	8008ff8 <_strtol_l.constprop.0+0x20>
 8009008:	2c2d      	cmp	r4, #45	; 0x2d
 800900a:	d132      	bne.n	8009072 <_strtol_l.constprop.0+0x9a>
 800900c:	782c      	ldrb	r4, [r5, #0]
 800900e:	2701      	movs	r7, #1
 8009010:	1cb5      	adds	r5, r6, #2
 8009012:	2b00      	cmp	r3, #0
 8009014:	d05b      	beq.n	80090ce <_strtol_l.constprop.0+0xf6>
 8009016:	2b10      	cmp	r3, #16
 8009018:	d109      	bne.n	800902e <_strtol_l.constprop.0+0x56>
 800901a:	2c30      	cmp	r4, #48	; 0x30
 800901c:	d107      	bne.n	800902e <_strtol_l.constprop.0+0x56>
 800901e:	782c      	ldrb	r4, [r5, #0]
 8009020:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009024:	2c58      	cmp	r4, #88	; 0x58
 8009026:	d14d      	bne.n	80090c4 <_strtol_l.constprop.0+0xec>
 8009028:	786c      	ldrb	r4, [r5, #1]
 800902a:	2310      	movs	r3, #16
 800902c:	3502      	adds	r5, #2
 800902e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009032:	f108 38ff 	add.w	r8, r8, #4294967295
 8009036:	f04f 0c00 	mov.w	ip, #0
 800903a:	fbb8 f9f3 	udiv	r9, r8, r3
 800903e:	4666      	mov	r6, ip
 8009040:	fb03 8a19 	mls	sl, r3, r9, r8
 8009044:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009048:	f1be 0f09 	cmp.w	lr, #9
 800904c:	d816      	bhi.n	800907c <_strtol_l.constprop.0+0xa4>
 800904e:	4674      	mov	r4, lr
 8009050:	42a3      	cmp	r3, r4
 8009052:	dd24      	ble.n	800909e <_strtol_l.constprop.0+0xc6>
 8009054:	f1bc 0f00 	cmp.w	ip, #0
 8009058:	db1e      	blt.n	8009098 <_strtol_l.constprop.0+0xc0>
 800905a:	45b1      	cmp	r9, r6
 800905c:	d31c      	bcc.n	8009098 <_strtol_l.constprop.0+0xc0>
 800905e:	d101      	bne.n	8009064 <_strtol_l.constprop.0+0x8c>
 8009060:	45a2      	cmp	sl, r4
 8009062:	db19      	blt.n	8009098 <_strtol_l.constprop.0+0xc0>
 8009064:	fb06 4603 	mla	r6, r6, r3, r4
 8009068:	f04f 0c01 	mov.w	ip, #1
 800906c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009070:	e7e8      	b.n	8009044 <_strtol_l.constprop.0+0x6c>
 8009072:	2c2b      	cmp	r4, #43	; 0x2b
 8009074:	bf04      	itt	eq
 8009076:	782c      	ldrbeq	r4, [r5, #0]
 8009078:	1cb5      	addeq	r5, r6, #2
 800907a:	e7ca      	b.n	8009012 <_strtol_l.constprop.0+0x3a>
 800907c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009080:	f1be 0f19 	cmp.w	lr, #25
 8009084:	d801      	bhi.n	800908a <_strtol_l.constprop.0+0xb2>
 8009086:	3c37      	subs	r4, #55	; 0x37
 8009088:	e7e2      	b.n	8009050 <_strtol_l.constprop.0+0x78>
 800908a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800908e:	f1be 0f19 	cmp.w	lr, #25
 8009092:	d804      	bhi.n	800909e <_strtol_l.constprop.0+0xc6>
 8009094:	3c57      	subs	r4, #87	; 0x57
 8009096:	e7db      	b.n	8009050 <_strtol_l.constprop.0+0x78>
 8009098:	f04f 3cff 	mov.w	ip, #4294967295
 800909c:	e7e6      	b.n	800906c <_strtol_l.constprop.0+0x94>
 800909e:	f1bc 0f00 	cmp.w	ip, #0
 80090a2:	da05      	bge.n	80090b0 <_strtol_l.constprop.0+0xd8>
 80090a4:	2322      	movs	r3, #34	; 0x22
 80090a6:	6003      	str	r3, [r0, #0]
 80090a8:	4646      	mov	r6, r8
 80090aa:	b942      	cbnz	r2, 80090be <_strtol_l.constprop.0+0xe6>
 80090ac:	4630      	mov	r0, r6
 80090ae:	e79e      	b.n	8008fee <_strtol_l.constprop.0+0x16>
 80090b0:	b107      	cbz	r7, 80090b4 <_strtol_l.constprop.0+0xdc>
 80090b2:	4276      	negs	r6, r6
 80090b4:	2a00      	cmp	r2, #0
 80090b6:	d0f9      	beq.n	80090ac <_strtol_l.constprop.0+0xd4>
 80090b8:	f1bc 0f00 	cmp.w	ip, #0
 80090bc:	d000      	beq.n	80090c0 <_strtol_l.constprop.0+0xe8>
 80090be:	1e69      	subs	r1, r5, #1
 80090c0:	6011      	str	r1, [r2, #0]
 80090c2:	e7f3      	b.n	80090ac <_strtol_l.constprop.0+0xd4>
 80090c4:	2430      	movs	r4, #48	; 0x30
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d1b1      	bne.n	800902e <_strtol_l.constprop.0+0x56>
 80090ca:	2308      	movs	r3, #8
 80090cc:	e7af      	b.n	800902e <_strtol_l.constprop.0+0x56>
 80090ce:	2c30      	cmp	r4, #48	; 0x30
 80090d0:	d0a5      	beq.n	800901e <_strtol_l.constprop.0+0x46>
 80090d2:	230a      	movs	r3, #10
 80090d4:	e7ab      	b.n	800902e <_strtol_l.constprop.0+0x56>
 80090d6:	bf00      	nop
 80090d8:	0800c7b1 	.word	0x0800c7b1

080090dc <_strtol_r>:
 80090dc:	f7ff bf7c 	b.w	8008fd8 <_strtol_l.constprop.0>

080090e0 <_write_r>:
 80090e0:	b538      	push	{r3, r4, r5, lr}
 80090e2:	4d07      	ldr	r5, [pc, #28]	; (8009100 <_write_r+0x20>)
 80090e4:	4604      	mov	r4, r0
 80090e6:	4608      	mov	r0, r1
 80090e8:	4611      	mov	r1, r2
 80090ea:	2200      	movs	r2, #0
 80090ec:	602a      	str	r2, [r5, #0]
 80090ee:	461a      	mov	r2, r3
 80090f0:	f7f9 faff 	bl	80026f2 <_write>
 80090f4:	1c43      	adds	r3, r0, #1
 80090f6:	d102      	bne.n	80090fe <_write_r+0x1e>
 80090f8:	682b      	ldr	r3, [r5, #0]
 80090fa:	b103      	cbz	r3, 80090fe <_write_r+0x1e>
 80090fc:	6023      	str	r3, [r4, #0]
 80090fe:	bd38      	pop	{r3, r4, r5, pc}
 8009100:	2000045c 	.word	0x2000045c

08009104 <_close_r>:
 8009104:	b538      	push	{r3, r4, r5, lr}
 8009106:	4d06      	ldr	r5, [pc, #24]	; (8009120 <_close_r+0x1c>)
 8009108:	2300      	movs	r3, #0
 800910a:	4604      	mov	r4, r0
 800910c:	4608      	mov	r0, r1
 800910e:	602b      	str	r3, [r5, #0]
 8009110:	f7f9 fb0b 	bl	800272a <_close>
 8009114:	1c43      	adds	r3, r0, #1
 8009116:	d102      	bne.n	800911e <_close_r+0x1a>
 8009118:	682b      	ldr	r3, [r5, #0]
 800911a:	b103      	cbz	r3, 800911e <_close_r+0x1a>
 800911c:	6023      	str	r3, [r4, #0]
 800911e:	bd38      	pop	{r3, r4, r5, pc}
 8009120:	2000045c 	.word	0x2000045c

08009124 <quorem>:
 8009124:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009128:	6903      	ldr	r3, [r0, #16]
 800912a:	690c      	ldr	r4, [r1, #16]
 800912c:	42a3      	cmp	r3, r4
 800912e:	4607      	mov	r7, r0
 8009130:	f2c0 8081 	blt.w	8009236 <quorem+0x112>
 8009134:	3c01      	subs	r4, #1
 8009136:	f101 0814 	add.w	r8, r1, #20
 800913a:	f100 0514 	add.w	r5, r0, #20
 800913e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009142:	9301      	str	r3, [sp, #4]
 8009144:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009148:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800914c:	3301      	adds	r3, #1
 800914e:	429a      	cmp	r2, r3
 8009150:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009154:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009158:	fbb2 f6f3 	udiv	r6, r2, r3
 800915c:	d331      	bcc.n	80091c2 <quorem+0x9e>
 800915e:	f04f 0e00 	mov.w	lr, #0
 8009162:	4640      	mov	r0, r8
 8009164:	46ac      	mov	ip, r5
 8009166:	46f2      	mov	sl, lr
 8009168:	f850 2b04 	ldr.w	r2, [r0], #4
 800916c:	b293      	uxth	r3, r2
 800916e:	fb06 e303 	mla	r3, r6, r3, lr
 8009172:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009176:	b29b      	uxth	r3, r3
 8009178:	ebaa 0303 	sub.w	r3, sl, r3
 800917c:	f8dc a000 	ldr.w	sl, [ip]
 8009180:	0c12      	lsrs	r2, r2, #16
 8009182:	fa13 f38a 	uxtah	r3, r3, sl
 8009186:	fb06 e202 	mla	r2, r6, r2, lr
 800918a:	9300      	str	r3, [sp, #0]
 800918c:	9b00      	ldr	r3, [sp, #0]
 800918e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009192:	b292      	uxth	r2, r2
 8009194:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009198:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800919c:	f8bd 3000 	ldrh.w	r3, [sp]
 80091a0:	4581      	cmp	r9, r0
 80091a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80091a6:	f84c 3b04 	str.w	r3, [ip], #4
 80091aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80091ae:	d2db      	bcs.n	8009168 <quorem+0x44>
 80091b0:	f855 300b 	ldr.w	r3, [r5, fp]
 80091b4:	b92b      	cbnz	r3, 80091c2 <quorem+0x9e>
 80091b6:	9b01      	ldr	r3, [sp, #4]
 80091b8:	3b04      	subs	r3, #4
 80091ba:	429d      	cmp	r5, r3
 80091bc:	461a      	mov	r2, r3
 80091be:	d32e      	bcc.n	800921e <quorem+0xfa>
 80091c0:	613c      	str	r4, [r7, #16]
 80091c2:	4638      	mov	r0, r7
 80091c4:	f001 fca4 	bl	800ab10 <__mcmp>
 80091c8:	2800      	cmp	r0, #0
 80091ca:	db24      	blt.n	8009216 <quorem+0xf2>
 80091cc:	3601      	adds	r6, #1
 80091ce:	4628      	mov	r0, r5
 80091d0:	f04f 0c00 	mov.w	ip, #0
 80091d4:	f858 2b04 	ldr.w	r2, [r8], #4
 80091d8:	f8d0 e000 	ldr.w	lr, [r0]
 80091dc:	b293      	uxth	r3, r2
 80091de:	ebac 0303 	sub.w	r3, ip, r3
 80091e2:	0c12      	lsrs	r2, r2, #16
 80091e4:	fa13 f38e 	uxtah	r3, r3, lr
 80091e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80091ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80091f0:	b29b      	uxth	r3, r3
 80091f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80091f6:	45c1      	cmp	r9, r8
 80091f8:	f840 3b04 	str.w	r3, [r0], #4
 80091fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009200:	d2e8      	bcs.n	80091d4 <quorem+0xb0>
 8009202:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009206:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800920a:	b922      	cbnz	r2, 8009216 <quorem+0xf2>
 800920c:	3b04      	subs	r3, #4
 800920e:	429d      	cmp	r5, r3
 8009210:	461a      	mov	r2, r3
 8009212:	d30a      	bcc.n	800922a <quorem+0x106>
 8009214:	613c      	str	r4, [r7, #16]
 8009216:	4630      	mov	r0, r6
 8009218:	b003      	add	sp, #12
 800921a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800921e:	6812      	ldr	r2, [r2, #0]
 8009220:	3b04      	subs	r3, #4
 8009222:	2a00      	cmp	r2, #0
 8009224:	d1cc      	bne.n	80091c0 <quorem+0x9c>
 8009226:	3c01      	subs	r4, #1
 8009228:	e7c7      	b.n	80091ba <quorem+0x96>
 800922a:	6812      	ldr	r2, [r2, #0]
 800922c:	3b04      	subs	r3, #4
 800922e:	2a00      	cmp	r2, #0
 8009230:	d1f0      	bne.n	8009214 <quorem+0xf0>
 8009232:	3c01      	subs	r4, #1
 8009234:	e7eb      	b.n	800920e <quorem+0xea>
 8009236:	2000      	movs	r0, #0
 8009238:	e7ee      	b.n	8009218 <quorem+0xf4>
 800923a:	0000      	movs	r0, r0
 800923c:	0000      	movs	r0, r0
	...

08009240 <_dtoa_r>:
 8009240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009244:	ed2d 8b04 	vpush	{d8-d9}
 8009248:	ec57 6b10 	vmov	r6, r7, d0
 800924c:	b093      	sub	sp, #76	; 0x4c
 800924e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009250:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009254:	9106      	str	r1, [sp, #24]
 8009256:	ee10 aa10 	vmov	sl, s0
 800925a:	4604      	mov	r4, r0
 800925c:	9209      	str	r2, [sp, #36]	; 0x24
 800925e:	930c      	str	r3, [sp, #48]	; 0x30
 8009260:	46bb      	mov	fp, r7
 8009262:	b975      	cbnz	r5, 8009282 <_dtoa_r+0x42>
 8009264:	2010      	movs	r0, #16
 8009266:	f001 f95f 	bl	800a528 <malloc>
 800926a:	4602      	mov	r2, r0
 800926c:	6260      	str	r0, [r4, #36]	; 0x24
 800926e:	b920      	cbnz	r0, 800927a <_dtoa_r+0x3a>
 8009270:	4ba7      	ldr	r3, [pc, #668]	; (8009510 <_dtoa_r+0x2d0>)
 8009272:	21ea      	movs	r1, #234	; 0xea
 8009274:	48a7      	ldr	r0, [pc, #668]	; (8009514 <_dtoa_r+0x2d4>)
 8009276:	f002 fceb 	bl	800bc50 <__assert_func>
 800927a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800927e:	6005      	str	r5, [r0, #0]
 8009280:	60c5      	str	r5, [r0, #12]
 8009282:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009284:	6819      	ldr	r1, [r3, #0]
 8009286:	b151      	cbz	r1, 800929e <_dtoa_r+0x5e>
 8009288:	685a      	ldr	r2, [r3, #4]
 800928a:	604a      	str	r2, [r1, #4]
 800928c:	2301      	movs	r3, #1
 800928e:	4093      	lsls	r3, r2
 8009290:	608b      	str	r3, [r1, #8]
 8009292:	4620      	mov	r0, r4
 8009294:	f001 f9b0 	bl	800a5f8 <_Bfree>
 8009298:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800929a:	2200      	movs	r2, #0
 800929c:	601a      	str	r2, [r3, #0]
 800929e:	1e3b      	subs	r3, r7, #0
 80092a0:	bfaa      	itet	ge
 80092a2:	2300      	movge	r3, #0
 80092a4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80092a8:	f8c8 3000 	strge.w	r3, [r8]
 80092ac:	4b9a      	ldr	r3, [pc, #616]	; (8009518 <_dtoa_r+0x2d8>)
 80092ae:	bfbc      	itt	lt
 80092b0:	2201      	movlt	r2, #1
 80092b2:	f8c8 2000 	strlt.w	r2, [r8]
 80092b6:	ea33 030b 	bics.w	r3, r3, fp
 80092ba:	d11b      	bne.n	80092f4 <_dtoa_r+0xb4>
 80092bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80092be:	f242 730f 	movw	r3, #9999	; 0x270f
 80092c2:	6013      	str	r3, [r2, #0]
 80092c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80092c8:	4333      	orrs	r3, r6
 80092ca:	f000 8592 	beq.w	8009df2 <_dtoa_r+0xbb2>
 80092ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092d0:	b963      	cbnz	r3, 80092ec <_dtoa_r+0xac>
 80092d2:	4b92      	ldr	r3, [pc, #584]	; (800951c <_dtoa_r+0x2dc>)
 80092d4:	e022      	b.n	800931c <_dtoa_r+0xdc>
 80092d6:	4b92      	ldr	r3, [pc, #584]	; (8009520 <_dtoa_r+0x2e0>)
 80092d8:	9301      	str	r3, [sp, #4]
 80092da:	3308      	adds	r3, #8
 80092dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80092de:	6013      	str	r3, [r2, #0]
 80092e0:	9801      	ldr	r0, [sp, #4]
 80092e2:	b013      	add	sp, #76	; 0x4c
 80092e4:	ecbd 8b04 	vpop	{d8-d9}
 80092e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ec:	4b8b      	ldr	r3, [pc, #556]	; (800951c <_dtoa_r+0x2dc>)
 80092ee:	9301      	str	r3, [sp, #4]
 80092f0:	3303      	adds	r3, #3
 80092f2:	e7f3      	b.n	80092dc <_dtoa_r+0x9c>
 80092f4:	2200      	movs	r2, #0
 80092f6:	2300      	movs	r3, #0
 80092f8:	4650      	mov	r0, sl
 80092fa:	4659      	mov	r1, fp
 80092fc:	f7f7 fc04 	bl	8000b08 <__aeabi_dcmpeq>
 8009300:	ec4b ab19 	vmov	d9, sl, fp
 8009304:	4680      	mov	r8, r0
 8009306:	b158      	cbz	r0, 8009320 <_dtoa_r+0xe0>
 8009308:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800930a:	2301      	movs	r3, #1
 800930c:	6013      	str	r3, [r2, #0]
 800930e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009310:	2b00      	cmp	r3, #0
 8009312:	f000 856b 	beq.w	8009dec <_dtoa_r+0xbac>
 8009316:	4883      	ldr	r0, [pc, #524]	; (8009524 <_dtoa_r+0x2e4>)
 8009318:	6018      	str	r0, [r3, #0]
 800931a:	1e43      	subs	r3, r0, #1
 800931c:	9301      	str	r3, [sp, #4]
 800931e:	e7df      	b.n	80092e0 <_dtoa_r+0xa0>
 8009320:	ec4b ab10 	vmov	d0, sl, fp
 8009324:	aa10      	add	r2, sp, #64	; 0x40
 8009326:	a911      	add	r1, sp, #68	; 0x44
 8009328:	4620      	mov	r0, r4
 800932a:	f001 fd13 	bl	800ad54 <__d2b>
 800932e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009332:	ee08 0a10 	vmov	s16, r0
 8009336:	2d00      	cmp	r5, #0
 8009338:	f000 8084 	beq.w	8009444 <_dtoa_r+0x204>
 800933c:	ee19 3a90 	vmov	r3, s19
 8009340:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009344:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009348:	4656      	mov	r6, sl
 800934a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800934e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009352:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009356:	4b74      	ldr	r3, [pc, #464]	; (8009528 <_dtoa_r+0x2e8>)
 8009358:	2200      	movs	r2, #0
 800935a:	4630      	mov	r0, r6
 800935c:	4639      	mov	r1, r7
 800935e:	f7f6 ffb3 	bl	80002c8 <__aeabi_dsub>
 8009362:	a365      	add	r3, pc, #404	; (adr r3, 80094f8 <_dtoa_r+0x2b8>)
 8009364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009368:	f7f7 f966 	bl	8000638 <__aeabi_dmul>
 800936c:	a364      	add	r3, pc, #400	; (adr r3, 8009500 <_dtoa_r+0x2c0>)
 800936e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009372:	f7f6 ffab 	bl	80002cc <__adddf3>
 8009376:	4606      	mov	r6, r0
 8009378:	4628      	mov	r0, r5
 800937a:	460f      	mov	r7, r1
 800937c:	f7f7 f8f2 	bl	8000564 <__aeabi_i2d>
 8009380:	a361      	add	r3, pc, #388	; (adr r3, 8009508 <_dtoa_r+0x2c8>)
 8009382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009386:	f7f7 f957 	bl	8000638 <__aeabi_dmul>
 800938a:	4602      	mov	r2, r0
 800938c:	460b      	mov	r3, r1
 800938e:	4630      	mov	r0, r6
 8009390:	4639      	mov	r1, r7
 8009392:	f7f6 ff9b 	bl	80002cc <__adddf3>
 8009396:	4606      	mov	r6, r0
 8009398:	460f      	mov	r7, r1
 800939a:	f7f7 fbfd 	bl	8000b98 <__aeabi_d2iz>
 800939e:	2200      	movs	r2, #0
 80093a0:	9000      	str	r0, [sp, #0]
 80093a2:	2300      	movs	r3, #0
 80093a4:	4630      	mov	r0, r6
 80093a6:	4639      	mov	r1, r7
 80093a8:	f7f7 fbb8 	bl	8000b1c <__aeabi_dcmplt>
 80093ac:	b150      	cbz	r0, 80093c4 <_dtoa_r+0x184>
 80093ae:	9800      	ldr	r0, [sp, #0]
 80093b0:	f7f7 f8d8 	bl	8000564 <__aeabi_i2d>
 80093b4:	4632      	mov	r2, r6
 80093b6:	463b      	mov	r3, r7
 80093b8:	f7f7 fba6 	bl	8000b08 <__aeabi_dcmpeq>
 80093bc:	b910      	cbnz	r0, 80093c4 <_dtoa_r+0x184>
 80093be:	9b00      	ldr	r3, [sp, #0]
 80093c0:	3b01      	subs	r3, #1
 80093c2:	9300      	str	r3, [sp, #0]
 80093c4:	9b00      	ldr	r3, [sp, #0]
 80093c6:	2b16      	cmp	r3, #22
 80093c8:	d85a      	bhi.n	8009480 <_dtoa_r+0x240>
 80093ca:	9a00      	ldr	r2, [sp, #0]
 80093cc:	4b57      	ldr	r3, [pc, #348]	; (800952c <_dtoa_r+0x2ec>)
 80093ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d6:	ec51 0b19 	vmov	r0, r1, d9
 80093da:	f7f7 fb9f 	bl	8000b1c <__aeabi_dcmplt>
 80093de:	2800      	cmp	r0, #0
 80093e0:	d050      	beq.n	8009484 <_dtoa_r+0x244>
 80093e2:	9b00      	ldr	r3, [sp, #0]
 80093e4:	3b01      	subs	r3, #1
 80093e6:	9300      	str	r3, [sp, #0]
 80093e8:	2300      	movs	r3, #0
 80093ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80093ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80093ee:	1b5d      	subs	r5, r3, r5
 80093f0:	1e6b      	subs	r3, r5, #1
 80093f2:	9305      	str	r3, [sp, #20]
 80093f4:	bf45      	ittet	mi
 80093f6:	f1c5 0301 	rsbmi	r3, r5, #1
 80093fa:	9304      	strmi	r3, [sp, #16]
 80093fc:	2300      	movpl	r3, #0
 80093fe:	2300      	movmi	r3, #0
 8009400:	bf4c      	ite	mi
 8009402:	9305      	strmi	r3, [sp, #20]
 8009404:	9304      	strpl	r3, [sp, #16]
 8009406:	9b00      	ldr	r3, [sp, #0]
 8009408:	2b00      	cmp	r3, #0
 800940a:	db3d      	blt.n	8009488 <_dtoa_r+0x248>
 800940c:	9b05      	ldr	r3, [sp, #20]
 800940e:	9a00      	ldr	r2, [sp, #0]
 8009410:	920a      	str	r2, [sp, #40]	; 0x28
 8009412:	4413      	add	r3, r2
 8009414:	9305      	str	r3, [sp, #20]
 8009416:	2300      	movs	r3, #0
 8009418:	9307      	str	r3, [sp, #28]
 800941a:	9b06      	ldr	r3, [sp, #24]
 800941c:	2b09      	cmp	r3, #9
 800941e:	f200 8089 	bhi.w	8009534 <_dtoa_r+0x2f4>
 8009422:	2b05      	cmp	r3, #5
 8009424:	bfc4      	itt	gt
 8009426:	3b04      	subgt	r3, #4
 8009428:	9306      	strgt	r3, [sp, #24]
 800942a:	9b06      	ldr	r3, [sp, #24]
 800942c:	f1a3 0302 	sub.w	r3, r3, #2
 8009430:	bfcc      	ite	gt
 8009432:	2500      	movgt	r5, #0
 8009434:	2501      	movle	r5, #1
 8009436:	2b03      	cmp	r3, #3
 8009438:	f200 8087 	bhi.w	800954a <_dtoa_r+0x30a>
 800943c:	e8df f003 	tbb	[pc, r3]
 8009440:	59383a2d 	.word	0x59383a2d
 8009444:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009448:	441d      	add	r5, r3
 800944a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800944e:	2b20      	cmp	r3, #32
 8009450:	bfc1      	itttt	gt
 8009452:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009456:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800945a:	fa0b f303 	lslgt.w	r3, fp, r3
 800945e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009462:	bfda      	itte	le
 8009464:	f1c3 0320 	rsble	r3, r3, #32
 8009468:	fa06 f003 	lslle.w	r0, r6, r3
 800946c:	4318      	orrgt	r0, r3
 800946e:	f7f7 f869 	bl	8000544 <__aeabi_ui2d>
 8009472:	2301      	movs	r3, #1
 8009474:	4606      	mov	r6, r0
 8009476:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800947a:	3d01      	subs	r5, #1
 800947c:	930e      	str	r3, [sp, #56]	; 0x38
 800947e:	e76a      	b.n	8009356 <_dtoa_r+0x116>
 8009480:	2301      	movs	r3, #1
 8009482:	e7b2      	b.n	80093ea <_dtoa_r+0x1aa>
 8009484:	900b      	str	r0, [sp, #44]	; 0x2c
 8009486:	e7b1      	b.n	80093ec <_dtoa_r+0x1ac>
 8009488:	9b04      	ldr	r3, [sp, #16]
 800948a:	9a00      	ldr	r2, [sp, #0]
 800948c:	1a9b      	subs	r3, r3, r2
 800948e:	9304      	str	r3, [sp, #16]
 8009490:	4253      	negs	r3, r2
 8009492:	9307      	str	r3, [sp, #28]
 8009494:	2300      	movs	r3, #0
 8009496:	930a      	str	r3, [sp, #40]	; 0x28
 8009498:	e7bf      	b.n	800941a <_dtoa_r+0x1da>
 800949a:	2300      	movs	r3, #0
 800949c:	9308      	str	r3, [sp, #32]
 800949e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	dc55      	bgt.n	8009550 <_dtoa_r+0x310>
 80094a4:	2301      	movs	r3, #1
 80094a6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80094aa:	461a      	mov	r2, r3
 80094ac:	9209      	str	r2, [sp, #36]	; 0x24
 80094ae:	e00c      	b.n	80094ca <_dtoa_r+0x28a>
 80094b0:	2301      	movs	r3, #1
 80094b2:	e7f3      	b.n	800949c <_dtoa_r+0x25c>
 80094b4:	2300      	movs	r3, #0
 80094b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094b8:	9308      	str	r3, [sp, #32]
 80094ba:	9b00      	ldr	r3, [sp, #0]
 80094bc:	4413      	add	r3, r2
 80094be:	9302      	str	r3, [sp, #8]
 80094c0:	3301      	adds	r3, #1
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	9303      	str	r3, [sp, #12]
 80094c6:	bfb8      	it	lt
 80094c8:	2301      	movlt	r3, #1
 80094ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80094cc:	2200      	movs	r2, #0
 80094ce:	6042      	str	r2, [r0, #4]
 80094d0:	2204      	movs	r2, #4
 80094d2:	f102 0614 	add.w	r6, r2, #20
 80094d6:	429e      	cmp	r6, r3
 80094d8:	6841      	ldr	r1, [r0, #4]
 80094da:	d93d      	bls.n	8009558 <_dtoa_r+0x318>
 80094dc:	4620      	mov	r0, r4
 80094de:	f001 f84b 	bl	800a578 <_Balloc>
 80094e2:	9001      	str	r0, [sp, #4]
 80094e4:	2800      	cmp	r0, #0
 80094e6:	d13b      	bne.n	8009560 <_dtoa_r+0x320>
 80094e8:	4b11      	ldr	r3, [pc, #68]	; (8009530 <_dtoa_r+0x2f0>)
 80094ea:	4602      	mov	r2, r0
 80094ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80094f0:	e6c0      	b.n	8009274 <_dtoa_r+0x34>
 80094f2:	2301      	movs	r3, #1
 80094f4:	e7df      	b.n	80094b6 <_dtoa_r+0x276>
 80094f6:	bf00      	nop
 80094f8:	636f4361 	.word	0x636f4361
 80094fc:	3fd287a7 	.word	0x3fd287a7
 8009500:	8b60c8b3 	.word	0x8b60c8b3
 8009504:	3fc68a28 	.word	0x3fc68a28
 8009508:	509f79fb 	.word	0x509f79fb
 800950c:	3fd34413 	.word	0x3fd34413
 8009510:	0800c8be 	.word	0x0800c8be
 8009514:	0800c8d5 	.word	0x0800c8d5
 8009518:	7ff00000 	.word	0x7ff00000
 800951c:	0800c8ba 	.word	0x0800c8ba
 8009520:	0800c8b1 	.word	0x0800c8b1
 8009524:	0800cb2a 	.word	0x0800cb2a
 8009528:	3ff80000 	.word	0x3ff80000
 800952c:	0800ca40 	.word	0x0800ca40
 8009530:	0800c930 	.word	0x0800c930
 8009534:	2501      	movs	r5, #1
 8009536:	2300      	movs	r3, #0
 8009538:	9306      	str	r3, [sp, #24]
 800953a:	9508      	str	r5, [sp, #32]
 800953c:	f04f 33ff 	mov.w	r3, #4294967295
 8009540:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009544:	2200      	movs	r2, #0
 8009546:	2312      	movs	r3, #18
 8009548:	e7b0      	b.n	80094ac <_dtoa_r+0x26c>
 800954a:	2301      	movs	r3, #1
 800954c:	9308      	str	r3, [sp, #32]
 800954e:	e7f5      	b.n	800953c <_dtoa_r+0x2fc>
 8009550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009552:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009556:	e7b8      	b.n	80094ca <_dtoa_r+0x28a>
 8009558:	3101      	adds	r1, #1
 800955a:	6041      	str	r1, [r0, #4]
 800955c:	0052      	lsls	r2, r2, #1
 800955e:	e7b8      	b.n	80094d2 <_dtoa_r+0x292>
 8009560:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009562:	9a01      	ldr	r2, [sp, #4]
 8009564:	601a      	str	r2, [r3, #0]
 8009566:	9b03      	ldr	r3, [sp, #12]
 8009568:	2b0e      	cmp	r3, #14
 800956a:	f200 809d 	bhi.w	80096a8 <_dtoa_r+0x468>
 800956e:	2d00      	cmp	r5, #0
 8009570:	f000 809a 	beq.w	80096a8 <_dtoa_r+0x468>
 8009574:	9b00      	ldr	r3, [sp, #0]
 8009576:	2b00      	cmp	r3, #0
 8009578:	dd32      	ble.n	80095e0 <_dtoa_r+0x3a0>
 800957a:	4ab7      	ldr	r2, [pc, #732]	; (8009858 <_dtoa_r+0x618>)
 800957c:	f003 030f 	and.w	r3, r3, #15
 8009580:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009584:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009588:	9b00      	ldr	r3, [sp, #0]
 800958a:	05d8      	lsls	r0, r3, #23
 800958c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009590:	d516      	bpl.n	80095c0 <_dtoa_r+0x380>
 8009592:	4bb2      	ldr	r3, [pc, #712]	; (800985c <_dtoa_r+0x61c>)
 8009594:	ec51 0b19 	vmov	r0, r1, d9
 8009598:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800959c:	f7f7 f976 	bl	800088c <__aeabi_ddiv>
 80095a0:	f007 070f 	and.w	r7, r7, #15
 80095a4:	4682      	mov	sl, r0
 80095a6:	468b      	mov	fp, r1
 80095a8:	2503      	movs	r5, #3
 80095aa:	4eac      	ldr	r6, [pc, #688]	; (800985c <_dtoa_r+0x61c>)
 80095ac:	b957      	cbnz	r7, 80095c4 <_dtoa_r+0x384>
 80095ae:	4642      	mov	r2, r8
 80095b0:	464b      	mov	r3, r9
 80095b2:	4650      	mov	r0, sl
 80095b4:	4659      	mov	r1, fp
 80095b6:	f7f7 f969 	bl	800088c <__aeabi_ddiv>
 80095ba:	4682      	mov	sl, r0
 80095bc:	468b      	mov	fp, r1
 80095be:	e028      	b.n	8009612 <_dtoa_r+0x3d2>
 80095c0:	2502      	movs	r5, #2
 80095c2:	e7f2      	b.n	80095aa <_dtoa_r+0x36a>
 80095c4:	07f9      	lsls	r1, r7, #31
 80095c6:	d508      	bpl.n	80095da <_dtoa_r+0x39a>
 80095c8:	4640      	mov	r0, r8
 80095ca:	4649      	mov	r1, r9
 80095cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80095d0:	f7f7 f832 	bl	8000638 <__aeabi_dmul>
 80095d4:	3501      	adds	r5, #1
 80095d6:	4680      	mov	r8, r0
 80095d8:	4689      	mov	r9, r1
 80095da:	107f      	asrs	r7, r7, #1
 80095dc:	3608      	adds	r6, #8
 80095de:	e7e5      	b.n	80095ac <_dtoa_r+0x36c>
 80095e0:	f000 809b 	beq.w	800971a <_dtoa_r+0x4da>
 80095e4:	9b00      	ldr	r3, [sp, #0]
 80095e6:	4f9d      	ldr	r7, [pc, #628]	; (800985c <_dtoa_r+0x61c>)
 80095e8:	425e      	negs	r6, r3
 80095ea:	4b9b      	ldr	r3, [pc, #620]	; (8009858 <_dtoa_r+0x618>)
 80095ec:	f006 020f 	and.w	r2, r6, #15
 80095f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f8:	ec51 0b19 	vmov	r0, r1, d9
 80095fc:	f7f7 f81c 	bl	8000638 <__aeabi_dmul>
 8009600:	1136      	asrs	r6, r6, #4
 8009602:	4682      	mov	sl, r0
 8009604:	468b      	mov	fp, r1
 8009606:	2300      	movs	r3, #0
 8009608:	2502      	movs	r5, #2
 800960a:	2e00      	cmp	r6, #0
 800960c:	d17a      	bne.n	8009704 <_dtoa_r+0x4c4>
 800960e:	2b00      	cmp	r3, #0
 8009610:	d1d3      	bne.n	80095ba <_dtoa_r+0x37a>
 8009612:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009614:	2b00      	cmp	r3, #0
 8009616:	f000 8082 	beq.w	800971e <_dtoa_r+0x4de>
 800961a:	4b91      	ldr	r3, [pc, #580]	; (8009860 <_dtoa_r+0x620>)
 800961c:	2200      	movs	r2, #0
 800961e:	4650      	mov	r0, sl
 8009620:	4659      	mov	r1, fp
 8009622:	f7f7 fa7b 	bl	8000b1c <__aeabi_dcmplt>
 8009626:	2800      	cmp	r0, #0
 8009628:	d079      	beq.n	800971e <_dtoa_r+0x4de>
 800962a:	9b03      	ldr	r3, [sp, #12]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d076      	beq.n	800971e <_dtoa_r+0x4de>
 8009630:	9b02      	ldr	r3, [sp, #8]
 8009632:	2b00      	cmp	r3, #0
 8009634:	dd36      	ble.n	80096a4 <_dtoa_r+0x464>
 8009636:	9b00      	ldr	r3, [sp, #0]
 8009638:	4650      	mov	r0, sl
 800963a:	4659      	mov	r1, fp
 800963c:	1e5f      	subs	r7, r3, #1
 800963e:	2200      	movs	r2, #0
 8009640:	4b88      	ldr	r3, [pc, #544]	; (8009864 <_dtoa_r+0x624>)
 8009642:	f7f6 fff9 	bl	8000638 <__aeabi_dmul>
 8009646:	9e02      	ldr	r6, [sp, #8]
 8009648:	4682      	mov	sl, r0
 800964a:	468b      	mov	fp, r1
 800964c:	3501      	adds	r5, #1
 800964e:	4628      	mov	r0, r5
 8009650:	f7f6 ff88 	bl	8000564 <__aeabi_i2d>
 8009654:	4652      	mov	r2, sl
 8009656:	465b      	mov	r3, fp
 8009658:	f7f6 ffee 	bl	8000638 <__aeabi_dmul>
 800965c:	4b82      	ldr	r3, [pc, #520]	; (8009868 <_dtoa_r+0x628>)
 800965e:	2200      	movs	r2, #0
 8009660:	f7f6 fe34 	bl	80002cc <__adddf3>
 8009664:	46d0      	mov	r8, sl
 8009666:	46d9      	mov	r9, fp
 8009668:	4682      	mov	sl, r0
 800966a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800966e:	2e00      	cmp	r6, #0
 8009670:	d158      	bne.n	8009724 <_dtoa_r+0x4e4>
 8009672:	4b7e      	ldr	r3, [pc, #504]	; (800986c <_dtoa_r+0x62c>)
 8009674:	2200      	movs	r2, #0
 8009676:	4640      	mov	r0, r8
 8009678:	4649      	mov	r1, r9
 800967a:	f7f6 fe25 	bl	80002c8 <__aeabi_dsub>
 800967e:	4652      	mov	r2, sl
 8009680:	465b      	mov	r3, fp
 8009682:	4680      	mov	r8, r0
 8009684:	4689      	mov	r9, r1
 8009686:	f7f7 fa67 	bl	8000b58 <__aeabi_dcmpgt>
 800968a:	2800      	cmp	r0, #0
 800968c:	f040 8295 	bne.w	8009bba <_dtoa_r+0x97a>
 8009690:	4652      	mov	r2, sl
 8009692:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009696:	4640      	mov	r0, r8
 8009698:	4649      	mov	r1, r9
 800969a:	f7f7 fa3f 	bl	8000b1c <__aeabi_dcmplt>
 800969e:	2800      	cmp	r0, #0
 80096a0:	f040 8289 	bne.w	8009bb6 <_dtoa_r+0x976>
 80096a4:	ec5b ab19 	vmov	sl, fp, d9
 80096a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	f2c0 8148 	blt.w	8009940 <_dtoa_r+0x700>
 80096b0:	9a00      	ldr	r2, [sp, #0]
 80096b2:	2a0e      	cmp	r2, #14
 80096b4:	f300 8144 	bgt.w	8009940 <_dtoa_r+0x700>
 80096b8:	4b67      	ldr	r3, [pc, #412]	; (8009858 <_dtoa_r+0x618>)
 80096ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096be:	e9d3 8900 	ldrd	r8, r9, [r3]
 80096c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	f280 80d5 	bge.w	8009874 <_dtoa_r+0x634>
 80096ca:	9b03      	ldr	r3, [sp, #12]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	f300 80d1 	bgt.w	8009874 <_dtoa_r+0x634>
 80096d2:	f040 826f 	bne.w	8009bb4 <_dtoa_r+0x974>
 80096d6:	4b65      	ldr	r3, [pc, #404]	; (800986c <_dtoa_r+0x62c>)
 80096d8:	2200      	movs	r2, #0
 80096da:	4640      	mov	r0, r8
 80096dc:	4649      	mov	r1, r9
 80096de:	f7f6 ffab 	bl	8000638 <__aeabi_dmul>
 80096e2:	4652      	mov	r2, sl
 80096e4:	465b      	mov	r3, fp
 80096e6:	f7f7 fa2d 	bl	8000b44 <__aeabi_dcmpge>
 80096ea:	9e03      	ldr	r6, [sp, #12]
 80096ec:	4637      	mov	r7, r6
 80096ee:	2800      	cmp	r0, #0
 80096f0:	f040 8245 	bne.w	8009b7e <_dtoa_r+0x93e>
 80096f4:	9d01      	ldr	r5, [sp, #4]
 80096f6:	2331      	movs	r3, #49	; 0x31
 80096f8:	f805 3b01 	strb.w	r3, [r5], #1
 80096fc:	9b00      	ldr	r3, [sp, #0]
 80096fe:	3301      	adds	r3, #1
 8009700:	9300      	str	r3, [sp, #0]
 8009702:	e240      	b.n	8009b86 <_dtoa_r+0x946>
 8009704:	07f2      	lsls	r2, r6, #31
 8009706:	d505      	bpl.n	8009714 <_dtoa_r+0x4d4>
 8009708:	e9d7 2300 	ldrd	r2, r3, [r7]
 800970c:	f7f6 ff94 	bl	8000638 <__aeabi_dmul>
 8009710:	3501      	adds	r5, #1
 8009712:	2301      	movs	r3, #1
 8009714:	1076      	asrs	r6, r6, #1
 8009716:	3708      	adds	r7, #8
 8009718:	e777      	b.n	800960a <_dtoa_r+0x3ca>
 800971a:	2502      	movs	r5, #2
 800971c:	e779      	b.n	8009612 <_dtoa_r+0x3d2>
 800971e:	9f00      	ldr	r7, [sp, #0]
 8009720:	9e03      	ldr	r6, [sp, #12]
 8009722:	e794      	b.n	800964e <_dtoa_r+0x40e>
 8009724:	9901      	ldr	r1, [sp, #4]
 8009726:	4b4c      	ldr	r3, [pc, #304]	; (8009858 <_dtoa_r+0x618>)
 8009728:	4431      	add	r1, r6
 800972a:	910d      	str	r1, [sp, #52]	; 0x34
 800972c:	9908      	ldr	r1, [sp, #32]
 800972e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009732:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009736:	2900      	cmp	r1, #0
 8009738:	d043      	beq.n	80097c2 <_dtoa_r+0x582>
 800973a:	494d      	ldr	r1, [pc, #308]	; (8009870 <_dtoa_r+0x630>)
 800973c:	2000      	movs	r0, #0
 800973e:	f7f7 f8a5 	bl	800088c <__aeabi_ddiv>
 8009742:	4652      	mov	r2, sl
 8009744:	465b      	mov	r3, fp
 8009746:	f7f6 fdbf 	bl	80002c8 <__aeabi_dsub>
 800974a:	9d01      	ldr	r5, [sp, #4]
 800974c:	4682      	mov	sl, r0
 800974e:	468b      	mov	fp, r1
 8009750:	4649      	mov	r1, r9
 8009752:	4640      	mov	r0, r8
 8009754:	f7f7 fa20 	bl	8000b98 <__aeabi_d2iz>
 8009758:	4606      	mov	r6, r0
 800975a:	f7f6 ff03 	bl	8000564 <__aeabi_i2d>
 800975e:	4602      	mov	r2, r0
 8009760:	460b      	mov	r3, r1
 8009762:	4640      	mov	r0, r8
 8009764:	4649      	mov	r1, r9
 8009766:	f7f6 fdaf 	bl	80002c8 <__aeabi_dsub>
 800976a:	3630      	adds	r6, #48	; 0x30
 800976c:	f805 6b01 	strb.w	r6, [r5], #1
 8009770:	4652      	mov	r2, sl
 8009772:	465b      	mov	r3, fp
 8009774:	4680      	mov	r8, r0
 8009776:	4689      	mov	r9, r1
 8009778:	f7f7 f9d0 	bl	8000b1c <__aeabi_dcmplt>
 800977c:	2800      	cmp	r0, #0
 800977e:	d163      	bne.n	8009848 <_dtoa_r+0x608>
 8009780:	4642      	mov	r2, r8
 8009782:	464b      	mov	r3, r9
 8009784:	4936      	ldr	r1, [pc, #216]	; (8009860 <_dtoa_r+0x620>)
 8009786:	2000      	movs	r0, #0
 8009788:	f7f6 fd9e 	bl	80002c8 <__aeabi_dsub>
 800978c:	4652      	mov	r2, sl
 800978e:	465b      	mov	r3, fp
 8009790:	f7f7 f9c4 	bl	8000b1c <__aeabi_dcmplt>
 8009794:	2800      	cmp	r0, #0
 8009796:	f040 80b5 	bne.w	8009904 <_dtoa_r+0x6c4>
 800979a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800979c:	429d      	cmp	r5, r3
 800979e:	d081      	beq.n	80096a4 <_dtoa_r+0x464>
 80097a0:	4b30      	ldr	r3, [pc, #192]	; (8009864 <_dtoa_r+0x624>)
 80097a2:	2200      	movs	r2, #0
 80097a4:	4650      	mov	r0, sl
 80097a6:	4659      	mov	r1, fp
 80097a8:	f7f6 ff46 	bl	8000638 <__aeabi_dmul>
 80097ac:	4b2d      	ldr	r3, [pc, #180]	; (8009864 <_dtoa_r+0x624>)
 80097ae:	4682      	mov	sl, r0
 80097b0:	468b      	mov	fp, r1
 80097b2:	4640      	mov	r0, r8
 80097b4:	4649      	mov	r1, r9
 80097b6:	2200      	movs	r2, #0
 80097b8:	f7f6 ff3e 	bl	8000638 <__aeabi_dmul>
 80097bc:	4680      	mov	r8, r0
 80097be:	4689      	mov	r9, r1
 80097c0:	e7c6      	b.n	8009750 <_dtoa_r+0x510>
 80097c2:	4650      	mov	r0, sl
 80097c4:	4659      	mov	r1, fp
 80097c6:	f7f6 ff37 	bl	8000638 <__aeabi_dmul>
 80097ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097cc:	9d01      	ldr	r5, [sp, #4]
 80097ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80097d0:	4682      	mov	sl, r0
 80097d2:	468b      	mov	fp, r1
 80097d4:	4649      	mov	r1, r9
 80097d6:	4640      	mov	r0, r8
 80097d8:	f7f7 f9de 	bl	8000b98 <__aeabi_d2iz>
 80097dc:	4606      	mov	r6, r0
 80097de:	f7f6 fec1 	bl	8000564 <__aeabi_i2d>
 80097e2:	3630      	adds	r6, #48	; 0x30
 80097e4:	4602      	mov	r2, r0
 80097e6:	460b      	mov	r3, r1
 80097e8:	4640      	mov	r0, r8
 80097ea:	4649      	mov	r1, r9
 80097ec:	f7f6 fd6c 	bl	80002c8 <__aeabi_dsub>
 80097f0:	f805 6b01 	strb.w	r6, [r5], #1
 80097f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097f6:	429d      	cmp	r5, r3
 80097f8:	4680      	mov	r8, r0
 80097fa:	4689      	mov	r9, r1
 80097fc:	f04f 0200 	mov.w	r2, #0
 8009800:	d124      	bne.n	800984c <_dtoa_r+0x60c>
 8009802:	4b1b      	ldr	r3, [pc, #108]	; (8009870 <_dtoa_r+0x630>)
 8009804:	4650      	mov	r0, sl
 8009806:	4659      	mov	r1, fp
 8009808:	f7f6 fd60 	bl	80002cc <__adddf3>
 800980c:	4602      	mov	r2, r0
 800980e:	460b      	mov	r3, r1
 8009810:	4640      	mov	r0, r8
 8009812:	4649      	mov	r1, r9
 8009814:	f7f7 f9a0 	bl	8000b58 <__aeabi_dcmpgt>
 8009818:	2800      	cmp	r0, #0
 800981a:	d173      	bne.n	8009904 <_dtoa_r+0x6c4>
 800981c:	4652      	mov	r2, sl
 800981e:	465b      	mov	r3, fp
 8009820:	4913      	ldr	r1, [pc, #76]	; (8009870 <_dtoa_r+0x630>)
 8009822:	2000      	movs	r0, #0
 8009824:	f7f6 fd50 	bl	80002c8 <__aeabi_dsub>
 8009828:	4602      	mov	r2, r0
 800982a:	460b      	mov	r3, r1
 800982c:	4640      	mov	r0, r8
 800982e:	4649      	mov	r1, r9
 8009830:	f7f7 f974 	bl	8000b1c <__aeabi_dcmplt>
 8009834:	2800      	cmp	r0, #0
 8009836:	f43f af35 	beq.w	80096a4 <_dtoa_r+0x464>
 800983a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800983c:	1e6b      	subs	r3, r5, #1
 800983e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009840:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009844:	2b30      	cmp	r3, #48	; 0x30
 8009846:	d0f8      	beq.n	800983a <_dtoa_r+0x5fa>
 8009848:	9700      	str	r7, [sp, #0]
 800984a:	e049      	b.n	80098e0 <_dtoa_r+0x6a0>
 800984c:	4b05      	ldr	r3, [pc, #20]	; (8009864 <_dtoa_r+0x624>)
 800984e:	f7f6 fef3 	bl	8000638 <__aeabi_dmul>
 8009852:	4680      	mov	r8, r0
 8009854:	4689      	mov	r9, r1
 8009856:	e7bd      	b.n	80097d4 <_dtoa_r+0x594>
 8009858:	0800ca40 	.word	0x0800ca40
 800985c:	0800ca18 	.word	0x0800ca18
 8009860:	3ff00000 	.word	0x3ff00000
 8009864:	40240000 	.word	0x40240000
 8009868:	401c0000 	.word	0x401c0000
 800986c:	40140000 	.word	0x40140000
 8009870:	3fe00000 	.word	0x3fe00000
 8009874:	9d01      	ldr	r5, [sp, #4]
 8009876:	4656      	mov	r6, sl
 8009878:	465f      	mov	r7, fp
 800987a:	4642      	mov	r2, r8
 800987c:	464b      	mov	r3, r9
 800987e:	4630      	mov	r0, r6
 8009880:	4639      	mov	r1, r7
 8009882:	f7f7 f803 	bl	800088c <__aeabi_ddiv>
 8009886:	f7f7 f987 	bl	8000b98 <__aeabi_d2iz>
 800988a:	4682      	mov	sl, r0
 800988c:	f7f6 fe6a 	bl	8000564 <__aeabi_i2d>
 8009890:	4642      	mov	r2, r8
 8009892:	464b      	mov	r3, r9
 8009894:	f7f6 fed0 	bl	8000638 <__aeabi_dmul>
 8009898:	4602      	mov	r2, r0
 800989a:	460b      	mov	r3, r1
 800989c:	4630      	mov	r0, r6
 800989e:	4639      	mov	r1, r7
 80098a0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80098a4:	f7f6 fd10 	bl	80002c8 <__aeabi_dsub>
 80098a8:	f805 6b01 	strb.w	r6, [r5], #1
 80098ac:	9e01      	ldr	r6, [sp, #4]
 80098ae:	9f03      	ldr	r7, [sp, #12]
 80098b0:	1bae      	subs	r6, r5, r6
 80098b2:	42b7      	cmp	r7, r6
 80098b4:	4602      	mov	r2, r0
 80098b6:	460b      	mov	r3, r1
 80098b8:	d135      	bne.n	8009926 <_dtoa_r+0x6e6>
 80098ba:	f7f6 fd07 	bl	80002cc <__adddf3>
 80098be:	4642      	mov	r2, r8
 80098c0:	464b      	mov	r3, r9
 80098c2:	4606      	mov	r6, r0
 80098c4:	460f      	mov	r7, r1
 80098c6:	f7f7 f947 	bl	8000b58 <__aeabi_dcmpgt>
 80098ca:	b9d0      	cbnz	r0, 8009902 <_dtoa_r+0x6c2>
 80098cc:	4642      	mov	r2, r8
 80098ce:	464b      	mov	r3, r9
 80098d0:	4630      	mov	r0, r6
 80098d2:	4639      	mov	r1, r7
 80098d4:	f7f7 f918 	bl	8000b08 <__aeabi_dcmpeq>
 80098d8:	b110      	cbz	r0, 80098e0 <_dtoa_r+0x6a0>
 80098da:	f01a 0f01 	tst.w	sl, #1
 80098de:	d110      	bne.n	8009902 <_dtoa_r+0x6c2>
 80098e0:	4620      	mov	r0, r4
 80098e2:	ee18 1a10 	vmov	r1, s16
 80098e6:	f000 fe87 	bl	800a5f8 <_Bfree>
 80098ea:	2300      	movs	r3, #0
 80098ec:	9800      	ldr	r0, [sp, #0]
 80098ee:	702b      	strb	r3, [r5, #0]
 80098f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098f2:	3001      	adds	r0, #1
 80098f4:	6018      	str	r0, [r3, #0]
 80098f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	f43f acf1 	beq.w	80092e0 <_dtoa_r+0xa0>
 80098fe:	601d      	str	r5, [r3, #0]
 8009900:	e4ee      	b.n	80092e0 <_dtoa_r+0xa0>
 8009902:	9f00      	ldr	r7, [sp, #0]
 8009904:	462b      	mov	r3, r5
 8009906:	461d      	mov	r5, r3
 8009908:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800990c:	2a39      	cmp	r2, #57	; 0x39
 800990e:	d106      	bne.n	800991e <_dtoa_r+0x6de>
 8009910:	9a01      	ldr	r2, [sp, #4]
 8009912:	429a      	cmp	r2, r3
 8009914:	d1f7      	bne.n	8009906 <_dtoa_r+0x6c6>
 8009916:	9901      	ldr	r1, [sp, #4]
 8009918:	2230      	movs	r2, #48	; 0x30
 800991a:	3701      	adds	r7, #1
 800991c:	700a      	strb	r2, [r1, #0]
 800991e:	781a      	ldrb	r2, [r3, #0]
 8009920:	3201      	adds	r2, #1
 8009922:	701a      	strb	r2, [r3, #0]
 8009924:	e790      	b.n	8009848 <_dtoa_r+0x608>
 8009926:	4ba6      	ldr	r3, [pc, #664]	; (8009bc0 <_dtoa_r+0x980>)
 8009928:	2200      	movs	r2, #0
 800992a:	f7f6 fe85 	bl	8000638 <__aeabi_dmul>
 800992e:	2200      	movs	r2, #0
 8009930:	2300      	movs	r3, #0
 8009932:	4606      	mov	r6, r0
 8009934:	460f      	mov	r7, r1
 8009936:	f7f7 f8e7 	bl	8000b08 <__aeabi_dcmpeq>
 800993a:	2800      	cmp	r0, #0
 800993c:	d09d      	beq.n	800987a <_dtoa_r+0x63a>
 800993e:	e7cf      	b.n	80098e0 <_dtoa_r+0x6a0>
 8009940:	9a08      	ldr	r2, [sp, #32]
 8009942:	2a00      	cmp	r2, #0
 8009944:	f000 80d7 	beq.w	8009af6 <_dtoa_r+0x8b6>
 8009948:	9a06      	ldr	r2, [sp, #24]
 800994a:	2a01      	cmp	r2, #1
 800994c:	f300 80ba 	bgt.w	8009ac4 <_dtoa_r+0x884>
 8009950:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009952:	2a00      	cmp	r2, #0
 8009954:	f000 80b2 	beq.w	8009abc <_dtoa_r+0x87c>
 8009958:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800995c:	9e07      	ldr	r6, [sp, #28]
 800995e:	9d04      	ldr	r5, [sp, #16]
 8009960:	9a04      	ldr	r2, [sp, #16]
 8009962:	441a      	add	r2, r3
 8009964:	9204      	str	r2, [sp, #16]
 8009966:	9a05      	ldr	r2, [sp, #20]
 8009968:	2101      	movs	r1, #1
 800996a:	441a      	add	r2, r3
 800996c:	4620      	mov	r0, r4
 800996e:	9205      	str	r2, [sp, #20]
 8009970:	f000 ff44 	bl	800a7fc <__i2b>
 8009974:	4607      	mov	r7, r0
 8009976:	2d00      	cmp	r5, #0
 8009978:	dd0c      	ble.n	8009994 <_dtoa_r+0x754>
 800997a:	9b05      	ldr	r3, [sp, #20]
 800997c:	2b00      	cmp	r3, #0
 800997e:	dd09      	ble.n	8009994 <_dtoa_r+0x754>
 8009980:	42ab      	cmp	r3, r5
 8009982:	9a04      	ldr	r2, [sp, #16]
 8009984:	bfa8      	it	ge
 8009986:	462b      	movge	r3, r5
 8009988:	1ad2      	subs	r2, r2, r3
 800998a:	9204      	str	r2, [sp, #16]
 800998c:	9a05      	ldr	r2, [sp, #20]
 800998e:	1aed      	subs	r5, r5, r3
 8009990:	1ad3      	subs	r3, r2, r3
 8009992:	9305      	str	r3, [sp, #20]
 8009994:	9b07      	ldr	r3, [sp, #28]
 8009996:	b31b      	cbz	r3, 80099e0 <_dtoa_r+0x7a0>
 8009998:	9b08      	ldr	r3, [sp, #32]
 800999a:	2b00      	cmp	r3, #0
 800999c:	f000 80af 	beq.w	8009afe <_dtoa_r+0x8be>
 80099a0:	2e00      	cmp	r6, #0
 80099a2:	dd13      	ble.n	80099cc <_dtoa_r+0x78c>
 80099a4:	4639      	mov	r1, r7
 80099a6:	4632      	mov	r2, r6
 80099a8:	4620      	mov	r0, r4
 80099aa:	f000 ffe7 	bl	800a97c <__pow5mult>
 80099ae:	ee18 2a10 	vmov	r2, s16
 80099b2:	4601      	mov	r1, r0
 80099b4:	4607      	mov	r7, r0
 80099b6:	4620      	mov	r0, r4
 80099b8:	f000 ff36 	bl	800a828 <__multiply>
 80099bc:	ee18 1a10 	vmov	r1, s16
 80099c0:	4680      	mov	r8, r0
 80099c2:	4620      	mov	r0, r4
 80099c4:	f000 fe18 	bl	800a5f8 <_Bfree>
 80099c8:	ee08 8a10 	vmov	s16, r8
 80099cc:	9b07      	ldr	r3, [sp, #28]
 80099ce:	1b9a      	subs	r2, r3, r6
 80099d0:	d006      	beq.n	80099e0 <_dtoa_r+0x7a0>
 80099d2:	ee18 1a10 	vmov	r1, s16
 80099d6:	4620      	mov	r0, r4
 80099d8:	f000 ffd0 	bl	800a97c <__pow5mult>
 80099dc:	ee08 0a10 	vmov	s16, r0
 80099e0:	2101      	movs	r1, #1
 80099e2:	4620      	mov	r0, r4
 80099e4:	f000 ff0a 	bl	800a7fc <__i2b>
 80099e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	4606      	mov	r6, r0
 80099ee:	f340 8088 	ble.w	8009b02 <_dtoa_r+0x8c2>
 80099f2:	461a      	mov	r2, r3
 80099f4:	4601      	mov	r1, r0
 80099f6:	4620      	mov	r0, r4
 80099f8:	f000 ffc0 	bl	800a97c <__pow5mult>
 80099fc:	9b06      	ldr	r3, [sp, #24]
 80099fe:	2b01      	cmp	r3, #1
 8009a00:	4606      	mov	r6, r0
 8009a02:	f340 8081 	ble.w	8009b08 <_dtoa_r+0x8c8>
 8009a06:	f04f 0800 	mov.w	r8, #0
 8009a0a:	6933      	ldr	r3, [r6, #16]
 8009a0c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009a10:	6918      	ldr	r0, [r3, #16]
 8009a12:	f000 fea3 	bl	800a75c <__hi0bits>
 8009a16:	f1c0 0020 	rsb	r0, r0, #32
 8009a1a:	9b05      	ldr	r3, [sp, #20]
 8009a1c:	4418      	add	r0, r3
 8009a1e:	f010 001f 	ands.w	r0, r0, #31
 8009a22:	f000 8092 	beq.w	8009b4a <_dtoa_r+0x90a>
 8009a26:	f1c0 0320 	rsb	r3, r0, #32
 8009a2a:	2b04      	cmp	r3, #4
 8009a2c:	f340 808a 	ble.w	8009b44 <_dtoa_r+0x904>
 8009a30:	f1c0 001c 	rsb	r0, r0, #28
 8009a34:	9b04      	ldr	r3, [sp, #16]
 8009a36:	4403      	add	r3, r0
 8009a38:	9304      	str	r3, [sp, #16]
 8009a3a:	9b05      	ldr	r3, [sp, #20]
 8009a3c:	4403      	add	r3, r0
 8009a3e:	4405      	add	r5, r0
 8009a40:	9305      	str	r3, [sp, #20]
 8009a42:	9b04      	ldr	r3, [sp, #16]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	dd07      	ble.n	8009a58 <_dtoa_r+0x818>
 8009a48:	ee18 1a10 	vmov	r1, s16
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	4620      	mov	r0, r4
 8009a50:	f000 ffee 	bl	800aa30 <__lshift>
 8009a54:	ee08 0a10 	vmov	s16, r0
 8009a58:	9b05      	ldr	r3, [sp, #20]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	dd05      	ble.n	8009a6a <_dtoa_r+0x82a>
 8009a5e:	4631      	mov	r1, r6
 8009a60:	461a      	mov	r2, r3
 8009a62:	4620      	mov	r0, r4
 8009a64:	f000 ffe4 	bl	800aa30 <__lshift>
 8009a68:	4606      	mov	r6, r0
 8009a6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d06e      	beq.n	8009b4e <_dtoa_r+0x90e>
 8009a70:	ee18 0a10 	vmov	r0, s16
 8009a74:	4631      	mov	r1, r6
 8009a76:	f001 f84b 	bl	800ab10 <__mcmp>
 8009a7a:	2800      	cmp	r0, #0
 8009a7c:	da67      	bge.n	8009b4e <_dtoa_r+0x90e>
 8009a7e:	9b00      	ldr	r3, [sp, #0]
 8009a80:	3b01      	subs	r3, #1
 8009a82:	ee18 1a10 	vmov	r1, s16
 8009a86:	9300      	str	r3, [sp, #0]
 8009a88:	220a      	movs	r2, #10
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	4620      	mov	r0, r4
 8009a8e:	f000 fdd5 	bl	800a63c <__multadd>
 8009a92:	9b08      	ldr	r3, [sp, #32]
 8009a94:	ee08 0a10 	vmov	s16, r0
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	f000 81b1 	beq.w	8009e00 <_dtoa_r+0xbc0>
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	4639      	mov	r1, r7
 8009aa2:	220a      	movs	r2, #10
 8009aa4:	4620      	mov	r0, r4
 8009aa6:	f000 fdc9 	bl	800a63c <__multadd>
 8009aaa:	9b02      	ldr	r3, [sp, #8]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	4607      	mov	r7, r0
 8009ab0:	f300 808e 	bgt.w	8009bd0 <_dtoa_r+0x990>
 8009ab4:	9b06      	ldr	r3, [sp, #24]
 8009ab6:	2b02      	cmp	r3, #2
 8009ab8:	dc51      	bgt.n	8009b5e <_dtoa_r+0x91e>
 8009aba:	e089      	b.n	8009bd0 <_dtoa_r+0x990>
 8009abc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009abe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009ac2:	e74b      	b.n	800995c <_dtoa_r+0x71c>
 8009ac4:	9b03      	ldr	r3, [sp, #12]
 8009ac6:	1e5e      	subs	r6, r3, #1
 8009ac8:	9b07      	ldr	r3, [sp, #28]
 8009aca:	42b3      	cmp	r3, r6
 8009acc:	bfbf      	itttt	lt
 8009ace:	9b07      	ldrlt	r3, [sp, #28]
 8009ad0:	9607      	strlt	r6, [sp, #28]
 8009ad2:	1af2      	sublt	r2, r6, r3
 8009ad4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009ad6:	bfb6      	itet	lt
 8009ad8:	189b      	addlt	r3, r3, r2
 8009ada:	1b9e      	subge	r6, r3, r6
 8009adc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009ade:	9b03      	ldr	r3, [sp, #12]
 8009ae0:	bfb8      	it	lt
 8009ae2:	2600      	movlt	r6, #0
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	bfb7      	itett	lt
 8009ae8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009aec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009af0:	1a9d      	sublt	r5, r3, r2
 8009af2:	2300      	movlt	r3, #0
 8009af4:	e734      	b.n	8009960 <_dtoa_r+0x720>
 8009af6:	9e07      	ldr	r6, [sp, #28]
 8009af8:	9d04      	ldr	r5, [sp, #16]
 8009afa:	9f08      	ldr	r7, [sp, #32]
 8009afc:	e73b      	b.n	8009976 <_dtoa_r+0x736>
 8009afe:	9a07      	ldr	r2, [sp, #28]
 8009b00:	e767      	b.n	80099d2 <_dtoa_r+0x792>
 8009b02:	9b06      	ldr	r3, [sp, #24]
 8009b04:	2b01      	cmp	r3, #1
 8009b06:	dc18      	bgt.n	8009b3a <_dtoa_r+0x8fa>
 8009b08:	f1ba 0f00 	cmp.w	sl, #0
 8009b0c:	d115      	bne.n	8009b3a <_dtoa_r+0x8fa>
 8009b0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009b12:	b993      	cbnz	r3, 8009b3a <_dtoa_r+0x8fa>
 8009b14:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009b18:	0d1b      	lsrs	r3, r3, #20
 8009b1a:	051b      	lsls	r3, r3, #20
 8009b1c:	b183      	cbz	r3, 8009b40 <_dtoa_r+0x900>
 8009b1e:	9b04      	ldr	r3, [sp, #16]
 8009b20:	3301      	adds	r3, #1
 8009b22:	9304      	str	r3, [sp, #16]
 8009b24:	9b05      	ldr	r3, [sp, #20]
 8009b26:	3301      	adds	r3, #1
 8009b28:	9305      	str	r3, [sp, #20]
 8009b2a:	f04f 0801 	mov.w	r8, #1
 8009b2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	f47f af6a 	bne.w	8009a0a <_dtoa_r+0x7ca>
 8009b36:	2001      	movs	r0, #1
 8009b38:	e76f      	b.n	8009a1a <_dtoa_r+0x7da>
 8009b3a:	f04f 0800 	mov.w	r8, #0
 8009b3e:	e7f6      	b.n	8009b2e <_dtoa_r+0x8ee>
 8009b40:	4698      	mov	r8, r3
 8009b42:	e7f4      	b.n	8009b2e <_dtoa_r+0x8ee>
 8009b44:	f43f af7d 	beq.w	8009a42 <_dtoa_r+0x802>
 8009b48:	4618      	mov	r0, r3
 8009b4a:	301c      	adds	r0, #28
 8009b4c:	e772      	b.n	8009a34 <_dtoa_r+0x7f4>
 8009b4e:	9b03      	ldr	r3, [sp, #12]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	dc37      	bgt.n	8009bc4 <_dtoa_r+0x984>
 8009b54:	9b06      	ldr	r3, [sp, #24]
 8009b56:	2b02      	cmp	r3, #2
 8009b58:	dd34      	ble.n	8009bc4 <_dtoa_r+0x984>
 8009b5a:	9b03      	ldr	r3, [sp, #12]
 8009b5c:	9302      	str	r3, [sp, #8]
 8009b5e:	9b02      	ldr	r3, [sp, #8]
 8009b60:	b96b      	cbnz	r3, 8009b7e <_dtoa_r+0x93e>
 8009b62:	4631      	mov	r1, r6
 8009b64:	2205      	movs	r2, #5
 8009b66:	4620      	mov	r0, r4
 8009b68:	f000 fd68 	bl	800a63c <__multadd>
 8009b6c:	4601      	mov	r1, r0
 8009b6e:	4606      	mov	r6, r0
 8009b70:	ee18 0a10 	vmov	r0, s16
 8009b74:	f000 ffcc 	bl	800ab10 <__mcmp>
 8009b78:	2800      	cmp	r0, #0
 8009b7a:	f73f adbb 	bgt.w	80096f4 <_dtoa_r+0x4b4>
 8009b7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b80:	9d01      	ldr	r5, [sp, #4]
 8009b82:	43db      	mvns	r3, r3
 8009b84:	9300      	str	r3, [sp, #0]
 8009b86:	f04f 0800 	mov.w	r8, #0
 8009b8a:	4631      	mov	r1, r6
 8009b8c:	4620      	mov	r0, r4
 8009b8e:	f000 fd33 	bl	800a5f8 <_Bfree>
 8009b92:	2f00      	cmp	r7, #0
 8009b94:	f43f aea4 	beq.w	80098e0 <_dtoa_r+0x6a0>
 8009b98:	f1b8 0f00 	cmp.w	r8, #0
 8009b9c:	d005      	beq.n	8009baa <_dtoa_r+0x96a>
 8009b9e:	45b8      	cmp	r8, r7
 8009ba0:	d003      	beq.n	8009baa <_dtoa_r+0x96a>
 8009ba2:	4641      	mov	r1, r8
 8009ba4:	4620      	mov	r0, r4
 8009ba6:	f000 fd27 	bl	800a5f8 <_Bfree>
 8009baa:	4639      	mov	r1, r7
 8009bac:	4620      	mov	r0, r4
 8009bae:	f000 fd23 	bl	800a5f8 <_Bfree>
 8009bb2:	e695      	b.n	80098e0 <_dtoa_r+0x6a0>
 8009bb4:	2600      	movs	r6, #0
 8009bb6:	4637      	mov	r7, r6
 8009bb8:	e7e1      	b.n	8009b7e <_dtoa_r+0x93e>
 8009bba:	9700      	str	r7, [sp, #0]
 8009bbc:	4637      	mov	r7, r6
 8009bbe:	e599      	b.n	80096f4 <_dtoa_r+0x4b4>
 8009bc0:	40240000 	.word	0x40240000
 8009bc4:	9b08      	ldr	r3, [sp, #32]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	f000 80ca 	beq.w	8009d60 <_dtoa_r+0xb20>
 8009bcc:	9b03      	ldr	r3, [sp, #12]
 8009bce:	9302      	str	r3, [sp, #8]
 8009bd0:	2d00      	cmp	r5, #0
 8009bd2:	dd05      	ble.n	8009be0 <_dtoa_r+0x9a0>
 8009bd4:	4639      	mov	r1, r7
 8009bd6:	462a      	mov	r2, r5
 8009bd8:	4620      	mov	r0, r4
 8009bda:	f000 ff29 	bl	800aa30 <__lshift>
 8009bde:	4607      	mov	r7, r0
 8009be0:	f1b8 0f00 	cmp.w	r8, #0
 8009be4:	d05b      	beq.n	8009c9e <_dtoa_r+0xa5e>
 8009be6:	6879      	ldr	r1, [r7, #4]
 8009be8:	4620      	mov	r0, r4
 8009bea:	f000 fcc5 	bl	800a578 <_Balloc>
 8009bee:	4605      	mov	r5, r0
 8009bf0:	b928      	cbnz	r0, 8009bfe <_dtoa_r+0x9be>
 8009bf2:	4b87      	ldr	r3, [pc, #540]	; (8009e10 <_dtoa_r+0xbd0>)
 8009bf4:	4602      	mov	r2, r0
 8009bf6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009bfa:	f7ff bb3b 	b.w	8009274 <_dtoa_r+0x34>
 8009bfe:	693a      	ldr	r2, [r7, #16]
 8009c00:	3202      	adds	r2, #2
 8009c02:	0092      	lsls	r2, r2, #2
 8009c04:	f107 010c 	add.w	r1, r7, #12
 8009c08:	300c      	adds	r0, #12
 8009c0a:	f000 fca7 	bl	800a55c <memcpy>
 8009c0e:	2201      	movs	r2, #1
 8009c10:	4629      	mov	r1, r5
 8009c12:	4620      	mov	r0, r4
 8009c14:	f000 ff0c 	bl	800aa30 <__lshift>
 8009c18:	9b01      	ldr	r3, [sp, #4]
 8009c1a:	f103 0901 	add.w	r9, r3, #1
 8009c1e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009c22:	4413      	add	r3, r2
 8009c24:	9305      	str	r3, [sp, #20]
 8009c26:	f00a 0301 	and.w	r3, sl, #1
 8009c2a:	46b8      	mov	r8, r7
 8009c2c:	9304      	str	r3, [sp, #16]
 8009c2e:	4607      	mov	r7, r0
 8009c30:	4631      	mov	r1, r6
 8009c32:	ee18 0a10 	vmov	r0, s16
 8009c36:	f7ff fa75 	bl	8009124 <quorem>
 8009c3a:	4641      	mov	r1, r8
 8009c3c:	9002      	str	r0, [sp, #8]
 8009c3e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009c42:	ee18 0a10 	vmov	r0, s16
 8009c46:	f000 ff63 	bl	800ab10 <__mcmp>
 8009c4a:	463a      	mov	r2, r7
 8009c4c:	9003      	str	r0, [sp, #12]
 8009c4e:	4631      	mov	r1, r6
 8009c50:	4620      	mov	r0, r4
 8009c52:	f000 ff79 	bl	800ab48 <__mdiff>
 8009c56:	68c2      	ldr	r2, [r0, #12]
 8009c58:	f109 3bff 	add.w	fp, r9, #4294967295
 8009c5c:	4605      	mov	r5, r0
 8009c5e:	bb02      	cbnz	r2, 8009ca2 <_dtoa_r+0xa62>
 8009c60:	4601      	mov	r1, r0
 8009c62:	ee18 0a10 	vmov	r0, s16
 8009c66:	f000 ff53 	bl	800ab10 <__mcmp>
 8009c6a:	4602      	mov	r2, r0
 8009c6c:	4629      	mov	r1, r5
 8009c6e:	4620      	mov	r0, r4
 8009c70:	9207      	str	r2, [sp, #28]
 8009c72:	f000 fcc1 	bl	800a5f8 <_Bfree>
 8009c76:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009c7a:	ea43 0102 	orr.w	r1, r3, r2
 8009c7e:	9b04      	ldr	r3, [sp, #16]
 8009c80:	430b      	orrs	r3, r1
 8009c82:	464d      	mov	r5, r9
 8009c84:	d10f      	bne.n	8009ca6 <_dtoa_r+0xa66>
 8009c86:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009c8a:	d02a      	beq.n	8009ce2 <_dtoa_r+0xaa2>
 8009c8c:	9b03      	ldr	r3, [sp, #12]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	dd02      	ble.n	8009c98 <_dtoa_r+0xa58>
 8009c92:	9b02      	ldr	r3, [sp, #8]
 8009c94:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009c98:	f88b a000 	strb.w	sl, [fp]
 8009c9c:	e775      	b.n	8009b8a <_dtoa_r+0x94a>
 8009c9e:	4638      	mov	r0, r7
 8009ca0:	e7ba      	b.n	8009c18 <_dtoa_r+0x9d8>
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	e7e2      	b.n	8009c6c <_dtoa_r+0xa2c>
 8009ca6:	9b03      	ldr	r3, [sp, #12]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	db04      	blt.n	8009cb6 <_dtoa_r+0xa76>
 8009cac:	9906      	ldr	r1, [sp, #24]
 8009cae:	430b      	orrs	r3, r1
 8009cb0:	9904      	ldr	r1, [sp, #16]
 8009cb2:	430b      	orrs	r3, r1
 8009cb4:	d122      	bne.n	8009cfc <_dtoa_r+0xabc>
 8009cb6:	2a00      	cmp	r2, #0
 8009cb8:	ddee      	ble.n	8009c98 <_dtoa_r+0xa58>
 8009cba:	ee18 1a10 	vmov	r1, s16
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	4620      	mov	r0, r4
 8009cc2:	f000 feb5 	bl	800aa30 <__lshift>
 8009cc6:	4631      	mov	r1, r6
 8009cc8:	ee08 0a10 	vmov	s16, r0
 8009ccc:	f000 ff20 	bl	800ab10 <__mcmp>
 8009cd0:	2800      	cmp	r0, #0
 8009cd2:	dc03      	bgt.n	8009cdc <_dtoa_r+0xa9c>
 8009cd4:	d1e0      	bne.n	8009c98 <_dtoa_r+0xa58>
 8009cd6:	f01a 0f01 	tst.w	sl, #1
 8009cda:	d0dd      	beq.n	8009c98 <_dtoa_r+0xa58>
 8009cdc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009ce0:	d1d7      	bne.n	8009c92 <_dtoa_r+0xa52>
 8009ce2:	2339      	movs	r3, #57	; 0x39
 8009ce4:	f88b 3000 	strb.w	r3, [fp]
 8009ce8:	462b      	mov	r3, r5
 8009cea:	461d      	mov	r5, r3
 8009cec:	3b01      	subs	r3, #1
 8009cee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009cf2:	2a39      	cmp	r2, #57	; 0x39
 8009cf4:	d071      	beq.n	8009dda <_dtoa_r+0xb9a>
 8009cf6:	3201      	adds	r2, #1
 8009cf8:	701a      	strb	r2, [r3, #0]
 8009cfa:	e746      	b.n	8009b8a <_dtoa_r+0x94a>
 8009cfc:	2a00      	cmp	r2, #0
 8009cfe:	dd07      	ble.n	8009d10 <_dtoa_r+0xad0>
 8009d00:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009d04:	d0ed      	beq.n	8009ce2 <_dtoa_r+0xaa2>
 8009d06:	f10a 0301 	add.w	r3, sl, #1
 8009d0a:	f88b 3000 	strb.w	r3, [fp]
 8009d0e:	e73c      	b.n	8009b8a <_dtoa_r+0x94a>
 8009d10:	9b05      	ldr	r3, [sp, #20]
 8009d12:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009d16:	4599      	cmp	r9, r3
 8009d18:	d047      	beq.n	8009daa <_dtoa_r+0xb6a>
 8009d1a:	ee18 1a10 	vmov	r1, s16
 8009d1e:	2300      	movs	r3, #0
 8009d20:	220a      	movs	r2, #10
 8009d22:	4620      	mov	r0, r4
 8009d24:	f000 fc8a 	bl	800a63c <__multadd>
 8009d28:	45b8      	cmp	r8, r7
 8009d2a:	ee08 0a10 	vmov	s16, r0
 8009d2e:	f04f 0300 	mov.w	r3, #0
 8009d32:	f04f 020a 	mov.w	r2, #10
 8009d36:	4641      	mov	r1, r8
 8009d38:	4620      	mov	r0, r4
 8009d3a:	d106      	bne.n	8009d4a <_dtoa_r+0xb0a>
 8009d3c:	f000 fc7e 	bl	800a63c <__multadd>
 8009d40:	4680      	mov	r8, r0
 8009d42:	4607      	mov	r7, r0
 8009d44:	f109 0901 	add.w	r9, r9, #1
 8009d48:	e772      	b.n	8009c30 <_dtoa_r+0x9f0>
 8009d4a:	f000 fc77 	bl	800a63c <__multadd>
 8009d4e:	4639      	mov	r1, r7
 8009d50:	4680      	mov	r8, r0
 8009d52:	2300      	movs	r3, #0
 8009d54:	220a      	movs	r2, #10
 8009d56:	4620      	mov	r0, r4
 8009d58:	f000 fc70 	bl	800a63c <__multadd>
 8009d5c:	4607      	mov	r7, r0
 8009d5e:	e7f1      	b.n	8009d44 <_dtoa_r+0xb04>
 8009d60:	9b03      	ldr	r3, [sp, #12]
 8009d62:	9302      	str	r3, [sp, #8]
 8009d64:	9d01      	ldr	r5, [sp, #4]
 8009d66:	ee18 0a10 	vmov	r0, s16
 8009d6a:	4631      	mov	r1, r6
 8009d6c:	f7ff f9da 	bl	8009124 <quorem>
 8009d70:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009d74:	9b01      	ldr	r3, [sp, #4]
 8009d76:	f805 ab01 	strb.w	sl, [r5], #1
 8009d7a:	1aea      	subs	r2, r5, r3
 8009d7c:	9b02      	ldr	r3, [sp, #8]
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	dd09      	ble.n	8009d96 <_dtoa_r+0xb56>
 8009d82:	ee18 1a10 	vmov	r1, s16
 8009d86:	2300      	movs	r3, #0
 8009d88:	220a      	movs	r2, #10
 8009d8a:	4620      	mov	r0, r4
 8009d8c:	f000 fc56 	bl	800a63c <__multadd>
 8009d90:	ee08 0a10 	vmov	s16, r0
 8009d94:	e7e7      	b.n	8009d66 <_dtoa_r+0xb26>
 8009d96:	9b02      	ldr	r3, [sp, #8]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	bfc8      	it	gt
 8009d9c:	461d      	movgt	r5, r3
 8009d9e:	9b01      	ldr	r3, [sp, #4]
 8009da0:	bfd8      	it	le
 8009da2:	2501      	movle	r5, #1
 8009da4:	441d      	add	r5, r3
 8009da6:	f04f 0800 	mov.w	r8, #0
 8009daa:	ee18 1a10 	vmov	r1, s16
 8009dae:	2201      	movs	r2, #1
 8009db0:	4620      	mov	r0, r4
 8009db2:	f000 fe3d 	bl	800aa30 <__lshift>
 8009db6:	4631      	mov	r1, r6
 8009db8:	ee08 0a10 	vmov	s16, r0
 8009dbc:	f000 fea8 	bl	800ab10 <__mcmp>
 8009dc0:	2800      	cmp	r0, #0
 8009dc2:	dc91      	bgt.n	8009ce8 <_dtoa_r+0xaa8>
 8009dc4:	d102      	bne.n	8009dcc <_dtoa_r+0xb8c>
 8009dc6:	f01a 0f01 	tst.w	sl, #1
 8009dca:	d18d      	bne.n	8009ce8 <_dtoa_r+0xaa8>
 8009dcc:	462b      	mov	r3, r5
 8009dce:	461d      	mov	r5, r3
 8009dd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009dd4:	2a30      	cmp	r2, #48	; 0x30
 8009dd6:	d0fa      	beq.n	8009dce <_dtoa_r+0xb8e>
 8009dd8:	e6d7      	b.n	8009b8a <_dtoa_r+0x94a>
 8009dda:	9a01      	ldr	r2, [sp, #4]
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	d184      	bne.n	8009cea <_dtoa_r+0xaaa>
 8009de0:	9b00      	ldr	r3, [sp, #0]
 8009de2:	3301      	adds	r3, #1
 8009de4:	9300      	str	r3, [sp, #0]
 8009de6:	2331      	movs	r3, #49	; 0x31
 8009de8:	7013      	strb	r3, [r2, #0]
 8009dea:	e6ce      	b.n	8009b8a <_dtoa_r+0x94a>
 8009dec:	4b09      	ldr	r3, [pc, #36]	; (8009e14 <_dtoa_r+0xbd4>)
 8009dee:	f7ff ba95 	b.w	800931c <_dtoa_r+0xdc>
 8009df2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	f47f aa6e 	bne.w	80092d6 <_dtoa_r+0x96>
 8009dfa:	4b07      	ldr	r3, [pc, #28]	; (8009e18 <_dtoa_r+0xbd8>)
 8009dfc:	f7ff ba8e 	b.w	800931c <_dtoa_r+0xdc>
 8009e00:	9b02      	ldr	r3, [sp, #8]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	dcae      	bgt.n	8009d64 <_dtoa_r+0xb24>
 8009e06:	9b06      	ldr	r3, [sp, #24]
 8009e08:	2b02      	cmp	r3, #2
 8009e0a:	f73f aea8 	bgt.w	8009b5e <_dtoa_r+0x91e>
 8009e0e:	e7a9      	b.n	8009d64 <_dtoa_r+0xb24>
 8009e10:	0800c930 	.word	0x0800c930
 8009e14:	0800cb29 	.word	0x0800cb29
 8009e18:	0800c8b1 	.word	0x0800c8b1

08009e1c <rshift>:
 8009e1c:	6903      	ldr	r3, [r0, #16]
 8009e1e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009e22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009e26:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009e2a:	f100 0414 	add.w	r4, r0, #20
 8009e2e:	dd45      	ble.n	8009ebc <rshift+0xa0>
 8009e30:	f011 011f 	ands.w	r1, r1, #31
 8009e34:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009e38:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009e3c:	d10c      	bne.n	8009e58 <rshift+0x3c>
 8009e3e:	f100 0710 	add.w	r7, r0, #16
 8009e42:	4629      	mov	r1, r5
 8009e44:	42b1      	cmp	r1, r6
 8009e46:	d334      	bcc.n	8009eb2 <rshift+0x96>
 8009e48:	1a9b      	subs	r3, r3, r2
 8009e4a:	009b      	lsls	r3, r3, #2
 8009e4c:	1eea      	subs	r2, r5, #3
 8009e4e:	4296      	cmp	r6, r2
 8009e50:	bf38      	it	cc
 8009e52:	2300      	movcc	r3, #0
 8009e54:	4423      	add	r3, r4
 8009e56:	e015      	b.n	8009e84 <rshift+0x68>
 8009e58:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009e5c:	f1c1 0820 	rsb	r8, r1, #32
 8009e60:	40cf      	lsrs	r7, r1
 8009e62:	f105 0e04 	add.w	lr, r5, #4
 8009e66:	46a1      	mov	r9, r4
 8009e68:	4576      	cmp	r6, lr
 8009e6a:	46f4      	mov	ip, lr
 8009e6c:	d815      	bhi.n	8009e9a <rshift+0x7e>
 8009e6e:	1a9a      	subs	r2, r3, r2
 8009e70:	0092      	lsls	r2, r2, #2
 8009e72:	3a04      	subs	r2, #4
 8009e74:	3501      	adds	r5, #1
 8009e76:	42ae      	cmp	r6, r5
 8009e78:	bf38      	it	cc
 8009e7a:	2200      	movcc	r2, #0
 8009e7c:	18a3      	adds	r3, r4, r2
 8009e7e:	50a7      	str	r7, [r4, r2]
 8009e80:	b107      	cbz	r7, 8009e84 <rshift+0x68>
 8009e82:	3304      	adds	r3, #4
 8009e84:	1b1a      	subs	r2, r3, r4
 8009e86:	42a3      	cmp	r3, r4
 8009e88:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009e8c:	bf08      	it	eq
 8009e8e:	2300      	moveq	r3, #0
 8009e90:	6102      	str	r2, [r0, #16]
 8009e92:	bf08      	it	eq
 8009e94:	6143      	streq	r3, [r0, #20]
 8009e96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e9a:	f8dc c000 	ldr.w	ip, [ip]
 8009e9e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009ea2:	ea4c 0707 	orr.w	r7, ip, r7
 8009ea6:	f849 7b04 	str.w	r7, [r9], #4
 8009eaa:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009eae:	40cf      	lsrs	r7, r1
 8009eb0:	e7da      	b.n	8009e68 <rshift+0x4c>
 8009eb2:	f851 cb04 	ldr.w	ip, [r1], #4
 8009eb6:	f847 cf04 	str.w	ip, [r7, #4]!
 8009eba:	e7c3      	b.n	8009e44 <rshift+0x28>
 8009ebc:	4623      	mov	r3, r4
 8009ebe:	e7e1      	b.n	8009e84 <rshift+0x68>

08009ec0 <__hexdig_fun>:
 8009ec0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009ec4:	2b09      	cmp	r3, #9
 8009ec6:	d802      	bhi.n	8009ece <__hexdig_fun+0xe>
 8009ec8:	3820      	subs	r0, #32
 8009eca:	b2c0      	uxtb	r0, r0
 8009ecc:	4770      	bx	lr
 8009ece:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009ed2:	2b05      	cmp	r3, #5
 8009ed4:	d801      	bhi.n	8009eda <__hexdig_fun+0x1a>
 8009ed6:	3847      	subs	r0, #71	; 0x47
 8009ed8:	e7f7      	b.n	8009eca <__hexdig_fun+0xa>
 8009eda:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009ede:	2b05      	cmp	r3, #5
 8009ee0:	d801      	bhi.n	8009ee6 <__hexdig_fun+0x26>
 8009ee2:	3827      	subs	r0, #39	; 0x27
 8009ee4:	e7f1      	b.n	8009eca <__hexdig_fun+0xa>
 8009ee6:	2000      	movs	r0, #0
 8009ee8:	4770      	bx	lr
	...

08009eec <__gethex>:
 8009eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ef0:	ed2d 8b02 	vpush	{d8}
 8009ef4:	b089      	sub	sp, #36	; 0x24
 8009ef6:	ee08 0a10 	vmov	s16, r0
 8009efa:	9304      	str	r3, [sp, #16]
 8009efc:	4bb4      	ldr	r3, [pc, #720]	; (800a1d0 <__gethex+0x2e4>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	9301      	str	r3, [sp, #4]
 8009f02:	4618      	mov	r0, r3
 8009f04:	468b      	mov	fp, r1
 8009f06:	4690      	mov	r8, r2
 8009f08:	f7f6 f982 	bl	8000210 <strlen>
 8009f0c:	9b01      	ldr	r3, [sp, #4]
 8009f0e:	f8db 2000 	ldr.w	r2, [fp]
 8009f12:	4403      	add	r3, r0
 8009f14:	4682      	mov	sl, r0
 8009f16:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009f1a:	9305      	str	r3, [sp, #20]
 8009f1c:	1c93      	adds	r3, r2, #2
 8009f1e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009f22:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009f26:	32fe      	adds	r2, #254	; 0xfe
 8009f28:	18d1      	adds	r1, r2, r3
 8009f2a:	461f      	mov	r7, r3
 8009f2c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009f30:	9100      	str	r1, [sp, #0]
 8009f32:	2830      	cmp	r0, #48	; 0x30
 8009f34:	d0f8      	beq.n	8009f28 <__gethex+0x3c>
 8009f36:	f7ff ffc3 	bl	8009ec0 <__hexdig_fun>
 8009f3a:	4604      	mov	r4, r0
 8009f3c:	2800      	cmp	r0, #0
 8009f3e:	d13a      	bne.n	8009fb6 <__gethex+0xca>
 8009f40:	9901      	ldr	r1, [sp, #4]
 8009f42:	4652      	mov	r2, sl
 8009f44:	4638      	mov	r0, r7
 8009f46:	f001 fdb3 	bl	800bab0 <strncmp>
 8009f4a:	4605      	mov	r5, r0
 8009f4c:	2800      	cmp	r0, #0
 8009f4e:	d168      	bne.n	800a022 <__gethex+0x136>
 8009f50:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009f54:	eb07 060a 	add.w	r6, r7, sl
 8009f58:	f7ff ffb2 	bl	8009ec0 <__hexdig_fun>
 8009f5c:	2800      	cmp	r0, #0
 8009f5e:	d062      	beq.n	800a026 <__gethex+0x13a>
 8009f60:	4633      	mov	r3, r6
 8009f62:	7818      	ldrb	r0, [r3, #0]
 8009f64:	2830      	cmp	r0, #48	; 0x30
 8009f66:	461f      	mov	r7, r3
 8009f68:	f103 0301 	add.w	r3, r3, #1
 8009f6c:	d0f9      	beq.n	8009f62 <__gethex+0x76>
 8009f6e:	f7ff ffa7 	bl	8009ec0 <__hexdig_fun>
 8009f72:	2301      	movs	r3, #1
 8009f74:	fab0 f480 	clz	r4, r0
 8009f78:	0964      	lsrs	r4, r4, #5
 8009f7a:	4635      	mov	r5, r6
 8009f7c:	9300      	str	r3, [sp, #0]
 8009f7e:	463a      	mov	r2, r7
 8009f80:	4616      	mov	r6, r2
 8009f82:	3201      	adds	r2, #1
 8009f84:	7830      	ldrb	r0, [r6, #0]
 8009f86:	f7ff ff9b 	bl	8009ec0 <__hexdig_fun>
 8009f8a:	2800      	cmp	r0, #0
 8009f8c:	d1f8      	bne.n	8009f80 <__gethex+0x94>
 8009f8e:	9901      	ldr	r1, [sp, #4]
 8009f90:	4652      	mov	r2, sl
 8009f92:	4630      	mov	r0, r6
 8009f94:	f001 fd8c 	bl	800bab0 <strncmp>
 8009f98:	b980      	cbnz	r0, 8009fbc <__gethex+0xd0>
 8009f9a:	b94d      	cbnz	r5, 8009fb0 <__gethex+0xc4>
 8009f9c:	eb06 050a 	add.w	r5, r6, sl
 8009fa0:	462a      	mov	r2, r5
 8009fa2:	4616      	mov	r6, r2
 8009fa4:	3201      	adds	r2, #1
 8009fa6:	7830      	ldrb	r0, [r6, #0]
 8009fa8:	f7ff ff8a 	bl	8009ec0 <__hexdig_fun>
 8009fac:	2800      	cmp	r0, #0
 8009fae:	d1f8      	bne.n	8009fa2 <__gethex+0xb6>
 8009fb0:	1bad      	subs	r5, r5, r6
 8009fb2:	00ad      	lsls	r5, r5, #2
 8009fb4:	e004      	b.n	8009fc0 <__gethex+0xd4>
 8009fb6:	2400      	movs	r4, #0
 8009fb8:	4625      	mov	r5, r4
 8009fba:	e7e0      	b.n	8009f7e <__gethex+0x92>
 8009fbc:	2d00      	cmp	r5, #0
 8009fbe:	d1f7      	bne.n	8009fb0 <__gethex+0xc4>
 8009fc0:	7833      	ldrb	r3, [r6, #0]
 8009fc2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009fc6:	2b50      	cmp	r3, #80	; 0x50
 8009fc8:	d13b      	bne.n	800a042 <__gethex+0x156>
 8009fca:	7873      	ldrb	r3, [r6, #1]
 8009fcc:	2b2b      	cmp	r3, #43	; 0x2b
 8009fce:	d02c      	beq.n	800a02a <__gethex+0x13e>
 8009fd0:	2b2d      	cmp	r3, #45	; 0x2d
 8009fd2:	d02e      	beq.n	800a032 <__gethex+0x146>
 8009fd4:	1c71      	adds	r1, r6, #1
 8009fd6:	f04f 0900 	mov.w	r9, #0
 8009fda:	7808      	ldrb	r0, [r1, #0]
 8009fdc:	f7ff ff70 	bl	8009ec0 <__hexdig_fun>
 8009fe0:	1e43      	subs	r3, r0, #1
 8009fe2:	b2db      	uxtb	r3, r3
 8009fe4:	2b18      	cmp	r3, #24
 8009fe6:	d82c      	bhi.n	800a042 <__gethex+0x156>
 8009fe8:	f1a0 0210 	sub.w	r2, r0, #16
 8009fec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009ff0:	f7ff ff66 	bl	8009ec0 <__hexdig_fun>
 8009ff4:	1e43      	subs	r3, r0, #1
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	2b18      	cmp	r3, #24
 8009ffa:	d91d      	bls.n	800a038 <__gethex+0x14c>
 8009ffc:	f1b9 0f00 	cmp.w	r9, #0
 800a000:	d000      	beq.n	800a004 <__gethex+0x118>
 800a002:	4252      	negs	r2, r2
 800a004:	4415      	add	r5, r2
 800a006:	f8cb 1000 	str.w	r1, [fp]
 800a00a:	b1e4      	cbz	r4, 800a046 <__gethex+0x15a>
 800a00c:	9b00      	ldr	r3, [sp, #0]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	bf14      	ite	ne
 800a012:	2700      	movne	r7, #0
 800a014:	2706      	moveq	r7, #6
 800a016:	4638      	mov	r0, r7
 800a018:	b009      	add	sp, #36	; 0x24
 800a01a:	ecbd 8b02 	vpop	{d8}
 800a01e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a022:	463e      	mov	r6, r7
 800a024:	4625      	mov	r5, r4
 800a026:	2401      	movs	r4, #1
 800a028:	e7ca      	b.n	8009fc0 <__gethex+0xd4>
 800a02a:	f04f 0900 	mov.w	r9, #0
 800a02e:	1cb1      	adds	r1, r6, #2
 800a030:	e7d3      	b.n	8009fda <__gethex+0xee>
 800a032:	f04f 0901 	mov.w	r9, #1
 800a036:	e7fa      	b.n	800a02e <__gethex+0x142>
 800a038:	230a      	movs	r3, #10
 800a03a:	fb03 0202 	mla	r2, r3, r2, r0
 800a03e:	3a10      	subs	r2, #16
 800a040:	e7d4      	b.n	8009fec <__gethex+0x100>
 800a042:	4631      	mov	r1, r6
 800a044:	e7df      	b.n	800a006 <__gethex+0x11a>
 800a046:	1bf3      	subs	r3, r6, r7
 800a048:	3b01      	subs	r3, #1
 800a04a:	4621      	mov	r1, r4
 800a04c:	2b07      	cmp	r3, #7
 800a04e:	dc0b      	bgt.n	800a068 <__gethex+0x17c>
 800a050:	ee18 0a10 	vmov	r0, s16
 800a054:	f000 fa90 	bl	800a578 <_Balloc>
 800a058:	4604      	mov	r4, r0
 800a05a:	b940      	cbnz	r0, 800a06e <__gethex+0x182>
 800a05c:	4b5d      	ldr	r3, [pc, #372]	; (800a1d4 <__gethex+0x2e8>)
 800a05e:	4602      	mov	r2, r0
 800a060:	21de      	movs	r1, #222	; 0xde
 800a062:	485d      	ldr	r0, [pc, #372]	; (800a1d8 <__gethex+0x2ec>)
 800a064:	f001 fdf4 	bl	800bc50 <__assert_func>
 800a068:	3101      	adds	r1, #1
 800a06a:	105b      	asrs	r3, r3, #1
 800a06c:	e7ee      	b.n	800a04c <__gethex+0x160>
 800a06e:	f100 0914 	add.w	r9, r0, #20
 800a072:	f04f 0b00 	mov.w	fp, #0
 800a076:	f1ca 0301 	rsb	r3, sl, #1
 800a07a:	f8cd 9008 	str.w	r9, [sp, #8]
 800a07e:	f8cd b000 	str.w	fp, [sp]
 800a082:	9306      	str	r3, [sp, #24]
 800a084:	42b7      	cmp	r7, r6
 800a086:	d340      	bcc.n	800a10a <__gethex+0x21e>
 800a088:	9802      	ldr	r0, [sp, #8]
 800a08a:	9b00      	ldr	r3, [sp, #0]
 800a08c:	f840 3b04 	str.w	r3, [r0], #4
 800a090:	eba0 0009 	sub.w	r0, r0, r9
 800a094:	1080      	asrs	r0, r0, #2
 800a096:	0146      	lsls	r6, r0, #5
 800a098:	6120      	str	r0, [r4, #16]
 800a09a:	4618      	mov	r0, r3
 800a09c:	f000 fb5e 	bl	800a75c <__hi0bits>
 800a0a0:	1a30      	subs	r0, r6, r0
 800a0a2:	f8d8 6000 	ldr.w	r6, [r8]
 800a0a6:	42b0      	cmp	r0, r6
 800a0a8:	dd63      	ble.n	800a172 <__gethex+0x286>
 800a0aa:	1b87      	subs	r7, r0, r6
 800a0ac:	4639      	mov	r1, r7
 800a0ae:	4620      	mov	r0, r4
 800a0b0:	f000 ff02 	bl	800aeb8 <__any_on>
 800a0b4:	4682      	mov	sl, r0
 800a0b6:	b1a8      	cbz	r0, 800a0e4 <__gethex+0x1f8>
 800a0b8:	1e7b      	subs	r3, r7, #1
 800a0ba:	1159      	asrs	r1, r3, #5
 800a0bc:	f003 021f 	and.w	r2, r3, #31
 800a0c0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a0c4:	f04f 0a01 	mov.w	sl, #1
 800a0c8:	fa0a f202 	lsl.w	r2, sl, r2
 800a0cc:	420a      	tst	r2, r1
 800a0ce:	d009      	beq.n	800a0e4 <__gethex+0x1f8>
 800a0d0:	4553      	cmp	r3, sl
 800a0d2:	dd05      	ble.n	800a0e0 <__gethex+0x1f4>
 800a0d4:	1eb9      	subs	r1, r7, #2
 800a0d6:	4620      	mov	r0, r4
 800a0d8:	f000 feee 	bl	800aeb8 <__any_on>
 800a0dc:	2800      	cmp	r0, #0
 800a0de:	d145      	bne.n	800a16c <__gethex+0x280>
 800a0e0:	f04f 0a02 	mov.w	sl, #2
 800a0e4:	4639      	mov	r1, r7
 800a0e6:	4620      	mov	r0, r4
 800a0e8:	f7ff fe98 	bl	8009e1c <rshift>
 800a0ec:	443d      	add	r5, r7
 800a0ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a0f2:	42ab      	cmp	r3, r5
 800a0f4:	da4c      	bge.n	800a190 <__gethex+0x2a4>
 800a0f6:	ee18 0a10 	vmov	r0, s16
 800a0fa:	4621      	mov	r1, r4
 800a0fc:	f000 fa7c 	bl	800a5f8 <_Bfree>
 800a100:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a102:	2300      	movs	r3, #0
 800a104:	6013      	str	r3, [r2, #0]
 800a106:	27a3      	movs	r7, #163	; 0xa3
 800a108:	e785      	b.n	800a016 <__gethex+0x12a>
 800a10a:	1e73      	subs	r3, r6, #1
 800a10c:	9a05      	ldr	r2, [sp, #20]
 800a10e:	9303      	str	r3, [sp, #12]
 800a110:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a114:	4293      	cmp	r3, r2
 800a116:	d019      	beq.n	800a14c <__gethex+0x260>
 800a118:	f1bb 0f20 	cmp.w	fp, #32
 800a11c:	d107      	bne.n	800a12e <__gethex+0x242>
 800a11e:	9b02      	ldr	r3, [sp, #8]
 800a120:	9a00      	ldr	r2, [sp, #0]
 800a122:	f843 2b04 	str.w	r2, [r3], #4
 800a126:	9302      	str	r3, [sp, #8]
 800a128:	2300      	movs	r3, #0
 800a12a:	9300      	str	r3, [sp, #0]
 800a12c:	469b      	mov	fp, r3
 800a12e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a132:	f7ff fec5 	bl	8009ec0 <__hexdig_fun>
 800a136:	9b00      	ldr	r3, [sp, #0]
 800a138:	f000 000f 	and.w	r0, r0, #15
 800a13c:	fa00 f00b 	lsl.w	r0, r0, fp
 800a140:	4303      	orrs	r3, r0
 800a142:	9300      	str	r3, [sp, #0]
 800a144:	f10b 0b04 	add.w	fp, fp, #4
 800a148:	9b03      	ldr	r3, [sp, #12]
 800a14a:	e00d      	b.n	800a168 <__gethex+0x27c>
 800a14c:	9b03      	ldr	r3, [sp, #12]
 800a14e:	9a06      	ldr	r2, [sp, #24]
 800a150:	4413      	add	r3, r2
 800a152:	42bb      	cmp	r3, r7
 800a154:	d3e0      	bcc.n	800a118 <__gethex+0x22c>
 800a156:	4618      	mov	r0, r3
 800a158:	9901      	ldr	r1, [sp, #4]
 800a15a:	9307      	str	r3, [sp, #28]
 800a15c:	4652      	mov	r2, sl
 800a15e:	f001 fca7 	bl	800bab0 <strncmp>
 800a162:	9b07      	ldr	r3, [sp, #28]
 800a164:	2800      	cmp	r0, #0
 800a166:	d1d7      	bne.n	800a118 <__gethex+0x22c>
 800a168:	461e      	mov	r6, r3
 800a16a:	e78b      	b.n	800a084 <__gethex+0x198>
 800a16c:	f04f 0a03 	mov.w	sl, #3
 800a170:	e7b8      	b.n	800a0e4 <__gethex+0x1f8>
 800a172:	da0a      	bge.n	800a18a <__gethex+0x29e>
 800a174:	1a37      	subs	r7, r6, r0
 800a176:	4621      	mov	r1, r4
 800a178:	ee18 0a10 	vmov	r0, s16
 800a17c:	463a      	mov	r2, r7
 800a17e:	f000 fc57 	bl	800aa30 <__lshift>
 800a182:	1bed      	subs	r5, r5, r7
 800a184:	4604      	mov	r4, r0
 800a186:	f100 0914 	add.w	r9, r0, #20
 800a18a:	f04f 0a00 	mov.w	sl, #0
 800a18e:	e7ae      	b.n	800a0ee <__gethex+0x202>
 800a190:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a194:	42a8      	cmp	r0, r5
 800a196:	dd72      	ble.n	800a27e <__gethex+0x392>
 800a198:	1b45      	subs	r5, r0, r5
 800a19a:	42ae      	cmp	r6, r5
 800a19c:	dc36      	bgt.n	800a20c <__gethex+0x320>
 800a19e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a1a2:	2b02      	cmp	r3, #2
 800a1a4:	d02a      	beq.n	800a1fc <__gethex+0x310>
 800a1a6:	2b03      	cmp	r3, #3
 800a1a8:	d02c      	beq.n	800a204 <__gethex+0x318>
 800a1aa:	2b01      	cmp	r3, #1
 800a1ac:	d11c      	bne.n	800a1e8 <__gethex+0x2fc>
 800a1ae:	42ae      	cmp	r6, r5
 800a1b0:	d11a      	bne.n	800a1e8 <__gethex+0x2fc>
 800a1b2:	2e01      	cmp	r6, #1
 800a1b4:	d112      	bne.n	800a1dc <__gethex+0x2f0>
 800a1b6:	9a04      	ldr	r2, [sp, #16]
 800a1b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a1bc:	6013      	str	r3, [r2, #0]
 800a1be:	2301      	movs	r3, #1
 800a1c0:	6123      	str	r3, [r4, #16]
 800a1c2:	f8c9 3000 	str.w	r3, [r9]
 800a1c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a1c8:	2762      	movs	r7, #98	; 0x62
 800a1ca:	601c      	str	r4, [r3, #0]
 800a1cc:	e723      	b.n	800a016 <__gethex+0x12a>
 800a1ce:	bf00      	nop
 800a1d0:	0800c9a8 	.word	0x0800c9a8
 800a1d4:	0800c930 	.word	0x0800c930
 800a1d8:	0800c941 	.word	0x0800c941
 800a1dc:	1e71      	subs	r1, r6, #1
 800a1de:	4620      	mov	r0, r4
 800a1e0:	f000 fe6a 	bl	800aeb8 <__any_on>
 800a1e4:	2800      	cmp	r0, #0
 800a1e6:	d1e6      	bne.n	800a1b6 <__gethex+0x2ca>
 800a1e8:	ee18 0a10 	vmov	r0, s16
 800a1ec:	4621      	mov	r1, r4
 800a1ee:	f000 fa03 	bl	800a5f8 <_Bfree>
 800a1f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	6013      	str	r3, [r2, #0]
 800a1f8:	2750      	movs	r7, #80	; 0x50
 800a1fa:	e70c      	b.n	800a016 <__gethex+0x12a>
 800a1fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d1f2      	bne.n	800a1e8 <__gethex+0x2fc>
 800a202:	e7d8      	b.n	800a1b6 <__gethex+0x2ca>
 800a204:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a206:	2b00      	cmp	r3, #0
 800a208:	d1d5      	bne.n	800a1b6 <__gethex+0x2ca>
 800a20a:	e7ed      	b.n	800a1e8 <__gethex+0x2fc>
 800a20c:	1e6f      	subs	r7, r5, #1
 800a20e:	f1ba 0f00 	cmp.w	sl, #0
 800a212:	d131      	bne.n	800a278 <__gethex+0x38c>
 800a214:	b127      	cbz	r7, 800a220 <__gethex+0x334>
 800a216:	4639      	mov	r1, r7
 800a218:	4620      	mov	r0, r4
 800a21a:	f000 fe4d 	bl	800aeb8 <__any_on>
 800a21e:	4682      	mov	sl, r0
 800a220:	117b      	asrs	r3, r7, #5
 800a222:	2101      	movs	r1, #1
 800a224:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a228:	f007 071f 	and.w	r7, r7, #31
 800a22c:	fa01 f707 	lsl.w	r7, r1, r7
 800a230:	421f      	tst	r7, r3
 800a232:	4629      	mov	r1, r5
 800a234:	4620      	mov	r0, r4
 800a236:	bf18      	it	ne
 800a238:	f04a 0a02 	orrne.w	sl, sl, #2
 800a23c:	1b76      	subs	r6, r6, r5
 800a23e:	f7ff fded 	bl	8009e1c <rshift>
 800a242:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a246:	2702      	movs	r7, #2
 800a248:	f1ba 0f00 	cmp.w	sl, #0
 800a24c:	d048      	beq.n	800a2e0 <__gethex+0x3f4>
 800a24e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a252:	2b02      	cmp	r3, #2
 800a254:	d015      	beq.n	800a282 <__gethex+0x396>
 800a256:	2b03      	cmp	r3, #3
 800a258:	d017      	beq.n	800a28a <__gethex+0x39e>
 800a25a:	2b01      	cmp	r3, #1
 800a25c:	d109      	bne.n	800a272 <__gethex+0x386>
 800a25e:	f01a 0f02 	tst.w	sl, #2
 800a262:	d006      	beq.n	800a272 <__gethex+0x386>
 800a264:	f8d9 0000 	ldr.w	r0, [r9]
 800a268:	ea4a 0a00 	orr.w	sl, sl, r0
 800a26c:	f01a 0f01 	tst.w	sl, #1
 800a270:	d10e      	bne.n	800a290 <__gethex+0x3a4>
 800a272:	f047 0710 	orr.w	r7, r7, #16
 800a276:	e033      	b.n	800a2e0 <__gethex+0x3f4>
 800a278:	f04f 0a01 	mov.w	sl, #1
 800a27c:	e7d0      	b.n	800a220 <__gethex+0x334>
 800a27e:	2701      	movs	r7, #1
 800a280:	e7e2      	b.n	800a248 <__gethex+0x35c>
 800a282:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a284:	f1c3 0301 	rsb	r3, r3, #1
 800a288:	9315      	str	r3, [sp, #84]	; 0x54
 800a28a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d0f0      	beq.n	800a272 <__gethex+0x386>
 800a290:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a294:	f104 0314 	add.w	r3, r4, #20
 800a298:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a29c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a2a0:	f04f 0c00 	mov.w	ip, #0
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2aa:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a2ae:	d01c      	beq.n	800a2ea <__gethex+0x3fe>
 800a2b0:	3201      	adds	r2, #1
 800a2b2:	6002      	str	r2, [r0, #0]
 800a2b4:	2f02      	cmp	r7, #2
 800a2b6:	f104 0314 	add.w	r3, r4, #20
 800a2ba:	d13f      	bne.n	800a33c <__gethex+0x450>
 800a2bc:	f8d8 2000 	ldr.w	r2, [r8]
 800a2c0:	3a01      	subs	r2, #1
 800a2c2:	42b2      	cmp	r2, r6
 800a2c4:	d10a      	bne.n	800a2dc <__gethex+0x3f0>
 800a2c6:	1171      	asrs	r1, r6, #5
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a2ce:	f006 061f 	and.w	r6, r6, #31
 800a2d2:	fa02 f606 	lsl.w	r6, r2, r6
 800a2d6:	421e      	tst	r6, r3
 800a2d8:	bf18      	it	ne
 800a2da:	4617      	movne	r7, r2
 800a2dc:	f047 0720 	orr.w	r7, r7, #32
 800a2e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a2e2:	601c      	str	r4, [r3, #0]
 800a2e4:	9b04      	ldr	r3, [sp, #16]
 800a2e6:	601d      	str	r5, [r3, #0]
 800a2e8:	e695      	b.n	800a016 <__gethex+0x12a>
 800a2ea:	4299      	cmp	r1, r3
 800a2ec:	f843 cc04 	str.w	ip, [r3, #-4]
 800a2f0:	d8d8      	bhi.n	800a2a4 <__gethex+0x3b8>
 800a2f2:	68a3      	ldr	r3, [r4, #8]
 800a2f4:	459b      	cmp	fp, r3
 800a2f6:	db19      	blt.n	800a32c <__gethex+0x440>
 800a2f8:	6861      	ldr	r1, [r4, #4]
 800a2fa:	ee18 0a10 	vmov	r0, s16
 800a2fe:	3101      	adds	r1, #1
 800a300:	f000 f93a 	bl	800a578 <_Balloc>
 800a304:	4681      	mov	r9, r0
 800a306:	b918      	cbnz	r0, 800a310 <__gethex+0x424>
 800a308:	4b1a      	ldr	r3, [pc, #104]	; (800a374 <__gethex+0x488>)
 800a30a:	4602      	mov	r2, r0
 800a30c:	2184      	movs	r1, #132	; 0x84
 800a30e:	e6a8      	b.n	800a062 <__gethex+0x176>
 800a310:	6922      	ldr	r2, [r4, #16]
 800a312:	3202      	adds	r2, #2
 800a314:	f104 010c 	add.w	r1, r4, #12
 800a318:	0092      	lsls	r2, r2, #2
 800a31a:	300c      	adds	r0, #12
 800a31c:	f000 f91e 	bl	800a55c <memcpy>
 800a320:	4621      	mov	r1, r4
 800a322:	ee18 0a10 	vmov	r0, s16
 800a326:	f000 f967 	bl	800a5f8 <_Bfree>
 800a32a:	464c      	mov	r4, r9
 800a32c:	6923      	ldr	r3, [r4, #16]
 800a32e:	1c5a      	adds	r2, r3, #1
 800a330:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a334:	6122      	str	r2, [r4, #16]
 800a336:	2201      	movs	r2, #1
 800a338:	615a      	str	r2, [r3, #20]
 800a33a:	e7bb      	b.n	800a2b4 <__gethex+0x3c8>
 800a33c:	6922      	ldr	r2, [r4, #16]
 800a33e:	455a      	cmp	r2, fp
 800a340:	dd0b      	ble.n	800a35a <__gethex+0x46e>
 800a342:	2101      	movs	r1, #1
 800a344:	4620      	mov	r0, r4
 800a346:	f7ff fd69 	bl	8009e1c <rshift>
 800a34a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a34e:	3501      	adds	r5, #1
 800a350:	42ab      	cmp	r3, r5
 800a352:	f6ff aed0 	blt.w	800a0f6 <__gethex+0x20a>
 800a356:	2701      	movs	r7, #1
 800a358:	e7c0      	b.n	800a2dc <__gethex+0x3f0>
 800a35a:	f016 061f 	ands.w	r6, r6, #31
 800a35e:	d0fa      	beq.n	800a356 <__gethex+0x46a>
 800a360:	4453      	add	r3, sl
 800a362:	f1c6 0620 	rsb	r6, r6, #32
 800a366:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a36a:	f000 f9f7 	bl	800a75c <__hi0bits>
 800a36e:	42b0      	cmp	r0, r6
 800a370:	dbe7      	blt.n	800a342 <__gethex+0x456>
 800a372:	e7f0      	b.n	800a356 <__gethex+0x46a>
 800a374:	0800c930 	.word	0x0800c930

0800a378 <L_shift>:
 800a378:	f1c2 0208 	rsb	r2, r2, #8
 800a37c:	0092      	lsls	r2, r2, #2
 800a37e:	b570      	push	{r4, r5, r6, lr}
 800a380:	f1c2 0620 	rsb	r6, r2, #32
 800a384:	6843      	ldr	r3, [r0, #4]
 800a386:	6804      	ldr	r4, [r0, #0]
 800a388:	fa03 f506 	lsl.w	r5, r3, r6
 800a38c:	432c      	orrs	r4, r5
 800a38e:	40d3      	lsrs	r3, r2
 800a390:	6004      	str	r4, [r0, #0]
 800a392:	f840 3f04 	str.w	r3, [r0, #4]!
 800a396:	4288      	cmp	r0, r1
 800a398:	d3f4      	bcc.n	800a384 <L_shift+0xc>
 800a39a:	bd70      	pop	{r4, r5, r6, pc}

0800a39c <__match>:
 800a39c:	b530      	push	{r4, r5, lr}
 800a39e:	6803      	ldr	r3, [r0, #0]
 800a3a0:	3301      	adds	r3, #1
 800a3a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3a6:	b914      	cbnz	r4, 800a3ae <__match+0x12>
 800a3a8:	6003      	str	r3, [r0, #0]
 800a3aa:	2001      	movs	r0, #1
 800a3ac:	bd30      	pop	{r4, r5, pc}
 800a3ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3b2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a3b6:	2d19      	cmp	r5, #25
 800a3b8:	bf98      	it	ls
 800a3ba:	3220      	addls	r2, #32
 800a3bc:	42a2      	cmp	r2, r4
 800a3be:	d0f0      	beq.n	800a3a2 <__match+0x6>
 800a3c0:	2000      	movs	r0, #0
 800a3c2:	e7f3      	b.n	800a3ac <__match+0x10>

0800a3c4 <__hexnan>:
 800a3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3c8:	680b      	ldr	r3, [r1, #0]
 800a3ca:	115e      	asrs	r6, r3, #5
 800a3cc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a3d0:	f013 031f 	ands.w	r3, r3, #31
 800a3d4:	b087      	sub	sp, #28
 800a3d6:	bf18      	it	ne
 800a3d8:	3604      	addne	r6, #4
 800a3da:	2500      	movs	r5, #0
 800a3dc:	1f37      	subs	r7, r6, #4
 800a3de:	4690      	mov	r8, r2
 800a3e0:	6802      	ldr	r2, [r0, #0]
 800a3e2:	9301      	str	r3, [sp, #4]
 800a3e4:	4682      	mov	sl, r0
 800a3e6:	f846 5c04 	str.w	r5, [r6, #-4]
 800a3ea:	46b9      	mov	r9, r7
 800a3ec:	463c      	mov	r4, r7
 800a3ee:	9502      	str	r5, [sp, #8]
 800a3f0:	46ab      	mov	fp, r5
 800a3f2:	7851      	ldrb	r1, [r2, #1]
 800a3f4:	1c53      	adds	r3, r2, #1
 800a3f6:	9303      	str	r3, [sp, #12]
 800a3f8:	b341      	cbz	r1, 800a44c <__hexnan+0x88>
 800a3fa:	4608      	mov	r0, r1
 800a3fc:	9205      	str	r2, [sp, #20]
 800a3fe:	9104      	str	r1, [sp, #16]
 800a400:	f7ff fd5e 	bl	8009ec0 <__hexdig_fun>
 800a404:	2800      	cmp	r0, #0
 800a406:	d14f      	bne.n	800a4a8 <__hexnan+0xe4>
 800a408:	9904      	ldr	r1, [sp, #16]
 800a40a:	9a05      	ldr	r2, [sp, #20]
 800a40c:	2920      	cmp	r1, #32
 800a40e:	d818      	bhi.n	800a442 <__hexnan+0x7e>
 800a410:	9b02      	ldr	r3, [sp, #8]
 800a412:	459b      	cmp	fp, r3
 800a414:	dd13      	ble.n	800a43e <__hexnan+0x7a>
 800a416:	454c      	cmp	r4, r9
 800a418:	d206      	bcs.n	800a428 <__hexnan+0x64>
 800a41a:	2d07      	cmp	r5, #7
 800a41c:	dc04      	bgt.n	800a428 <__hexnan+0x64>
 800a41e:	462a      	mov	r2, r5
 800a420:	4649      	mov	r1, r9
 800a422:	4620      	mov	r0, r4
 800a424:	f7ff ffa8 	bl	800a378 <L_shift>
 800a428:	4544      	cmp	r4, r8
 800a42a:	d950      	bls.n	800a4ce <__hexnan+0x10a>
 800a42c:	2300      	movs	r3, #0
 800a42e:	f1a4 0904 	sub.w	r9, r4, #4
 800a432:	f844 3c04 	str.w	r3, [r4, #-4]
 800a436:	f8cd b008 	str.w	fp, [sp, #8]
 800a43a:	464c      	mov	r4, r9
 800a43c:	461d      	mov	r5, r3
 800a43e:	9a03      	ldr	r2, [sp, #12]
 800a440:	e7d7      	b.n	800a3f2 <__hexnan+0x2e>
 800a442:	2929      	cmp	r1, #41	; 0x29
 800a444:	d156      	bne.n	800a4f4 <__hexnan+0x130>
 800a446:	3202      	adds	r2, #2
 800a448:	f8ca 2000 	str.w	r2, [sl]
 800a44c:	f1bb 0f00 	cmp.w	fp, #0
 800a450:	d050      	beq.n	800a4f4 <__hexnan+0x130>
 800a452:	454c      	cmp	r4, r9
 800a454:	d206      	bcs.n	800a464 <__hexnan+0xa0>
 800a456:	2d07      	cmp	r5, #7
 800a458:	dc04      	bgt.n	800a464 <__hexnan+0xa0>
 800a45a:	462a      	mov	r2, r5
 800a45c:	4649      	mov	r1, r9
 800a45e:	4620      	mov	r0, r4
 800a460:	f7ff ff8a 	bl	800a378 <L_shift>
 800a464:	4544      	cmp	r4, r8
 800a466:	d934      	bls.n	800a4d2 <__hexnan+0x10e>
 800a468:	f1a8 0204 	sub.w	r2, r8, #4
 800a46c:	4623      	mov	r3, r4
 800a46e:	f853 1b04 	ldr.w	r1, [r3], #4
 800a472:	f842 1f04 	str.w	r1, [r2, #4]!
 800a476:	429f      	cmp	r7, r3
 800a478:	d2f9      	bcs.n	800a46e <__hexnan+0xaa>
 800a47a:	1b3b      	subs	r3, r7, r4
 800a47c:	f023 0303 	bic.w	r3, r3, #3
 800a480:	3304      	adds	r3, #4
 800a482:	3401      	adds	r4, #1
 800a484:	3e03      	subs	r6, #3
 800a486:	42b4      	cmp	r4, r6
 800a488:	bf88      	it	hi
 800a48a:	2304      	movhi	r3, #4
 800a48c:	4443      	add	r3, r8
 800a48e:	2200      	movs	r2, #0
 800a490:	f843 2b04 	str.w	r2, [r3], #4
 800a494:	429f      	cmp	r7, r3
 800a496:	d2fb      	bcs.n	800a490 <__hexnan+0xcc>
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	b91b      	cbnz	r3, 800a4a4 <__hexnan+0xe0>
 800a49c:	4547      	cmp	r7, r8
 800a49e:	d127      	bne.n	800a4f0 <__hexnan+0x12c>
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	603b      	str	r3, [r7, #0]
 800a4a4:	2005      	movs	r0, #5
 800a4a6:	e026      	b.n	800a4f6 <__hexnan+0x132>
 800a4a8:	3501      	adds	r5, #1
 800a4aa:	2d08      	cmp	r5, #8
 800a4ac:	f10b 0b01 	add.w	fp, fp, #1
 800a4b0:	dd06      	ble.n	800a4c0 <__hexnan+0xfc>
 800a4b2:	4544      	cmp	r4, r8
 800a4b4:	d9c3      	bls.n	800a43e <__hexnan+0x7a>
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	f844 3c04 	str.w	r3, [r4, #-4]
 800a4bc:	2501      	movs	r5, #1
 800a4be:	3c04      	subs	r4, #4
 800a4c0:	6822      	ldr	r2, [r4, #0]
 800a4c2:	f000 000f 	and.w	r0, r0, #15
 800a4c6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a4ca:	6022      	str	r2, [r4, #0]
 800a4cc:	e7b7      	b.n	800a43e <__hexnan+0x7a>
 800a4ce:	2508      	movs	r5, #8
 800a4d0:	e7b5      	b.n	800a43e <__hexnan+0x7a>
 800a4d2:	9b01      	ldr	r3, [sp, #4]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d0df      	beq.n	800a498 <__hexnan+0xd4>
 800a4d8:	f04f 32ff 	mov.w	r2, #4294967295
 800a4dc:	f1c3 0320 	rsb	r3, r3, #32
 800a4e0:	fa22 f303 	lsr.w	r3, r2, r3
 800a4e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a4e8:	401a      	ands	r2, r3
 800a4ea:	f846 2c04 	str.w	r2, [r6, #-4]
 800a4ee:	e7d3      	b.n	800a498 <__hexnan+0xd4>
 800a4f0:	3f04      	subs	r7, #4
 800a4f2:	e7d1      	b.n	800a498 <__hexnan+0xd4>
 800a4f4:	2004      	movs	r0, #4
 800a4f6:	b007      	add	sp, #28
 800a4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a4fc <_localeconv_r>:
 800a4fc:	4800      	ldr	r0, [pc, #0]	; (800a500 <_localeconv_r+0x4>)
 800a4fe:	4770      	bx	lr
 800a500:	20000164 	.word	0x20000164

0800a504 <_lseek_r>:
 800a504:	b538      	push	{r3, r4, r5, lr}
 800a506:	4d07      	ldr	r5, [pc, #28]	; (800a524 <_lseek_r+0x20>)
 800a508:	4604      	mov	r4, r0
 800a50a:	4608      	mov	r0, r1
 800a50c:	4611      	mov	r1, r2
 800a50e:	2200      	movs	r2, #0
 800a510:	602a      	str	r2, [r5, #0]
 800a512:	461a      	mov	r2, r3
 800a514:	f7f8 f930 	bl	8002778 <_lseek>
 800a518:	1c43      	adds	r3, r0, #1
 800a51a:	d102      	bne.n	800a522 <_lseek_r+0x1e>
 800a51c:	682b      	ldr	r3, [r5, #0]
 800a51e:	b103      	cbz	r3, 800a522 <_lseek_r+0x1e>
 800a520:	6023      	str	r3, [r4, #0]
 800a522:	bd38      	pop	{r3, r4, r5, pc}
 800a524:	2000045c 	.word	0x2000045c

0800a528 <malloc>:
 800a528:	4b02      	ldr	r3, [pc, #8]	; (800a534 <malloc+0xc>)
 800a52a:	4601      	mov	r1, r0
 800a52c:	6818      	ldr	r0, [r3, #0]
 800a52e:	f000 bd67 	b.w	800b000 <_malloc_r>
 800a532:	bf00      	nop
 800a534:	2000000c 	.word	0x2000000c

0800a538 <__ascii_mbtowc>:
 800a538:	b082      	sub	sp, #8
 800a53a:	b901      	cbnz	r1, 800a53e <__ascii_mbtowc+0x6>
 800a53c:	a901      	add	r1, sp, #4
 800a53e:	b142      	cbz	r2, 800a552 <__ascii_mbtowc+0x1a>
 800a540:	b14b      	cbz	r3, 800a556 <__ascii_mbtowc+0x1e>
 800a542:	7813      	ldrb	r3, [r2, #0]
 800a544:	600b      	str	r3, [r1, #0]
 800a546:	7812      	ldrb	r2, [r2, #0]
 800a548:	1e10      	subs	r0, r2, #0
 800a54a:	bf18      	it	ne
 800a54c:	2001      	movne	r0, #1
 800a54e:	b002      	add	sp, #8
 800a550:	4770      	bx	lr
 800a552:	4610      	mov	r0, r2
 800a554:	e7fb      	b.n	800a54e <__ascii_mbtowc+0x16>
 800a556:	f06f 0001 	mvn.w	r0, #1
 800a55a:	e7f8      	b.n	800a54e <__ascii_mbtowc+0x16>

0800a55c <memcpy>:
 800a55c:	440a      	add	r2, r1
 800a55e:	4291      	cmp	r1, r2
 800a560:	f100 33ff 	add.w	r3, r0, #4294967295
 800a564:	d100      	bne.n	800a568 <memcpy+0xc>
 800a566:	4770      	bx	lr
 800a568:	b510      	push	{r4, lr}
 800a56a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a56e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a572:	4291      	cmp	r1, r2
 800a574:	d1f9      	bne.n	800a56a <memcpy+0xe>
 800a576:	bd10      	pop	{r4, pc}

0800a578 <_Balloc>:
 800a578:	b570      	push	{r4, r5, r6, lr}
 800a57a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a57c:	4604      	mov	r4, r0
 800a57e:	460d      	mov	r5, r1
 800a580:	b976      	cbnz	r6, 800a5a0 <_Balloc+0x28>
 800a582:	2010      	movs	r0, #16
 800a584:	f7ff ffd0 	bl	800a528 <malloc>
 800a588:	4602      	mov	r2, r0
 800a58a:	6260      	str	r0, [r4, #36]	; 0x24
 800a58c:	b920      	cbnz	r0, 800a598 <_Balloc+0x20>
 800a58e:	4b18      	ldr	r3, [pc, #96]	; (800a5f0 <_Balloc+0x78>)
 800a590:	4818      	ldr	r0, [pc, #96]	; (800a5f4 <_Balloc+0x7c>)
 800a592:	2166      	movs	r1, #102	; 0x66
 800a594:	f001 fb5c 	bl	800bc50 <__assert_func>
 800a598:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a59c:	6006      	str	r6, [r0, #0]
 800a59e:	60c6      	str	r6, [r0, #12]
 800a5a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a5a2:	68f3      	ldr	r3, [r6, #12]
 800a5a4:	b183      	cbz	r3, 800a5c8 <_Balloc+0x50>
 800a5a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5a8:	68db      	ldr	r3, [r3, #12]
 800a5aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a5ae:	b9b8      	cbnz	r0, 800a5e0 <_Balloc+0x68>
 800a5b0:	2101      	movs	r1, #1
 800a5b2:	fa01 f605 	lsl.w	r6, r1, r5
 800a5b6:	1d72      	adds	r2, r6, #5
 800a5b8:	0092      	lsls	r2, r2, #2
 800a5ba:	4620      	mov	r0, r4
 800a5bc:	f000 fc9d 	bl	800aefa <_calloc_r>
 800a5c0:	b160      	cbz	r0, 800a5dc <_Balloc+0x64>
 800a5c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a5c6:	e00e      	b.n	800a5e6 <_Balloc+0x6e>
 800a5c8:	2221      	movs	r2, #33	; 0x21
 800a5ca:	2104      	movs	r1, #4
 800a5cc:	4620      	mov	r0, r4
 800a5ce:	f000 fc94 	bl	800aefa <_calloc_r>
 800a5d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5d4:	60f0      	str	r0, [r6, #12]
 800a5d6:	68db      	ldr	r3, [r3, #12]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d1e4      	bne.n	800a5a6 <_Balloc+0x2e>
 800a5dc:	2000      	movs	r0, #0
 800a5de:	bd70      	pop	{r4, r5, r6, pc}
 800a5e0:	6802      	ldr	r2, [r0, #0]
 800a5e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a5ec:	e7f7      	b.n	800a5de <_Balloc+0x66>
 800a5ee:	bf00      	nop
 800a5f0:	0800c8be 	.word	0x0800c8be
 800a5f4:	0800c9bc 	.word	0x0800c9bc

0800a5f8 <_Bfree>:
 800a5f8:	b570      	push	{r4, r5, r6, lr}
 800a5fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a5fc:	4605      	mov	r5, r0
 800a5fe:	460c      	mov	r4, r1
 800a600:	b976      	cbnz	r6, 800a620 <_Bfree+0x28>
 800a602:	2010      	movs	r0, #16
 800a604:	f7ff ff90 	bl	800a528 <malloc>
 800a608:	4602      	mov	r2, r0
 800a60a:	6268      	str	r0, [r5, #36]	; 0x24
 800a60c:	b920      	cbnz	r0, 800a618 <_Bfree+0x20>
 800a60e:	4b09      	ldr	r3, [pc, #36]	; (800a634 <_Bfree+0x3c>)
 800a610:	4809      	ldr	r0, [pc, #36]	; (800a638 <_Bfree+0x40>)
 800a612:	218a      	movs	r1, #138	; 0x8a
 800a614:	f001 fb1c 	bl	800bc50 <__assert_func>
 800a618:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a61c:	6006      	str	r6, [r0, #0]
 800a61e:	60c6      	str	r6, [r0, #12]
 800a620:	b13c      	cbz	r4, 800a632 <_Bfree+0x3a>
 800a622:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a624:	6862      	ldr	r2, [r4, #4]
 800a626:	68db      	ldr	r3, [r3, #12]
 800a628:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a62c:	6021      	str	r1, [r4, #0]
 800a62e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a632:	bd70      	pop	{r4, r5, r6, pc}
 800a634:	0800c8be 	.word	0x0800c8be
 800a638:	0800c9bc 	.word	0x0800c9bc

0800a63c <__multadd>:
 800a63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a640:	690d      	ldr	r5, [r1, #16]
 800a642:	4607      	mov	r7, r0
 800a644:	460c      	mov	r4, r1
 800a646:	461e      	mov	r6, r3
 800a648:	f101 0c14 	add.w	ip, r1, #20
 800a64c:	2000      	movs	r0, #0
 800a64e:	f8dc 3000 	ldr.w	r3, [ip]
 800a652:	b299      	uxth	r1, r3
 800a654:	fb02 6101 	mla	r1, r2, r1, r6
 800a658:	0c1e      	lsrs	r6, r3, #16
 800a65a:	0c0b      	lsrs	r3, r1, #16
 800a65c:	fb02 3306 	mla	r3, r2, r6, r3
 800a660:	b289      	uxth	r1, r1
 800a662:	3001      	adds	r0, #1
 800a664:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a668:	4285      	cmp	r5, r0
 800a66a:	f84c 1b04 	str.w	r1, [ip], #4
 800a66e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a672:	dcec      	bgt.n	800a64e <__multadd+0x12>
 800a674:	b30e      	cbz	r6, 800a6ba <__multadd+0x7e>
 800a676:	68a3      	ldr	r3, [r4, #8]
 800a678:	42ab      	cmp	r3, r5
 800a67a:	dc19      	bgt.n	800a6b0 <__multadd+0x74>
 800a67c:	6861      	ldr	r1, [r4, #4]
 800a67e:	4638      	mov	r0, r7
 800a680:	3101      	adds	r1, #1
 800a682:	f7ff ff79 	bl	800a578 <_Balloc>
 800a686:	4680      	mov	r8, r0
 800a688:	b928      	cbnz	r0, 800a696 <__multadd+0x5a>
 800a68a:	4602      	mov	r2, r0
 800a68c:	4b0c      	ldr	r3, [pc, #48]	; (800a6c0 <__multadd+0x84>)
 800a68e:	480d      	ldr	r0, [pc, #52]	; (800a6c4 <__multadd+0x88>)
 800a690:	21b5      	movs	r1, #181	; 0xb5
 800a692:	f001 fadd 	bl	800bc50 <__assert_func>
 800a696:	6922      	ldr	r2, [r4, #16]
 800a698:	3202      	adds	r2, #2
 800a69a:	f104 010c 	add.w	r1, r4, #12
 800a69e:	0092      	lsls	r2, r2, #2
 800a6a0:	300c      	adds	r0, #12
 800a6a2:	f7ff ff5b 	bl	800a55c <memcpy>
 800a6a6:	4621      	mov	r1, r4
 800a6a8:	4638      	mov	r0, r7
 800a6aa:	f7ff ffa5 	bl	800a5f8 <_Bfree>
 800a6ae:	4644      	mov	r4, r8
 800a6b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a6b4:	3501      	adds	r5, #1
 800a6b6:	615e      	str	r6, [r3, #20]
 800a6b8:	6125      	str	r5, [r4, #16]
 800a6ba:	4620      	mov	r0, r4
 800a6bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6c0:	0800c930 	.word	0x0800c930
 800a6c4:	0800c9bc 	.word	0x0800c9bc

0800a6c8 <__s2b>:
 800a6c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6cc:	460c      	mov	r4, r1
 800a6ce:	4615      	mov	r5, r2
 800a6d0:	461f      	mov	r7, r3
 800a6d2:	2209      	movs	r2, #9
 800a6d4:	3308      	adds	r3, #8
 800a6d6:	4606      	mov	r6, r0
 800a6d8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a6dc:	2100      	movs	r1, #0
 800a6de:	2201      	movs	r2, #1
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	db09      	blt.n	800a6f8 <__s2b+0x30>
 800a6e4:	4630      	mov	r0, r6
 800a6e6:	f7ff ff47 	bl	800a578 <_Balloc>
 800a6ea:	b940      	cbnz	r0, 800a6fe <__s2b+0x36>
 800a6ec:	4602      	mov	r2, r0
 800a6ee:	4b19      	ldr	r3, [pc, #100]	; (800a754 <__s2b+0x8c>)
 800a6f0:	4819      	ldr	r0, [pc, #100]	; (800a758 <__s2b+0x90>)
 800a6f2:	21ce      	movs	r1, #206	; 0xce
 800a6f4:	f001 faac 	bl	800bc50 <__assert_func>
 800a6f8:	0052      	lsls	r2, r2, #1
 800a6fa:	3101      	adds	r1, #1
 800a6fc:	e7f0      	b.n	800a6e0 <__s2b+0x18>
 800a6fe:	9b08      	ldr	r3, [sp, #32]
 800a700:	6143      	str	r3, [r0, #20]
 800a702:	2d09      	cmp	r5, #9
 800a704:	f04f 0301 	mov.w	r3, #1
 800a708:	6103      	str	r3, [r0, #16]
 800a70a:	dd16      	ble.n	800a73a <__s2b+0x72>
 800a70c:	f104 0909 	add.w	r9, r4, #9
 800a710:	46c8      	mov	r8, r9
 800a712:	442c      	add	r4, r5
 800a714:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a718:	4601      	mov	r1, r0
 800a71a:	3b30      	subs	r3, #48	; 0x30
 800a71c:	220a      	movs	r2, #10
 800a71e:	4630      	mov	r0, r6
 800a720:	f7ff ff8c 	bl	800a63c <__multadd>
 800a724:	45a0      	cmp	r8, r4
 800a726:	d1f5      	bne.n	800a714 <__s2b+0x4c>
 800a728:	f1a5 0408 	sub.w	r4, r5, #8
 800a72c:	444c      	add	r4, r9
 800a72e:	1b2d      	subs	r5, r5, r4
 800a730:	1963      	adds	r3, r4, r5
 800a732:	42bb      	cmp	r3, r7
 800a734:	db04      	blt.n	800a740 <__s2b+0x78>
 800a736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a73a:	340a      	adds	r4, #10
 800a73c:	2509      	movs	r5, #9
 800a73e:	e7f6      	b.n	800a72e <__s2b+0x66>
 800a740:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a744:	4601      	mov	r1, r0
 800a746:	3b30      	subs	r3, #48	; 0x30
 800a748:	220a      	movs	r2, #10
 800a74a:	4630      	mov	r0, r6
 800a74c:	f7ff ff76 	bl	800a63c <__multadd>
 800a750:	e7ee      	b.n	800a730 <__s2b+0x68>
 800a752:	bf00      	nop
 800a754:	0800c930 	.word	0x0800c930
 800a758:	0800c9bc 	.word	0x0800c9bc

0800a75c <__hi0bits>:
 800a75c:	0c03      	lsrs	r3, r0, #16
 800a75e:	041b      	lsls	r3, r3, #16
 800a760:	b9d3      	cbnz	r3, 800a798 <__hi0bits+0x3c>
 800a762:	0400      	lsls	r0, r0, #16
 800a764:	2310      	movs	r3, #16
 800a766:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a76a:	bf04      	itt	eq
 800a76c:	0200      	lsleq	r0, r0, #8
 800a76e:	3308      	addeq	r3, #8
 800a770:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a774:	bf04      	itt	eq
 800a776:	0100      	lsleq	r0, r0, #4
 800a778:	3304      	addeq	r3, #4
 800a77a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a77e:	bf04      	itt	eq
 800a780:	0080      	lsleq	r0, r0, #2
 800a782:	3302      	addeq	r3, #2
 800a784:	2800      	cmp	r0, #0
 800a786:	db05      	blt.n	800a794 <__hi0bits+0x38>
 800a788:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a78c:	f103 0301 	add.w	r3, r3, #1
 800a790:	bf08      	it	eq
 800a792:	2320      	moveq	r3, #32
 800a794:	4618      	mov	r0, r3
 800a796:	4770      	bx	lr
 800a798:	2300      	movs	r3, #0
 800a79a:	e7e4      	b.n	800a766 <__hi0bits+0xa>

0800a79c <__lo0bits>:
 800a79c:	6803      	ldr	r3, [r0, #0]
 800a79e:	f013 0207 	ands.w	r2, r3, #7
 800a7a2:	4601      	mov	r1, r0
 800a7a4:	d00b      	beq.n	800a7be <__lo0bits+0x22>
 800a7a6:	07da      	lsls	r2, r3, #31
 800a7a8:	d423      	bmi.n	800a7f2 <__lo0bits+0x56>
 800a7aa:	0798      	lsls	r0, r3, #30
 800a7ac:	bf49      	itett	mi
 800a7ae:	085b      	lsrmi	r3, r3, #1
 800a7b0:	089b      	lsrpl	r3, r3, #2
 800a7b2:	2001      	movmi	r0, #1
 800a7b4:	600b      	strmi	r3, [r1, #0]
 800a7b6:	bf5c      	itt	pl
 800a7b8:	600b      	strpl	r3, [r1, #0]
 800a7ba:	2002      	movpl	r0, #2
 800a7bc:	4770      	bx	lr
 800a7be:	b298      	uxth	r0, r3
 800a7c0:	b9a8      	cbnz	r0, 800a7ee <__lo0bits+0x52>
 800a7c2:	0c1b      	lsrs	r3, r3, #16
 800a7c4:	2010      	movs	r0, #16
 800a7c6:	b2da      	uxtb	r2, r3
 800a7c8:	b90a      	cbnz	r2, 800a7ce <__lo0bits+0x32>
 800a7ca:	3008      	adds	r0, #8
 800a7cc:	0a1b      	lsrs	r3, r3, #8
 800a7ce:	071a      	lsls	r2, r3, #28
 800a7d0:	bf04      	itt	eq
 800a7d2:	091b      	lsreq	r3, r3, #4
 800a7d4:	3004      	addeq	r0, #4
 800a7d6:	079a      	lsls	r2, r3, #30
 800a7d8:	bf04      	itt	eq
 800a7da:	089b      	lsreq	r3, r3, #2
 800a7dc:	3002      	addeq	r0, #2
 800a7de:	07da      	lsls	r2, r3, #31
 800a7e0:	d403      	bmi.n	800a7ea <__lo0bits+0x4e>
 800a7e2:	085b      	lsrs	r3, r3, #1
 800a7e4:	f100 0001 	add.w	r0, r0, #1
 800a7e8:	d005      	beq.n	800a7f6 <__lo0bits+0x5a>
 800a7ea:	600b      	str	r3, [r1, #0]
 800a7ec:	4770      	bx	lr
 800a7ee:	4610      	mov	r0, r2
 800a7f0:	e7e9      	b.n	800a7c6 <__lo0bits+0x2a>
 800a7f2:	2000      	movs	r0, #0
 800a7f4:	4770      	bx	lr
 800a7f6:	2020      	movs	r0, #32
 800a7f8:	4770      	bx	lr
	...

0800a7fc <__i2b>:
 800a7fc:	b510      	push	{r4, lr}
 800a7fe:	460c      	mov	r4, r1
 800a800:	2101      	movs	r1, #1
 800a802:	f7ff feb9 	bl	800a578 <_Balloc>
 800a806:	4602      	mov	r2, r0
 800a808:	b928      	cbnz	r0, 800a816 <__i2b+0x1a>
 800a80a:	4b05      	ldr	r3, [pc, #20]	; (800a820 <__i2b+0x24>)
 800a80c:	4805      	ldr	r0, [pc, #20]	; (800a824 <__i2b+0x28>)
 800a80e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a812:	f001 fa1d 	bl	800bc50 <__assert_func>
 800a816:	2301      	movs	r3, #1
 800a818:	6144      	str	r4, [r0, #20]
 800a81a:	6103      	str	r3, [r0, #16]
 800a81c:	bd10      	pop	{r4, pc}
 800a81e:	bf00      	nop
 800a820:	0800c930 	.word	0x0800c930
 800a824:	0800c9bc 	.word	0x0800c9bc

0800a828 <__multiply>:
 800a828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a82c:	4691      	mov	r9, r2
 800a82e:	690a      	ldr	r2, [r1, #16]
 800a830:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a834:	429a      	cmp	r2, r3
 800a836:	bfb8      	it	lt
 800a838:	460b      	movlt	r3, r1
 800a83a:	460c      	mov	r4, r1
 800a83c:	bfbc      	itt	lt
 800a83e:	464c      	movlt	r4, r9
 800a840:	4699      	movlt	r9, r3
 800a842:	6927      	ldr	r7, [r4, #16]
 800a844:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a848:	68a3      	ldr	r3, [r4, #8]
 800a84a:	6861      	ldr	r1, [r4, #4]
 800a84c:	eb07 060a 	add.w	r6, r7, sl
 800a850:	42b3      	cmp	r3, r6
 800a852:	b085      	sub	sp, #20
 800a854:	bfb8      	it	lt
 800a856:	3101      	addlt	r1, #1
 800a858:	f7ff fe8e 	bl	800a578 <_Balloc>
 800a85c:	b930      	cbnz	r0, 800a86c <__multiply+0x44>
 800a85e:	4602      	mov	r2, r0
 800a860:	4b44      	ldr	r3, [pc, #272]	; (800a974 <__multiply+0x14c>)
 800a862:	4845      	ldr	r0, [pc, #276]	; (800a978 <__multiply+0x150>)
 800a864:	f240 115d 	movw	r1, #349	; 0x15d
 800a868:	f001 f9f2 	bl	800bc50 <__assert_func>
 800a86c:	f100 0514 	add.w	r5, r0, #20
 800a870:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a874:	462b      	mov	r3, r5
 800a876:	2200      	movs	r2, #0
 800a878:	4543      	cmp	r3, r8
 800a87a:	d321      	bcc.n	800a8c0 <__multiply+0x98>
 800a87c:	f104 0314 	add.w	r3, r4, #20
 800a880:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a884:	f109 0314 	add.w	r3, r9, #20
 800a888:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a88c:	9202      	str	r2, [sp, #8]
 800a88e:	1b3a      	subs	r2, r7, r4
 800a890:	3a15      	subs	r2, #21
 800a892:	f022 0203 	bic.w	r2, r2, #3
 800a896:	3204      	adds	r2, #4
 800a898:	f104 0115 	add.w	r1, r4, #21
 800a89c:	428f      	cmp	r7, r1
 800a89e:	bf38      	it	cc
 800a8a0:	2204      	movcc	r2, #4
 800a8a2:	9201      	str	r2, [sp, #4]
 800a8a4:	9a02      	ldr	r2, [sp, #8]
 800a8a6:	9303      	str	r3, [sp, #12]
 800a8a8:	429a      	cmp	r2, r3
 800a8aa:	d80c      	bhi.n	800a8c6 <__multiply+0x9e>
 800a8ac:	2e00      	cmp	r6, #0
 800a8ae:	dd03      	ble.n	800a8b8 <__multiply+0x90>
 800a8b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d05a      	beq.n	800a96e <__multiply+0x146>
 800a8b8:	6106      	str	r6, [r0, #16]
 800a8ba:	b005      	add	sp, #20
 800a8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8c0:	f843 2b04 	str.w	r2, [r3], #4
 800a8c4:	e7d8      	b.n	800a878 <__multiply+0x50>
 800a8c6:	f8b3 a000 	ldrh.w	sl, [r3]
 800a8ca:	f1ba 0f00 	cmp.w	sl, #0
 800a8ce:	d024      	beq.n	800a91a <__multiply+0xf2>
 800a8d0:	f104 0e14 	add.w	lr, r4, #20
 800a8d4:	46a9      	mov	r9, r5
 800a8d6:	f04f 0c00 	mov.w	ip, #0
 800a8da:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a8de:	f8d9 1000 	ldr.w	r1, [r9]
 800a8e2:	fa1f fb82 	uxth.w	fp, r2
 800a8e6:	b289      	uxth	r1, r1
 800a8e8:	fb0a 110b 	mla	r1, sl, fp, r1
 800a8ec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a8f0:	f8d9 2000 	ldr.w	r2, [r9]
 800a8f4:	4461      	add	r1, ip
 800a8f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a8fa:	fb0a c20b 	mla	r2, sl, fp, ip
 800a8fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a902:	b289      	uxth	r1, r1
 800a904:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a908:	4577      	cmp	r7, lr
 800a90a:	f849 1b04 	str.w	r1, [r9], #4
 800a90e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a912:	d8e2      	bhi.n	800a8da <__multiply+0xb2>
 800a914:	9a01      	ldr	r2, [sp, #4]
 800a916:	f845 c002 	str.w	ip, [r5, r2]
 800a91a:	9a03      	ldr	r2, [sp, #12]
 800a91c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a920:	3304      	adds	r3, #4
 800a922:	f1b9 0f00 	cmp.w	r9, #0
 800a926:	d020      	beq.n	800a96a <__multiply+0x142>
 800a928:	6829      	ldr	r1, [r5, #0]
 800a92a:	f104 0c14 	add.w	ip, r4, #20
 800a92e:	46ae      	mov	lr, r5
 800a930:	f04f 0a00 	mov.w	sl, #0
 800a934:	f8bc b000 	ldrh.w	fp, [ip]
 800a938:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a93c:	fb09 220b 	mla	r2, r9, fp, r2
 800a940:	4492      	add	sl, r2
 800a942:	b289      	uxth	r1, r1
 800a944:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a948:	f84e 1b04 	str.w	r1, [lr], #4
 800a94c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a950:	f8be 1000 	ldrh.w	r1, [lr]
 800a954:	0c12      	lsrs	r2, r2, #16
 800a956:	fb09 1102 	mla	r1, r9, r2, r1
 800a95a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a95e:	4567      	cmp	r7, ip
 800a960:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a964:	d8e6      	bhi.n	800a934 <__multiply+0x10c>
 800a966:	9a01      	ldr	r2, [sp, #4]
 800a968:	50a9      	str	r1, [r5, r2]
 800a96a:	3504      	adds	r5, #4
 800a96c:	e79a      	b.n	800a8a4 <__multiply+0x7c>
 800a96e:	3e01      	subs	r6, #1
 800a970:	e79c      	b.n	800a8ac <__multiply+0x84>
 800a972:	bf00      	nop
 800a974:	0800c930 	.word	0x0800c930
 800a978:	0800c9bc 	.word	0x0800c9bc

0800a97c <__pow5mult>:
 800a97c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a980:	4615      	mov	r5, r2
 800a982:	f012 0203 	ands.w	r2, r2, #3
 800a986:	4606      	mov	r6, r0
 800a988:	460f      	mov	r7, r1
 800a98a:	d007      	beq.n	800a99c <__pow5mult+0x20>
 800a98c:	4c25      	ldr	r4, [pc, #148]	; (800aa24 <__pow5mult+0xa8>)
 800a98e:	3a01      	subs	r2, #1
 800a990:	2300      	movs	r3, #0
 800a992:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a996:	f7ff fe51 	bl	800a63c <__multadd>
 800a99a:	4607      	mov	r7, r0
 800a99c:	10ad      	asrs	r5, r5, #2
 800a99e:	d03d      	beq.n	800aa1c <__pow5mult+0xa0>
 800a9a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a9a2:	b97c      	cbnz	r4, 800a9c4 <__pow5mult+0x48>
 800a9a4:	2010      	movs	r0, #16
 800a9a6:	f7ff fdbf 	bl	800a528 <malloc>
 800a9aa:	4602      	mov	r2, r0
 800a9ac:	6270      	str	r0, [r6, #36]	; 0x24
 800a9ae:	b928      	cbnz	r0, 800a9bc <__pow5mult+0x40>
 800a9b0:	4b1d      	ldr	r3, [pc, #116]	; (800aa28 <__pow5mult+0xac>)
 800a9b2:	481e      	ldr	r0, [pc, #120]	; (800aa2c <__pow5mult+0xb0>)
 800a9b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a9b8:	f001 f94a 	bl	800bc50 <__assert_func>
 800a9bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a9c0:	6004      	str	r4, [r0, #0]
 800a9c2:	60c4      	str	r4, [r0, #12]
 800a9c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a9c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a9cc:	b94c      	cbnz	r4, 800a9e2 <__pow5mult+0x66>
 800a9ce:	f240 2171 	movw	r1, #625	; 0x271
 800a9d2:	4630      	mov	r0, r6
 800a9d4:	f7ff ff12 	bl	800a7fc <__i2b>
 800a9d8:	2300      	movs	r3, #0
 800a9da:	f8c8 0008 	str.w	r0, [r8, #8]
 800a9de:	4604      	mov	r4, r0
 800a9e0:	6003      	str	r3, [r0, #0]
 800a9e2:	f04f 0900 	mov.w	r9, #0
 800a9e6:	07eb      	lsls	r3, r5, #31
 800a9e8:	d50a      	bpl.n	800aa00 <__pow5mult+0x84>
 800a9ea:	4639      	mov	r1, r7
 800a9ec:	4622      	mov	r2, r4
 800a9ee:	4630      	mov	r0, r6
 800a9f0:	f7ff ff1a 	bl	800a828 <__multiply>
 800a9f4:	4639      	mov	r1, r7
 800a9f6:	4680      	mov	r8, r0
 800a9f8:	4630      	mov	r0, r6
 800a9fa:	f7ff fdfd 	bl	800a5f8 <_Bfree>
 800a9fe:	4647      	mov	r7, r8
 800aa00:	106d      	asrs	r5, r5, #1
 800aa02:	d00b      	beq.n	800aa1c <__pow5mult+0xa0>
 800aa04:	6820      	ldr	r0, [r4, #0]
 800aa06:	b938      	cbnz	r0, 800aa18 <__pow5mult+0x9c>
 800aa08:	4622      	mov	r2, r4
 800aa0a:	4621      	mov	r1, r4
 800aa0c:	4630      	mov	r0, r6
 800aa0e:	f7ff ff0b 	bl	800a828 <__multiply>
 800aa12:	6020      	str	r0, [r4, #0]
 800aa14:	f8c0 9000 	str.w	r9, [r0]
 800aa18:	4604      	mov	r4, r0
 800aa1a:	e7e4      	b.n	800a9e6 <__pow5mult+0x6a>
 800aa1c:	4638      	mov	r0, r7
 800aa1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa22:	bf00      	nop
 800aa24:	0800cb08 	.word	0x0800cb08
 800aa28:	0800c8be 	.word	0x0800c8be
 800aa2c:	0800c9bc 	.word	0x0800c9bc

0800aa30 <__lshift>:
 800aa30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa34:	460c      	mov	r4, r1
 800aa36:	6849      	ldr	r1, [r1, #4]
 800aa38:	6923      	ldr	r3, [r4, #16]
 800aa3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aa3e:	68a3      	ldr	r3, [r4, #8]
 800aa40:	4607      	mov	r7, r0
 800aa42:	4691      	mov	r9, r2
 800aa44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aa48:	f108 0601 	add.w	r6, r8, #1
 800aa4c:	42b3      	cmp	r3, r6
 800aa4e:	db0b      	blt.n	800aa68 <__lshift+0x38>
 800aa50:	4638      	mov	r0, r7
 800aa52:	f7ff fd91 	bl	800a578 <_Balloc>
 800aa56:	4605      	mov	r5, r0
 800aa58:	b948      	cbnz	r0, 800aa6e <__lshift+0x3e>
 800aa5a:	4602      	mov	r2, r0
 800aa5c:	4b2a      	ldr	r3, [pc, #168]	; (800ab08 <__lshift+0xd8>)
 800aa5e:	482b      	ldr	r0, [pc, #172]	; (800ab0c <__lshift+0xdc>)
 800aa60:	f240 11d9 	movw	r1, #473	; 0x1d9
 800aa64:	f001 f8f4 	bl	800bc50 <__assert_func>
 800aa68:	3101      	adds	r1, #1
 800aa6a:	005b      	lsls	r3, r3, #1
 800aa6c:	e7ee      	b.n	800aa4c <__lshift+0x1c>
 800aa6e:	2300      	movs	r3, #0
 800aa70:	f100 0114 	add.w	r1, r0, #20
 800aa74:	f100 0210 	add.w	r2, r0, #16
 800aa78:	4618      	mov	r0, r3
 800aa7a:	4553      	cmp	r3, sl
 800aa7c:	db37      	blt.n	800aaee <__lshift+0xbe>
 800aa7e:	6920      	ldr	r0, [r4, #16]
 800aa80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aa84:	f104 0314 	add.w	r3, r4, #20
 800aa88:	f019 091f 	ands.w	r9, r9, #31
 800aa8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aa90:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800aa94:	d02f      	beq.n	800aaf6 <__lshift+0xc6>
 800aa96:	f1c9 0e20 	rsb	lr, r9, #32
 800aa9a:	468a      	mov	sl, r1
 800aa9c:	f04f 0c00 	mov.w	ip, #0
 800aaa0:	681a      	ldr	r2, [r3, #0]
 800aaa2:	fa02 f209 	lsl.w	r2, r2, r9
 800aaa6:	ea42 020c 	orr.w	r2, r2, ip
 800aaaa:	f84a 2b04 	str.w	r2, [sl], #4
 800aaae:	f853 2b04 	ldr.w	r2, [r3], #4
 800aab2:	4298      	cmp	r0, r3
 800aab4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800aab8:	d8f2      	bhi.n	800aaa0 <__lshift+0x70>
 800aaba:	1b03      	subs	r3, r0, r4
 800aabc:	3b15      	subs	r3, #21
 800aabe:	f023 0303 	bic.w	r3, r3, #3
 800aac2:	3304      	adds	r3, #4
 800aac4:	f104 0215 	add.w	r2, r4, #21
 800aac8:	4290      	cmp	r0, r2
 800aaca:	bf38      	it	cc
 800aacc:	2304      	movcc	r3, #4
 800aace:	f841 c003 	str.w	ip, [r1, r3]
 800aad2:	f1bc 0f00 	cmp.w	ip, #0
 800aad6:	d001      	beq.n	800aadc <__lshift+0xac>
 800aad8:	f108 0602 	add.w	r6, r8, #2
 800aadc:	3e01      	subs	r6, #1
 800aade:	4638      	mov	r0, r7
 800aae0:	612e      	str	r6, [r5, #16]
 800aae2:	4621      	mov	r1, r4
 800aae4:	f7ff fd88 	bl	800a5f8 <_Bfree>
 800aae8:	4628      	mov	r0, r5
 800aaea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaee:	f842 0f04 	str.w	r0, [r2, #4]!
 800aaf2:	3301      	adds	r3, #1
 800aaf4:	e7c1      	b.n	800aa7a <__lshift+0x4a>
 800aaf6:	3904      	subs	r1, #4
 800aaf8:	f853 2b04 	ldr.w	r2, [r3], #4
 800aafc:	f841 2f04 	str.w	r2, [r1, #4]!
 800ab00:	4298      	cmp	r0, r3
 800ab02:	d8f9      	bhi.n	800aaf8 <__lshift+0xc8>
 800ab04:	e7ea      	b.n	800aadc <__lshift+0xac>
 800ab06:	bf00      	nop
 800ab08:	0800c930 	.word	0x0800c930
 800ab0c:	0800c9bc 	.word	0x0800c9bc

0800ab10 <__mcmp>:
 800ab10:	b530      	push	{r4, r5, lr}
 800ab12:	6902      	ldr	r2, [r0, #16]
 800ab14:	690c      	ldr	r4, [r1, #16]
 800ab16:	1b12      	subs	r2, r2, r4
 800ab18:	d10e      	bne.n	800ab38 <__mcmp+0x28>
 800ab1a:	f100 0314 	add.w	r3, r0, #20
 800ab1e:	3114      	adds	r1, #20
 800ab20:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ab24:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ab28:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ab2c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ab30:	42a5      	cmp	r5, r4
 800ab32:	d003      	beq.n	800ab3c <__mcmp+0x2c>
 800ab34:	d305      	bcc.n	800ab42 <__mcmp+0x32>
 800ab36:	2201      	movs	r2, #1
 800ab38:	4610      	mov	r0, r2
 800ab3a:	bd30      	pop	{r4, r5, pc}
 800ab3c:	4283      	cmp	r3, r0
 800ab3e:	d3f3      	bcc.n	800ab28 <__mcmp+0x18>
 800ab40:	e7fa      	b.n	800ab38 <__mcmp+0x28>
 800ab42:	f04f 32ff 	mov.w	r2, #4294967295
 800ab46:	e7f7      	b.n	800ab38 <__mcmp+0x28>

0800ab48 <__mdiff>:
 800ab48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab4c:	460c      	mov	r4, r1
 800ab4e:	4606      	mov	r6, r0
 800ab50:	4611      	mov	r1, r2
 800ab52:	4620      	mov	r0, r4
 800ab54:	4690      	mov	r8, r2
 800ab56:	f7ff ffdb 	bl	800ab10 <__mcmp>
 800ab5a:	1e05      	subs	r5, r0, #0
 800ab5c:	d110      	bne.n	800ab80 <__mdiff+0x38>
 800ab5e:	4629      	mov	r1, r5
 800ab60:	4630      	mov	r0, r6
 800ab62:	f7ff fd09 	bl	800a578 <_Balloc>
 800ab66:	b930      	cbnz	r0, 800ab76 <__mdiff+0x2e>
 800ab68:	4b3a      	ldr	r3, [pc, #232]	; (800ac54 <__mdiff+0x10c>)
 800ab6a:	4602      	mov	r2, r0
 800ab6c:	f240 2132 	movw	r1, #562	; 0x232
 800ab70:	4839      	ldr	r0, [pc, #228]	; (800ac58 <__mdiff+0x110>)
 800ab72:	f001 f86d 	bl	800bc50 <__assert_func>
 800ab76:	2301      	movs	r3, #1
 800ab78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ab7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab80:	bfa4      	itt	ge
 800ab82:	4643      	movge	r3, r8
 800ab84:	46a0      	movge	r8, r4
 800ab86:	4630      	mov	r0, r6
 800ab88:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ab8c:	bfa6      	itte	ge
 800ab8e:	461c      	movge	r4, r3
 800ab90:	2500      	movge	r5, #0
 800ab92:	2501      	movlt	r5, #1
 800ab94:	f7ff fcf0 	bl	800a578 <_Balloc>
 800ab98:	b920      	cbnz	r0, 800aba4 <__mdiff+0x5c>
 800ab9a:	4b2e      	ldr	r3, [pc, #184]	; (800ac54 <__mdiff+0x10c>)
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800aba2:	e7e5      	b.n	800ab70 <__mdiff+0x28>
 800aba4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800aba8:	6926      	ldr	r6, [r4, #16]
 800abaa:	60c5      	str	r5, [r0, #12]
 800abac:	f104 0914 	add.w	r9, r4, #20
 800abb0:	f108 0514 	add.w	r5, r8, #20
 800abb4:	f100 0e14 	add.w	lr, r0, #20
 800abb8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800abbc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800abc0:	f108 0210 	add.w	r2, r8, #16
 800abc4:	46f2      	mov	sl, lr
 800abc6:	2100      	movs	r1, #0
 800abc8:	f859 3b04 	ldr.w	r3, [r9], #4
 800abcc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800abd0:	fa1f f883 	uxth.w	r8, r3
 800abd4:	fa11 f18b 	uxtah	r1, r1, fp
 800abd8:	0c1b      	lsrs	r3, r3, #16
 800abda:	eba1 0808 	sub.w	r8, r1, r8
 800abde:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800abe2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800abe6:	fa1f f888 	uxth.w	r8, r8
 800abea:	1419      	asrs	r1, r3, #16
 800abec:	454e      	cmp	r6, r9
 800abee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800abf2:	f84a 3b04 	str.w	r3, [sl], #4
 800abf6:	d8e7      	bhi.n	800abc8 <__mdiff+0x80>
 800abf8:	1b33      	subs	r3, r6, r4
 800abfa:	3b15      	subs	r3, #21
 800abfc:	f023 0303 	bic.w	r3, r3, #3
 800ac00:	3304      	adds	r3, #4
 800ac02:	3415      	adds	r4, #21
 800ac04:	42a6      	cmp	r6, r4
 800ac06:	bf38      	it	cc
 800ac08:	2304      	movcc	r3, #4
 800ac0a:	441d      	add	r5, r3
 800ac0c:	4473      	add	r3, lr
 800ac0e:	469e      	mov	lr, r3
 800ac10:	462e      	mov	r6, r5
 800ac12:	4566      	cmp	r6, ip
 800ac14:	d30e      	bcc.n	800ac34 <__mdiff+0xec>
 800ac16:	f10c 0203 	add.w	r2, ip, #3
 800ac1a:	1b52      	subs	r2, r2, r5
 800ac1c:	f022 0203 	bic.w	r2, r2, #3
 800ac20:	3d03      	subs	r5, #3
 800ac22:	45ac      	cmp	ip, r5
 800ac24:	bf38      	it	cc
 800ac26:	2200      	movcc	r2, #0
 800ac28:	441a      	add	r2, r3
 800ac2a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ac2e:	b17b      	cbz	r3, 800ac50 <__mdiff+0x108>
 800ac30:	6107      	str	r7, [r0, #16]
 800ac32:	e7a3      	b.n	800ab7c <__mdiff+0x34>
 800ac34:	f856 8b04 	ldr.w	r8, [r6], #4
 800ac38:	fa11 f288 	uxtah	r2, r1, r8
 800ac3c:	1414      	asrs	r4, r2, #16
 800ac3e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ac42:	b292      	uxth	r2, r2
 800ac44:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ac48:	f84e 2b04 	str.w	r2, [lr], #4
 800ac4c:	1421      	asrs	r1, r4, #16
 800ac4e:	e7e0      	b.n	800ac12 <__mdiff+0xca>
 800ac50:	3f01      	subs	r7, #1
 800ac52:	e7ea      	b.n	800ac2a <__mdiff+0xe2>
 800ac54:	0800c930 	.word	0x0800c930
 800ac58:	0800c9bc 	.word	0x0800c9bc

0800ac5c <__ulp>:
 800ac5c:	b082      	sub	sp, #8
 800ac5e:	ed8d 0b00 	vstr	d0, [sp]
 800ac62:	9b01      	ldr	r3, [sp, #4]
 800ac64:	4912      	ldr	r1, [pc, #72]	; (800acb0 <__ulp+0x54>)
 800ac66:	4019      	ands	r1, r3
 800ac68:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800ac6c:	2900      	cmp	r1, #0
 800ac6e:	dd05      	ble.n	800ac7c <__ulp+0x20>
 800ac70:	2200      	movs	r2, #0
 800ac72:	460b      	mov	r3, r1
 800ac74:	ec43 2b10 	vmov	d0, r2, r3
 800ac78:	b002      	add	sp, #8
 800ac7a:	4770      	bx	lr
 800ac7c:	4249      	negs	r1, r1
 800ac7e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800ac82:	ea4f 5021 	mov.w	r0, r1, asr #20
 800ac86:	f04f 0200 	mov.w	r2, #0
 800ac8a:	f04f 0300 	mov.w	r3, #0
 800ac8e:	da04      	bge.n	800ac9a <__ulp+0x3e>
 800ac90:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ac94:	fa41 f300 	asr.w	r3, r1, r0
 800ac98:	e7ec      	b.n	800ac74 <__ulp+0x18>
 800ac9a:	f1a0 0114 	sub.w	r1, r0, #20
 800ac9e:	291e      	cmp	r1, #30
 800aca0:	bfda      	itte	le
 800aca2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800aca6:	fa20 f101 	lsrle.w	r1, r0, r1
 800acaa:	2101      	movgt	r1, #1
 800acac:	460a      	mov	r2, r1
 800acae:	e7e1      	b.n	800ac74 <__ulp+0x18>
 800acb0:	7ff00000 	.word	0x7ff00000

0800acb4 <__b2d>:
 800acb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acb6:	6905      	ldr	r5, [r0, #16]
 800acb8:	f100 0714 	add.w	r7, r0, #20
 800acbc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800acc0:	1f2e      	subs	r6, r5, #4
 800acc2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800acc6:	4620      	mov	r0, r4
 800acc8:	f7ff fd48 	bl	800a75c <__hi0bits>
 800accc:	f1c0 0320 	rsb	r3, r0, #32
 800acd0:	280a      	cmp	r0, #10
 800acd2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ad50 <__b2d+0x9c>
 800acd6:	600b      	str	r3, [r1, #0]
 800acd8:	dc14      	bgt.n	800ad04 <__b2d+0x50>
 800acda:	f1c0 0e0b 	rsb	lr, r0, #11
 800acde:	fa24 f10e 	lsr.w	r1, r4, lr
 800ace2:	42b7      	cmp	r7, r6
 800ace4:	ea41 030c 	orr.w	r3, r1, ip
 800ace8:	bf34      	ite	cc
 800acea:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800acee:	2100      	movcs	r1, #0
 800acf0:	3015      	adds	r0, #21
 800acf2:	fa04 f000 	lsl.w	r0, r4, r0
 800acf6:	fa21 f10e 	lsr.w	r1, r1, lr
 800acfa:	ea40 0201 	orr.w	r2, r0, r1
 800acfe:	ec43 2b10 	vmov	d0, r2, r3
 800ad02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad04:	42b7      	cmp	r7, r6
 800ad06:	bf3a      	itte	cc
 800ad08:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ad0c:	f1a5 0608 	subcc.w	r6, r5, #8
 800ad10:	2100      	movcs	r1, #0
 800ad12:	380b      	subs	r0, #11
 800ad14:	d017      	beq.n	800ad46 <__b2d+0x92>
 800ad16:	f1c0 0c20 	rsb	ip, r0, #32
 800ad1a:	fa04 f500 	lsl.w	r5, r4, r0
 800ad1e:	42be      	cmp	r6, r7
 800ad20:	fa21 f40c 	lsr.w	r4, r1, ip
 800ad24:	ea45 0504 	orr.w	r5, r5, r4
 800ad28:	bf8c      	ite	hi
 800ad2a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ad2e:	2400      	movls	r4, #0
 800ad30:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ad34:	fa01 f000 	lsl.w	r0, r1, r0
 800ad38:	fa24 f40c 	lsr.w	r4, r4, ip
 800ad3c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ad40:	ea40 0204 	orr.w	r2, r0, r4
 800ad44:	e7db      	b.n	800acfe <__b2d+0x4a>
 800ad46:	ea44 030c 	orr.w	r3, r4, ip
 800ad4a:	460a      	mov	r2, r1
 800ad4c:	e7d7      	b.n	800acfe <__b2d+0x4a>
 800ad4e:	bf00      	nop
 800ad50:	3ff00000 	.word	0x3ff00000

0800ad54 <__d2b>:
 800ad54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ad58:	4689      	mov	r9, r1
 800ad5a:	2101      	movs	r1, #1
 800ad5c:	ec57 6b10 	vmov	r6, r7, d0
 800ad60:	4690      	mov	r8, r2
 800ad62:	f7ff fc09 	bl	800a578 <_Balloc>
 800ad66:	4604      	mov	r4, r0
 800ad68:	b930      	cbnz	r0, 800ad78 <__d2b+0x24>
 800ad6a:	4602      	mov	r2, r0
 800ad6c:	4b25      	ldr	r3, [pc, #148]	; (800ae04 <__d2b+0xb0>)
 800ad6e:	4826      	ldr	r0, [pc, #152]	; (800ae08 <__d2b+0xb4>)
 800ad70:	f240 310a 	movw	r1, #778	; 0x30a
 800ad74:	f000 ff6c 	bl	800bc50 <__assert_func>
 800ad78:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ad7c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ad80:	bb35      	cbnz	r5, 800add0 <__d2b+0x7c>
 800ad82:	2e00      	cmp	r6, #0
 800ad84:	9301      	str	r3, [sp, #4]
 800ad86:	d028      	beq.n	800adda <__d2b+0x86>
 800ad88:	4668      	mov	r0, sp
 800ad8a:	9600      	str	r6, [sp, #0]
 800ad8c:	f7ff fd06 	bl	800a79c <__lo0bits>
 800ad90:	9900      	ldr	r1, [sp, #0]
 800ad92:	b300      	cbz	r0, 800add6 <__d2b+0x82>
 800ad94:	9a01      	ldr	r2, [sp, #4]
 800ad96:	f1c0 0320 	rsb	r3, r0, #32
 800ad9a:	fa02 f303 	lsl.w	r3, r2, r3
 800ad9e:	430b      	orrs	r3, r1
 800ada0:	40c2      	lsrs	r2, r0
 800ada2:	6163      	str	r3, [r4, #20]
 800ada4:	9201      	str	r2, [sp, #4]
 800ada6:	9b01      	ldr	r3, [sp, #4]
 800ada8:	61a3      	str	r3, [r4, #24]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	bf14      	ite	ne
 800adae:	2202      	movne	r2, #2
 800adb0:	2201      	moveq	r2, #1
 800adb2:	6122      	str	r2, [r4, #16]
 800adb4:	b1d5      	cbz	r5, 800adec <__d2b+0x98>
 800adb6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800adba:	4405      	add	r5, r0
 800adbc:	f8c9 5000 	str.w	r5, [r9]
 800adc0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800adc4:	f8c8 0000 	str.w	r0, [r8]
 800adc8:	4620      	mov	r0, r4
 800adca:	b003      	add	sp, #12
 800adcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800add0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800add4:	e7d5      	b.n	800ad82 <__d2b+0x2e>
 800add6:	6161      	str	r1, [r4, #20]
 800add8:	e7e5      	b.n	800ada6 <__d2b+0x52>
 800adda:	a801      	add	r0, sp, #4
 800addc:	f7ff fcde 	bl	800a79c <__lo0bits>
 800ade0:	9b01      	ldr	r3, [sp, #4]
 800ade2:	6163      	str	r3, [r4, #20]
 800ade4:	2201      	movs	r2, #1
 800ade6:	6122      	str	r2, [r4, #16]
 800ade8:	3020      	adds	r0, #32
 800adea:	e7e3      	b.n	800adb4 <__d2b+0x60>
 800adec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800adf0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800adf4:	f8c9 0000 	str.w	r0, [r9]
 800adf8:	6918      	ldr	r0, [r3, #16]
 800adfa:	f7ff fcaf 	bl	800a75c <__hi0bits>
 800adfe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ae02:	e7df      	b.n	800adc4 <__d2b+0x70>
 800ae04:	0800c930 	.word	0x0800c930
 800ae08:	0800c9bc 	.word	0x0800c9bc

0800ae0c <__ratio>:
 800ae0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae10:	4688      	mov	r8, r1
 800ae12:	4669      	mov	r1, sp
 800ae14:	4681      	mov	r9, r0
 800ae16:	f7ff ff4d 	bl	800acb4 <__b2d>
 800ae1a:	a901      	add	r1, sp, #4
 800ae1c:	4640      	mov	r0, r8
 800ae1e:	ec55 4b10 	vmov	r4, r5, d0
 800ae22:	f7ff ff47 	bl	800acb4 <__b2d>
 800ae26:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ae2a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ae2e:	eba3 0c02 	sub.w	ip, r3, r2
 800ae32:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ae36:	1a9b      	subs	r3, r3, r2
 800ae38:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ae3c:	ec51 0b10 	vmov	r0, r1, d0
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	bfd6      	itet	le
 800ae44:	460a      	movle	r2, r1
 800ae46:	462a      	movgt	r2, r5
 800ae48:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ae4c:	468b      	mov	fp, r1
 800ae4e:	462f      	mov	r7, r5
 800ae50:	bfd4      	ite	le
 800ae52:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ae56:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ae5a:	4620      	mov	r0, r4
 800ae5c:	ee10 2a10 	vmov	r2, s0
 800ae60:	465b      	mov	r3, fp
 800ae62:	4639      	mov	r1, r7
 800ae64:	f7f5 fd12 	bl	800088c <__aeabi_ddiv>
 800ae68:	ec41 0b10 	vmov	d0, r0, r1
 800ae6c:	b003      	add	sp, #12
 800ae6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ae72 <__copybits>:
 800ae72:	3901      	subs	r1, #1
 800ae74:	b570      	push	{r4, r5, r6, lr}
 800ae76:	1149      	asrs	r1, r1, #5
 800ae78:	6914      	ldr	r4, [r2, #16]
 800ae7a:	3101      	adds	r1, #1
 800ae7c:	f102 0314 	add.w	r3, r2, #20
 800ae80:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ae84:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ae88:	1f05      	subs	r5, r0, #4
 800ae8a:	42a3      	cmp	r3, r4
 800ae8c:	d30c      	bcc.n	800aea8 <__copybits+0x36>
 800ae8e:	1aa3      	subs	r3, r4, r2
 800ae90:	3b11      	subs	r3, #17
 800ae92:	f023 0303 	bic.w	r3, r3, #3
 800ae96:	3211      	adds	r2, #17
 800ae98:	42a2      	cmp	r2, r4
 800ae9a:	bf88      	it	hi
 800ae9c:	2300      	movhi	r3, #0
 800ae9e:	4418      	add	r0, r3
 800aea0:	2300      	movs	r3, #0
 800aea2:	4288      	cmp	r0, r1
 800aea4:	d305      	bcc.n	800aeb2 <__copybits+0x40>
 800aea6:	bd70      	pop	{r4, r5, r6, pc}
 800aea8:	f853 6b04 	ldr.w	r6, [r3], #4
 800aeac:	f845 6f04 	str.w	r6, [r5, #4]!
 800aeb0:	e7eb      	b.n	800ae8a <__copybits+0x18>
 800aeb2:	f840 3b04 	str.w	r3, [r0], #4
 800aeb6:	e7f4      	b.n	800aea2 <__copybits+0x30>

0800aeb8 <__any_on>:
 800aeb8:	f100 0214 	add.w	r2, r0, #20
 800aebc:	6900      	ldr	r0, [r0, #16]
 800aebe:	114b      	asrs	r3, r1, #5
 800aec0:	4298      	cmp	r0, r3
 800aec2:	b510      	push	{r4, lr}
 800aec4:	db11      	blt.n	800aeea <__any_on+0x32>
 800aec6:	dd0a      	ble.n	800aede <__any_on+0x26>
 800aec8:	f011 011f 	ands.w	r1, r1, #31
 800aecc:	d007      	beq.n	800aede <__any_on+0x26>
 800aece:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800aed2:	fa24 f001 	lsr.w	r0, r4, r1
 800aed6:	fa00 f101 	lsl.w	r1, r0, r1
 800aeda:	428c      	cmp	r4, r1
 800aedc:	d10b      	bne.n	800aef6 <__any_on+0x3e>
 800aede:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d803      	bhi.n	800aeee <__any_on+0x36>
 800aee6:	2000      	movs	r0, #0
 800aee8:	bd10      	pop	{r4, pc}
 800aeea:	4603      	mov	r3, r0
 800aeec:	e7f7      	b.n	800aede <__any_on+0x26>
 800aeee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aef2:	2900      	cmp	r1, #0
 800aef4:	d0f5      	beq.n	800aee2 <__any_on+0x2a>
 800aef6:	2001      	movs	r0, #1
 800aef8:	e7f6      	b.n	800aee8 <__any_on+0x30>

0800aefa <_calloc_r>:
 800aefa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aefc:	fba1 2402 	umull	r2, r4, r1, r2
 800af00:	b94c      	cbnz	r4, 800af16 <_calloc_r+0x1c>
 800af02:	4611      	mov	r1, r2
 800af04:	9201      	str	r2, [sp, #4]
 800af06:	f000 f87b 	bl	800b000 <_malloc_r>
 800af0a:	9a01      	ldr	r2, [sp, #4]
 800af0c:	4605      	mov	r5, r0
 800af0e:	b930      	cbnz	r0, 800af1e <_calloc_r+0x24>
 800af10:	4628      	mov	r0, r5
 800af12:	b003      	add	sp, #12
 800af14:	bd30      	pop	{r4, r5, pc}
 800af16:	220c      	movs	r2, #12
 800af18:	6002      	str	r2, [r0, #0]
 800af1a:	2500      	movs	r5, #0
 800af1c:	e7f8      	b.n	800af10 <_calloc_r+0x16>
 800af1e:	4621      	mov	r1, r4
 800af20:	f7fc fae4 	bl	80074ec <memset>
 800af24:	e7f4      	b.n	800af10 <_calloc_r+0x16>
	...

0800af28 <_free_r>:
 800af28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af2a:	2900      	cmp	r1, #0
 800af2c:	d044      	beq.n	800afb8 <_free_r+0x90>
 800af2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af32:	9001      	str	r0, [sp, #4]
 800af34:	2b00      	cmp	r3, #0
 800af36:	f1a1 0404 	sub.w	r4, r1, #4
 800af3a:	bfb8      	it	lt
 800af3c:	18e4      	addlt	r4, r4, r3
 800af3e:	f001 f88b 	bl	800c058 <__malloc_lock>
 800af42:	4a1e      	ldr	r2, [pc, #120]	; (800afbc <_free_r+0x94>)
 800af44:	9801      	ldr	r0, [sp, #4]
 800af46:	6813      	ldr	r3, [r2, #0]
 800af48:	b933      	cbnz	r3, 800af58 <_free_r+0x30>
 800af4a:	6063      	str	r3, [r4, #4]
 800af4c:	6014      	str	r4, [r2, #0]
 800af4e:	b003      	add	sp, #12
 800af50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af54:	f001 b886 	b.w	800c064 <__malloc_unlock>
 800af58:	42a3      	cmp	r3, r4
 800af5a:	d908      	bls.n	800af6e <_free_r+0x46>
 800af5c:	6825      	ldr	r5, [r4, #0]
 800af5e:	1961      	adds	r1, r4, r5
 800af60:	428b      	cmp	r3, r1
 800af62:	bf01      	itttt	eq
 800af64:	6819      	ldreq	r1, [r3, #0]
 800af66:	685b      	ldreq	r3, [r3, #4]
 800af68:	1949      	addeq	r1, r1, r5
 800af6a:	6021      	streq	r1, [r4, #0]
 800af6c:	e7ed      	b.n	800af4a <_free_r+0x22>
 800af6e:	461a      	mov	r2, r3
 800af70:	685b      	ldr	r3, [r3, #4]
 800af72:	b10b      	cbz	r3, 800af78 <_free_r+0x50>
 800af74:	42a3      	cmp	r3, r4
 800af76:	d9fa      	bls.n	800af6e <_free_r+0x46>
 800af78:	6811      	ldr	r1, [r2, #0]
 800af7a:	1855      	adds	r5, r2, r1
 800af7c:	42a5      	cmp	r5, r4
 800af7e:	d10b      	bne.n	800af98 <_free_r+0x70>
 800af80:	6824      	ldr	r4, [r4, #0]
 800af82:	4421      	add	r1, r4
 800af84:	1854      	adds	r4, r2, r1
 800af86:	42a3      	cmp	r3, r4
 800af88:	6011      	str	r1, [r2, #0]
 800af8a:	d1e0      	bne.n	800af4e <_free_r+0x26>
 800af8c:	681c      	ldr	r4, [r3, #0]
 800af8e:	685b      	ldr	r3, [r3, #4]
 800af90:	6053      	str	r3, [r2, #4]
 800af92:	4421      	add	r1, r4
 800af94:	6011      	str	r1, [r2, #0]
 800af96:	e7da      	b.n	800af4e <_free_r+0x26>
 800af98:	d902      	bls.n	800afa0 <_free_r+0x78>
 800af9a:	230c      	movs	r3, #12
 800af9c:	6003      	str	r3, [r0, #0]
 800af9e:	e7d6      	b.n	800af4e <_free_r+0x26>
 800afa0:	6825      	ldr	r5, [r4, #0]
 800afa2:	1961      	adds	r1, r4, r5
 800afa4:	428b      	cmp	r3, r1
 800afa6:	bf04      	itt	eq
 800afa8:	6819      	ldreq	r1, [r3, #0]
 800afaa:	685b      	ldreq	r3, [r3, #4]
 800afac:	6063      	str	r3, [r4, #4]
 800afae:	bf04      	itt	eq
 800afb0:	1949      	addeq	r1, r1, r5
 800afb2:	6021      	streq	r1, [r4, #0]
 800afb4:	6054      	str	r4, [r2, #4]
 800afb6:	e7ca      	b.n	800af4e <_free_r+0x26>
 800afb8:	b003      	add	sp, #12
 800afba:	bd30      	pop	{r4, r5, pc}
 800afbc:	20000454 	.word	0x20000454

0800afc0 <sbrk_aligned>:
 800afc0:	b570      	push	{r4, r5, r6, lr}
 800afc2:	4e0e      	ldr	r6, [pc, #56]	; (800affc <sbrk_aligned+0x3c>)
 800afc4:	460c      	mov	r4, r1
 800afc6:	6831      	ldr	r1, [r6, #0]
 800afc8:	4605      	mov	r5, r0
 800afca:	b911      	cbnz	r1, 800afd2 <sbrk_aligned+0x12>
 800afcc:	f000 fd28 	bl	800ba20 <_sbrk_r>
 800afd0:	6030      	str	r0, [r6, #0]
 800afd2:	4621      	mov	r1, r4
 800afd4:	4628      	mov	r0, r5
 800afd6:	f000 fd23 	bl	800ba20 <_sbrk_r>
 800afda:	1c43      	adds	r3, r0, #1
 800afdc:	d00a      	beq.n	800aff4 <sbrk_aligned+0x34>
 800afde:	1cc4      	adds	r4, r0, #3
 800afe0:	f024 0403 	bic.w	r4, r4, #3
 800afe4:	42a0      	cmp	r0, r4
 800afe6:	d007      	beq.n	800aff8 <sbrk_aligned+0x38>
 800afe8:	1a21      	subs	r1, r4, r0
 800afea:	4628      	mov	r0, r5
 800afec:	f000 fd18 	bl	800ba20 <_sbrk_r>
 800aff0:	3001      	adds	r0, #1
 800aff2:	d101      	bne.n	800aff8 <sbrk_aligned+0x38>
 800aff4:	f04f 34ff 	mov.w	r4, #4294967295
 800aff8:	4620      	mov	r0, r4
 800affa:	bd70      	pop	{r4, r5, r6, pc}
 800affc:	20000458 	.word	0x20000458

0800b000 <_malloc_r>:
 800b000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b004:	1ccd      	adds	r5, r1, #3
 800b006:	f025 0503 	bic.w	r5, r5, #3
 800b00a:	3508      	adds	r5, #8
 800b00c:	2d0c      	cmp	r5, #12
 800b00e:	bf38      	it	cc
 800b010:	250c      	movcc	r5, #12
 800b012:	2d00      	cmp	r5, #0
 800b014:	4607      	mov	r7, r0
 800b016:	db01      	blt.n	800b01c <_malloc_r+0x1c>
 800b018:	42a9      	cmp	r1, r5
 800b01a:	d905      	bls.n	800b028 <_malloc_r+0x28>
 800b01c:	230c      	movs	r3, #12
 800b01e:	603b      	str	r3, [r7, #0]
 800b020:	2600      	movs	r6, #0
 800b022:	4630      	mov	r0, r6
 800b024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b028:	4e2e      	ldr	r6, [pc, #184]	; (800b0e4 <_malloc_r+0xe4>)
 800b02a:	f001 f815 	bl	800c058 <__malloc_lock>
 800b02e:	6833      	ldr	r3, [r6, #0]
 800b030:	461c      	mov	r4, r3
 800b032:	bb34      	cbnz	r4, 800b082 <_malloc_r+0x82>
 800b034:	4629      	mov	r1, r5
 800b036:	4638      	mov	r0, r7
 800b038:	f7ff ffc2 	bl	800afc0 <sbrk_aligned>
 800b03c:	1c43      	adds	r3, r0, #1
 800b03e:	4604      	mov	r4, r0
 800b040:	d14d      	bne.n	800b0de <_malloc_r+0xde>
 800b042:	6834      	ldr	r4, [r6, #0]
 800b044:	4626      	mov	r6, r4
 800b046:	2e00      	cmp	r6, #0
 800b048:	d140      	bne.n	800b0cc <_malloc_r+0xcc>
 800b04a:	6823      	ldr	r3, [r4, #0]
 800b04c:	4631      	mov	r1, r6
 800b04e:	4638      	mov	r0, r7
 800b050:	eb04 0803 	add.w	r8, r4, r3
 800b054:	f000 fce4 	bl	800ba20 <_sbrk_r>
 800b058:	4580      	cmp	r8, r0
 800b05a:	d13a      	bne.n	800b0d2 <_malloc_r+0xd2>
 800b05c:	6821      	ldr	r1, [r4, #0]
 800b05e:	3503      	adds	r5, #3
 800b060:	1a6d      	subs	r5, r5, r1
 800b062:	f025 0503 	bic.w	r5, r5, #3
 800b066:	3508      	adds	r5, #8
 800b068:	2d0c      	cmp	r5, #12
 800b06a:	bf38      	it	cc
 800b06c:	250c      	movcc	r5, #12
 800b06e:	4629      	mov	r1, r5
 800b070:	4638      	mov	r0, r7
 800b072:	f7ff ffa5 	bl	800afc0 <sbrk_aligned>
 800b076:	3001      	adds	r0, #1
 800b078:	d02b      	beq.n	800b0d2 <_malloc_r+0xd2>
 800b07a:	6823      	ldr	r3, [r4, #0]
 800b07c:	442b      	add	r3, r5
 800b07e:	6023      	str	r3, [r4, #0]
 800b080:	e00e      	b.n	800b0a0 <_malloc_r+0xa0>
 800b082:	6822      	ldr	r2, [r4, #0]
 800b084:	1b52      	subs	r2, r2, r5
 800b086:	d41e      	bmi.n	800b0c6 <_malloc_r+0xc6>
 800b088:	2a0b      	cmp	r2, #11
 800b08a:	d916      	bls.n	800b0ba <_malloc_r+0xba>
 800b08c:	1961      	adds	r1, r4, r5
 800b08e:	42a3      	cmp	r3, r4
 800b090:	6025      	str	r5, [r4, #0]
 800b092:	bf18      	it	ne
 800b094:	6059      	strne	r1, [r3, #4]
 800b096:	6863      	ldr	r3, [r4, #4]
 800b098:	bf08      	it	eq
 800b09a:	6031      	streq	r1, [r6, #0]
 800b09c:	5162      	str	r2, [r4, r5]
 800b09e:	604b      	str	r3, [r1, #4]
 800b0a0:	4638      	mov	r0, r7
 800b0a2:	f104 060b 	add.w	r6, r4, #11
 800b0a6:	f000 ffdd 	bl	800c064 <__malloc_unlock>
 800b0aa:	f026 0607 	bic.w	r6, r6, #7
 800b0ae:	1d23      	adds	r3, r4, #4
 800b0b0:	1af2      	subs	r2, r6, r3
 800b0b2:	d0b6      	beq.n	800b022 <_malloc_r+0x22>
 800b0b4:	1b9b      	subs	r3, r3, r6
 800b0b6:	50a3      	str	r3, [r4, r2]
 800b0b8:	e7b3      	b.n	800b022 <_malloc_r+0x22>
 800b0ba:	6862      	ldr	r2, [r4, #4]
 800b0bc:	42a3      	cmp	r3, r4
 800b0be:	bf0c      	ite	eq
 800b0c0:	6032      	streq	r2, [r6, #0]
 800b0c2:	605a      	strne	r2, [r3, #4]
 800b0c4:	e7ec      	b.n	800b0a0 <_malloc_r+0xa0>
 800b0c6:	4623      	mov	r3, r4
 800b0c8:	6864      	ldr	r4, [r4, #4]
 800b0ca:	e7b2      	b.n	800b032 <_malloc_r+0x32>
 800b0cc:	4634      	mov	r4, r6
 800b0ce:	6876      	ldr	r6, [r6, #4]
 800b0d0:	e7b9      	b.n	800b046 <_malloc_r+0x46>
 800b0d2:	230c      	movs	r3, #12
 800b0d4:	603b      	str	r3, [r7, #0]
 800b0d6:	4638      	mov	r0, r7
 800b0d8:	f000 ffc4 	bl	800c064 <__malloc_unlock>
 800b0dc:	e7a1      	b.n	800b022 <_malloc_r+0x22>
 800b0de:	6025      	str	r5, [r4, #0]
 800b0e0:	e7de      	b.n	800b0a0 <_malloc_r+0xa0>
 800b0e2:	bf00      	nop
 800b0e4:	20000454 	.word	0x20000454

0800b0e8 <__ssputs_r>:
 800b0e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0ec:	688e      	ldr	r6, [r1, #8]
 800b0ee:	429e      	cmp	r6, r3
 800b0f0:	4682      	mov	sl, r0
 800b0f2:	460c      	mov	r4, r1
 800b0f4:	4690      	mov	r8, r2
 800b0f6:	461f      	mov	r7, r3
 800b0f8:	d838      	bhi.n	800b16c <__ssputs_r+0x84>
 800b0fa:	898a      	ldrh	r2, [r1, #12]
 800b0fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b100:	d032      	beq.n	800b168 <__ssputs_r+0x80>
 800b102:	6825      	ldr	r5, [r4, #0]
 800b104:	6909      	ldr	r1, [r1, #16]
 800b106:	eba5 0901 	sub.w	r9, r5, r1
 800b10a:	6965      	ldr	r5, [r4, #20]
 800b10c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b110:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b114:	3301      	adds	r3, #1
 800b116:	444b      	add	r3, r9
 800b118:	106d      	asrs	r5, r5, #1
 800b11a:	429d      	cmp	r5, r3
 800b11c:	bf38      	it	cc
 800b11e:	461d      	movcc	r5, r3
 800b120:	0553      	lsls	r3, r2, #21
 800b122:	d531      	bpl.n	800b188 <__ssputs_r+0xa0>
 800b124:	4629      	mov	r1, r5
 800b126:	f7ff ff6b 	bl	800b000 <_malloc_r>
 800b12a:	4606      	mov	r6, r0
 800b12c:	b950      	cbnz	r0, 800b144 <__ssputs_r+0x5c>
 800b12e:	230c      	movs	r3, #12
 800b130:	f8ca 3000 	str.w	r3, [sl]
 800b134:	89a3      	ldrh	r3, [r4, #12]
 800b136:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b13a:	81a3      	strh	r3, [r4, #12]
 800b13c:	f04f 30ff 	mov.w	r0, #4294967295
 800b140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b144:	6921      	ldr	r1, [r4, #16]
 800b146:	464a      	mov	r2, r9
 800b148:	f7ff fa08 	bl	800a55c <memcpy>
 800b14c:	89a3      	ldrh	r3, [r4, #12]
 800b14e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b156:	81a3      	strh	r3, [r4, #12]
 800b158:	6126      	str	r6, [r4, #16]
 800b15a:	6165      	str	r5, [r4, #20]
 800b15c:	444e      	add	r6, r9
 800b15e:	eba5 0509 	sub.w	r5, r5, r9
 800b162:	6026      	str	r6, [r4, #0]
 800b164:	60a5      	str	r5, [r4, #8]
 800b166:	463e      	mov	r6, r7
 800b168:	42be      	cmp	r6, r7
 800b16a:	d900      	bls.n	800b16e <__ssputs_r+0x86>
 800b16c:	463e      	mov	r6, r7
 800b16e:	6820      	ldr	r0, [r4, #0]
 800b170:	4632      	mov	r2, r6
 800b172:	4641      	mov	r1, r8
 800b174:	f000 ff56 	bl	800c024 <memmove>
 800b178:	68a3      	ldr	r3, [r4, #8]
 800b17a:	1b9b      	subs	r3, r3, r6
 800b17c:	60a3      	str	r3, [r4, #8]
 800b17e:	6823      	ldr	r3, [r4, #0]
 800b180:	4433      	add	r3, r6
 800b182:	6023      	str	r3, [r4, #0]
 800b184:	2000      	movs	r0, #0
 800b186:	e7db      	b.n	800b140 <__ssputs_r+0x58>
 800b188:	462a      	mov	r2, r5
 800b18a:	f000 ff71 	bl	800c070 <_realloc_r>
 800b18e:	4606      	mov	r6, r0
 800b190:	2800      	cmp	r0, #0
 800b192:	d1e1      	bne.n	800b158 <__ssputs_r+0x70>
 800b194:	6921      	ldr	r1, [r4, #16]
 800b196:	4650      	mov	r0, sl
 800b198:	f7ff fec6 	bl	800af28 <_free_r>
 800b19c:	e7c7      	b.n	800b12e <__ssputs_r+0x46>
	...

0800b1a0 <_svfiprintf_r>:
 800b1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1a4:	4698      	mov	r8, r3
 800b1a6:	898b      	ldrh	r3, [r1, #12]
 800b1a8:	061b      	lsls	r3, r3, #24
 800b1aa:	b09d      	sub	sp, #116	; 0x74
 800b1ac:	4607      	mov	r7, r0
 800b1ae:	460d      	mov	r5, r1
 800b1b0:	4614      	mov	r4, r2
 800b1b2:	d50e      	bpl.n	800b1d2 <_svfiprintf_r+0x32>
 800b1b4:	690b      	ldr	r3, [r1, #16]
 800b1b6:	b963      	cbnz	r3, 800b1d2 <_svfiprintf_r+0x32>
 800b1b8:	2140      	movs	r1, #64	; 0x40
 800b1ba:	f7ff ff21 	bl	800b000 <_malloc_r>
 800b1be:	6028      	str	r0, [r5, #0]
 800b1c0:	6128      	str	r0, [r5, #16]
 800b1c2:	b920      	cbnz	r0, 800b1ce <_svfiprintf_r+0x2e>
 800b1c4:	230c      	movs	r3, #12
 800b1c6:	603b      	str	r3, [r7, #0]
 800b1c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1cc:	e0d1      	b.n	800b372 <_svfiprintf_r+0x1d2>
 800b1ce:	2340      	movs	r3, #64	; 0x40
 800b1d0:	616b      	str	r3, [r5, #20]
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	9309      	str	r3, [sp, #36]	; 0x24
 800b1d6:	2320      	movs	r3, #32
 800b1d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b1dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1e0:	2330      	movs	r3, #48	; 0x30
 800b1e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b38c <_svfiprintf_r+0x1ec>
 800b1e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b1ea:	f04f 0901 	mov.w	r9, #1
 800b1ee:	4623      	mov	r3, r4
 800b1f0:	469a      	mov	sl, r3
 800b1f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1f6:	b10a      	cbz	r2, 800b1fc <_svfiprintf_r+0x5c>
 800b1f8:	2a25      	cmp	r2, #37	; 0x25
 800b1fa:	d1f9      	bne.n	800b1f0 <_svfiprintf_r+0x50>
 800b1fc:	ebba 0b04 	subs.w	fp, sl, r4
 800b200:	d00b      	beq.n	800b21a <_svfiprintf_r+0x7a>
 800b202:	465b      	mov	r3, fp
 800b204:	4622      	mov	r2, r4
 800b206:	4629      	mov	r1, r5
 800b208:	4638      	mov	r0, r7
 800b20a:	f7ff ff6d 	bl	800b0e8 <__ssputs_r>
 800b20e:	3001      	adds	r0, #1
 800b210:	f000 80aa 	beq.w	800b368 <_svfiprintf_r+0x1c8>
 800b214:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b216:	445a      	add	r2, fp
 800b218:	9209      	str	r2, [sp, #36]	; 0x24
 800b21a:	f89a 3000 	ldrb.w	r3, [sl]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	f000 80a2 	beq.w	800b368 <_svfiprintf_r+0x1c8>
 800b224:	2300      	movs	r3, #0
 800b226:	f04f 32ff 	mov.w	r2, #4294967295
 800b22a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b22e:	f10a 0a01 	add.w	sl, sl, #1
 800b232:	9304      	str	r3, [sp, #16]
 800b234:	9307      	str	r3, [sp, #28]
 800b236:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b23a:	931a      	str	r3, [sp, #104]	; 0x68
 800b23c:	4654      	mov	r4, sl
 800b23e:	2205      	movs	r2, #5
 800b240:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b244:	4851      	ldr	r0, [pc, #324]	; (800b38c <_svfiprintf_r+0x1ec>)
 800b246:	f7f4 ffeb 	bl	8000220 <memchr>
 800b24a:	9a04      	ldr	r2, [sp, #16]
 800b24c:	b9d8      	cbnz	r0, 800b286 <_svfiprintf_r+0xe6>
 800b24e:	06d0      	lsls	r0, r2, #27
 800b250:	bf44      	itt	mi
 800b252:	2320      	movmi	r3, #32
 800b254:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b258:	0711      	lsls	r1, r2, #28
 800b25a:	bf44      	itt	mi
 800b25c:	232b      	movmi	r3, #43	; 0x2b
 800b25e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b262:	f89a 3000 	ldrb.w	r3, [sl]
 800b266:	2b2a      	cmp	r3, #42	; 0x2a
 800b268:	d015      	beq.n	800b296 <_svfiprintf_r+0xf6>
 800b26a:	9a07      	ldr	r2, [sp, #28]
 800b26c:	4654      	mov	r4, sl
 800b26e:	2000      	movs	r0, #0
 800b270:	f04f 0c0a 	mov.w	ip, #10
 800b274:	4621      	mov	r1, r4
 800b276:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b27a:	3b30      	subs	r3, #48	; 0x30
 800b27c:	2b09      	cmp	r3, #9
 800b27e:	d94e      	bls.n	800b31e <_svfiprintf_r+0x17e>
 800b280:	b1b0      	cbz	r0, 800b2b0 <_svfiprintf_r+0x110>
 800b282:	9207      	str	r2, [sp, #28]
 800b284:	e014      	b.n	800b2b0 <_svfiprintf_r+0x110>
 800b286:	eba0 0308 	sub.w	r3, r0, r8
 800b28a:	fa09 f303 	lsl.w	r3, r9, r3
 800b28e:	4313      	orrs	r3, r2
 800b290:	9304      	str	r3, [sp, #16]
 800b292:	46a2      	mov	sl, r4
 800b294:	e7d2      	b.n	800b23c <_svfiprintf_r+0x9c>
 800b296:	9b03      	ldr	r3, [sp, #12]
 800b298:	1d19      	adds	r1, r3, #4
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	9103      	str	r1, [sp, #12]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	bfbb      	ittet	lt
 800b2a2:	425b      	neglt	r3, r3
 800b2a4:	f042 0202 	orrlt.w	r2, r2, #2
 800b2a8:	9307      	strge	r3, [sp, #28]
 800b2aa:	9307      	strlt	r3, [sp, #28]
 800b2ac:	bfb8      	it	lt
 800b2ae:	9204      	strlt	r2, [sp, #16]
 800b2b0:	7823      	ldrb	r3, [r4, #0]
 800b2b2:	2b2e      	cmp	r3, #46	; 0x2e
 800b2b4:	d10c      	bne.n	800b2d0 <_svfiprintf_r+0x130>
 800b2b6:	7863      	ldrb	r3, [r4, #1]
 800b2b8:	2b2a      	cmp	r3, #42	; 0x2a
 800b2ba:	d135      	bne.n	800b328 <_svfiprintf_r+0x188>
 800b2bc:	9b03      	ldr	r3, [sp, #12]
 800b2be:	1d1a      	adds	r2, r3, #4
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	9203      	str	r2, [sp, #12]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	bfb8      	it	lt
 800b2c8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b2cc:	3402      	adds	r4, #2
 800b2ce:	9305      	str	r3, [sp, #20]
 800b2d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b39c <_svfiprintf_r+0x1fc>
 800b2d4:	7821      	ldrb	r1, [r4, #0]
 800b2d6:	2203      	movs	r2, #3
 800b2d8:	4650      	mov	r0, sl
 800b2da:	f7f4 ffa1 	bl	8000220 <memchr>
 800b2de:	b140      	cbz	r0, 800b2f2 <_svfiprintf_r+0x152>
 800b2e0:	2340      	movs	r3, #64	; 0x40
 800b2e2:	eba0 000a 	sub.w	r0, r0, sl
 800b2e6:	fa03 f000 	lsl.w	r0, r3, r0
 800b2ea:	9b04      	ldr	r3, [sp, #16]
 800b2ec:	4303      	orrs	r3, r0
 800b2ee:	3401      	adds	r4, #1
 800b2f0:	9304      	str	r3, [sp, #16]
 800b2f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2f6:	4826      	ldr	r0, [pc, #152]	; (800b390 <_svfiprintf_r+0x1f0>)
 800b2f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b2fc:	2206      	movs	r2, #6
 800b2fe:	f7f4 ff8f 	bl	8000220 <memchr>
 800b302:	2800      	cmp	r0, #0
 800b304:	d038      	beq.n	800b378 <_svfiprintf_r+0x1d8>
 800b306:	4b23      	ldr	r3, [pc, #140]	; (800b394 <_svfiprintf_r+0x1f4>)
 800b308:	bb1b      	cbnz	r3, 800b352 <_svfiprintf_r+0x1b2>
 800b30a:	9b03      	ldr	r3, [sp, #12]
 800b30c:	3307      	adds	r3, #7
 800b30e:	f023 0307 	bic.w	r3, r3, #7
 800b312:	3308      	adds	r3, #8
 800b314:	9303      	str	r3, [sp, #12]
 800b316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b318:	4433      	add	r3, r6
 800b31a:	9309      	str	r3, [sp, #36]	; 0x24
 800b31c:	e767      	b.n	800b1ee <_svfiprintf_r+0x4e>
 800b31e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b322:	460c      	mov	r4, r1
 800b324:	2001      	movs	r0, #1
 800b326:	e7a5      	b.n	800b274 <_svfiprintf_r+0xd4>
 800b328:	2300      	movs	r3, #0
 800b32a:	3401      	adds	r4, #1
 800b32c:	9305      	str	r3, [sp, #20]
 800b32e:	4619      	mov	r1, r3
 800b330:	f04f 0c0a 	mov.w	ip, #10
 800b334:	4620      	mov	r0, r4
 800b336:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b33a:	3a30      	subs	r2, #48	; 0x30
 800b33c:	2a09      	cmp	r2, #9
 800b33e:	d903      	bls.n	800b348 <_svfiprintf_r+0x1a8>
 800b340:	2b00      	cmp	r3, #0
 800b342:	d0c5      	beq.n	800b2d0 <_svfiprintf_r+0x130>
 800b344:	9105      	str	r1, [sp, #20]
 800b346:	e7c3      	b.n	800b2d0 <_svfiprintf_r+0x130>
 800b348:	fb0c 2101 	mla	r1, ip, r1, r2
 800b34c:	4604      	mov	r4, r0
 800b34e:	2301      	movs	r3, #1
 800b350:	e7f0      	b.n	800b334 <_svfiprintf_r+0x194>
 800b352:	ab03      	add	r3, sp, #12
 800b354:	9300      	str	r3, [sp, #0]
 800b356:	462a      	mov	r2, r5
 800b358:	4b0f      	ldr	r3, [pc, #60]	; (800b398 <_svfiprintf_r+0x1f8>)
 800b35a:	a904      	add	r1, sp, #16
 800b35c:	4638      	mov	r0, r7
 800b35e:	f7fc f96d 	bl	800763c <_printf_float>
 800b362:	1c42      	adds	r2, r0, #1
 800b364:	4606      	mov	r6, r0
 800b366:	d1d6      	bne.n	800b316 <_svfiprintf_r+0x176>
 800b368:	89ab      	ldrh	r3, [r5, #12]
 800b36a:	065b      	lsls	r3, r3, #25
 800b36c:	f53f af2c 	bmi.w	800b1c8 <_svfiprintf_r+0x28>
 800b370:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b372:	b01d      	add	sp, #116	; 0x74
 800b374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b378:	ab03      	add	r3, sp, #12
 800b37a:	9300      	str	r3, [sp, #0]
 800b37c:	462a      	mov	r2, r5
 800b37e:	4b06      	ldr	r3, [pc, #24]	; (800b398 <_svfiprintf_r+0x1f8>)
 800b380:	a904      	add	r1, sp, #16
 800b382:	4638      	mov	r0, r7
 800b384:	f7fc fbfe 	bl	8007b84 <_printf_i>
 800b388:	e7eb      	b.n	800b362 <_svfiprintf_r+0x1c2>
 800b38a:	bf00      	nop
 800b38c:	0800cb14 	.word	0x0800cb14
 800b390:	0800cb1e 	.word	0x0800cb1e
 800b394:	0800763d 	.word	0x0800763d
 800b398:	0800b0e9 	.word	0x0800b0e9
 800b39c:	0800cb1a 	.word	0x0800cb1a

0800b3a0 <_sungetc_r>:
 800b3a0:	b538      	push	{r3, r4, r5, lr}
 800b3a2:	1c4b      	adds	r3, r1, #1
 800b3a4:	4614      	mov	r4, r2
 800b3a6:	d103      	bne.n	800b3b0 <_sungetc_r+0x10>
 800b3a8:	f04f 35ff 	mov.w	r5, #4294967295
 800b3ac:	4628      	mov	r0, r5
 800b3ae:	bd38      	pop	{r3, r4, r5, pc}
 800b3b0:	8993      	ldrh	r3, [r2, #12]
 800b3b2:	f023 0320 	bic.w	r3, r3, #32
 800b3b6:	8193      	strh	r3, [r2, #12]
 800b3b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b3ba:	6852      	ldr	r2, [r2, #4]
 800b3bc:	b2cd      	uxtb	r5, r1
 800b3be:	b18b      	cbz	r3, 800b3e4 <_sungetc_r+0x44>
 800b3c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	dd08      	ble.n	800b3d8 <_sungetc_r+0x38>
 800b3c6:	6823      	ldr	r3, [r4, #0]
 800b3c8:	1e5a      	subs	r2, r3, #1
 800b3ca:	6022      	str	r2, [r4, #0]
 800b3cc:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b3d0:	6863      	ldr	r3, [r4, #4]
 800b3d2:	3301      	adds	r3, #1
 800b3d4:	6063      	str	r3, [r4, #4]
 800b3d6:	e7e9      	b.n	800b3ac <_sungetc_r+0xc>
 800b3d8:	4621      	mov	r1, r4
 800b3da:	f000 fbf1 	bl	800bbc0 <__submore>
 800b3de:	2800      	cmp	r0, #0
 800b3e0:	d0f1      	beq.n	800b3c6 <_sungetc_r+0x26>
 800b3e2:	e7e1      	b.n	800b3a8 <_sungetc_r+0x8>
 800b3e4:	6921      	ldr	r1, [r4, #16]
 800b3e6:	6823      	ldr	r3, [r4, #0]
 800b3e8:	b151      	cbz	r1, 800b400 <_sungetc_r+0x60>
 800b3ea:	4299      	cmp	r1, r3
 800b3ec:	d208      	bcs.n	800b400 <_sungetc_r+0x60>
 800b3ee:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b3f2:	42a9      	cmp	r1, r5
 800b3f4:	d104      	bne.n	800b400 <_sungetc_r+0x60>
 800b3f6:	3b01      	subs	r3, #1
 800b3f8:	3201      	adds	r2, #1
 800b3fa:	6023      	str	r3, [r4, #0]
 800b3fc:	6062      	str	r2, [r4, #4]
 800b3fe:	e7d5      	b.n	800b3ac <_sungetc_r+0xc>
 800b400:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b404:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b408:	6363      	str	r3, [r4, #52]	; 0x34
 800b40a:	2303      	movs	r3, #3
 800b40c:	63a3      	str	r3, [r4, #56]	; 0x38
 800b40e:	4623      	mov	r3, r4
 800b410:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b414:	6023      	str	r3, [r4, #0]
 800b416:	2301      	movs	r3, #1
 800b418:	e7dc      	b.n	800b3d4 <_sungetc_r+0x34>

0800b41a <__ssrefill_r>:
 800b41a:	b510      	push	{r4, lr}
 800b41c:	460c      	mov	r4, r1
 800b41e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b420:	b169      	cbz	r1, 800b43e <__ssrefill_r+0x24>
 800b422:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b426:	4299      	cmp	r1, r3
 800b428:	d001      	beq.n	800b42e <__ssrefill_r+0x14>
 800b42a:	f7ff fd7d 	bl	800af28 <_free_r>
 800b42e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b430:	6063      	str	r3, [r4, #4]
 800b432:	2000      	movs	r0, #0
 800b434:	6360      	str	r0, [r4, #52]	; 0x34
 800b436:	b113      	cbz	r3, 800b43e <__ssrefill_r+0x24>
 800b438:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b43a:	6023      	str	r3, [r4, #0]
 800b43c:	bd10      	pop	{r4, pc}
 800b43e:	6923      	ldr	r3, [r4, #16]
 800b440:	6023      	str	r3, [r4, #0]
 800b442:	2300      	movs	r3, #0
 800b444:	6063      	str	r3, [r4, #4]
 800b446:	89a3      	ldrh	r3, [r4, #12]
 800b448:	f043 0320 	orr.w	r3, r3, #32
 800b44c:	81a3      	strh	r3, [r4, #12]
 800b44e:	f04f 30ff 	mov.w	r0, #4294967295
 800b452:	e7f3      	b.n	800b43c <__ssrefill_r+0x22>

0800b454 <__ssvfiscanf_r>:
 800b454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b458:	460c      	mov	r4, r1
 800b45a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800b45e:	2100      	movs	r1, #0
 800b460:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800b464:	49a6      	ldr	r1, [pc, #664]	; (800b700 <__ssvfiscanf_r+0x2ac>)
 800b466:	91a0      	str	r1, [sp, #640]	; 0x280
 800b468:	f10d 0804 	add.w	r8, sp, #4
 800b46c:	49a5      	ldr	r1, [pc, #660]	; (800b704 <__ssvfiscanf_r+0x2b0>)
 800b46e:	4fa6      	ldr	r7, [pc, #664]	; (800b708 <__ssvfiscanf_r+0x2b4>)
 800b470:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800b70c <__ssvfiscanf_r+0x2b8>
 800b474:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b478:	4606      	mov	r6, r0
 800b47a:	91a1      	str	r1, [sp, #644]	; 0x284
 800b47c:	9300      	str	r3, [sp, #0]
 800b47e:	7813      	ldrb	r3, [r2, #0]
 800b480:	2b00      	cmp	r3, #0
 800b482:	f000 815a 	beq.w	800b73a <__ssvfiscanf_r+0x2e6>
 800b486:	5dd9      	ldrb	r1, [r3, r7]
 800b488:	f011 0108 	ands.w	r1, r1, #8
 800b48c:	f102 0501 	add.w	r5, r2, #1
 800b490:	d019      	beq.n	800b4c6 <__ssvfiscanf_r+0x72>
 800b492:	6863      	ldr	r3, [r4, #4]
 800b494:	2b00      	cmp	r3, #0
 800b496:	dd0f      	ble.n	800b4b8 <__ssvfiscanf_r+0x64>
 800b498:	6823      	ldr	r3, [r4, #0]
 800b49a:	781a      	ldrb	r2, [r3, #0]
 800b49c:	5cba      	ldrb	r2, [r7, r2]
 800b49e:	0712      	lsls	r2, r2, #28
 800b4a0:	d401      	bmi.n	800b4a6 <__ssvfiscanf_r+0x52>
 800b4a2:	462a      	mov	r2, r5
 800b4a4:	e7eb      	b.n	800b47e <__ssvfiscanf_r+0x2a>
 800b4a6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b4a8:	3201      	adds	r2, #1
 800b4aa:	9245      	str	r2, [sp, #276]	; 0x114
 800b4ac:	6862      	ldr	r2, [r4, #4]
 800b4ae:	3301      	adds	r3, #1
 800b4b0:	3a01      	subs	r2, #1
 800b4b2:	6062      	str	r2, [r4, #4]
 800b4b4:	6023      	str	r3, [r4, #0]
 800b4b6:	e7ec      	b.n	800b492 <__ssvfiscanf_r+0x3e>
 800b4b8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b4ba:	4621      	mov	r1, r4
 800b4bc:	4630      	mov	r0, r6
 800b4be:	4798      	blx	r3
 800b4c0:	2800      	cmp	r0, #0
 800b4c2:	d0e9      	beq.n	800b498 <__ssvfiscanf_r+0x44>
 800b4c4:	e7ed      	b.n	800b4a2 <__ssvfiscanf_r+0x4e>
 800b4c6:	2b25      	cmp	r3, #37	; 0x25
 800b4c8:	d012      	beq.n	800b4f0 <__ssvfiscanf_r+0x9c>
 800b4ca:	469a      	mov	sl, r3
 800b4cc:	6863      	ldr	r3, [r4, #4]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	f340 8091 	ble.w	800b5f6 <__ssvfiscanf_r+0x1a2>
 800b4d4:	6822      	ldr	r2, [r4, #0]
 800b4d6:	7813      	ldrb	r3, [r2, #0]
 800b4d8:	4553      	cmp	r3, sl
 800b4da:	f040 812e 	bne.w	800b73a <__ssvfiscanf_r+0x2e6>
 800b4de:	6863      	ldr	r3, [r4, #4]
 800b4e0:	3b01      	subs	r3, #1
 800b4e2:	6063      	str	r3, [r4, #4]
 800b4e4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b4e6:	3201      	adds	r2, #1
 800b4e8:	3301      	adds	r3, #1
 800b4ea:	6022      	str	r2, [r4, #0]
 800b4ec:	9345      	str	r3, [sp, #276]	; 0x114
 800b4ee:	e7d8      	b.n	800b4a2 <__ssvfiscanf_r+0x4e>
 800b4f0:	9141      	str	r1, [sp, #260]	; 0x104
 800b4f2:	9143      	str	r1, [sp, #268]	; 0x10c
 800b4f4:	7853      	ldrb	r3, [r2, #1]
 800b4f6:	2b2a      	cmp	r3, #42	; 0x2a
 800b4f8:	bf02      	ittt	eq
 800b4fa:	2310      	moveq	r3, #16
 800b4fc:	1c95      	addeq	r5, r2, #2
 800b4fe:	9341      	streq	r3, [sp, #260]	; 0x104
 800b500:	220a      	movs	r2, #10
 800b502:	46aa      	mov	sl, r5
 800b504:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800b508:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800b50c:	2b09      	cmp	r3, #9
 800b50e:	d91d      	bls.n	800b54c <__ssvfiscanf_r+0xf8>
 800b510:	487e      	ldr	r0, [pc, #504]	; (800b70c <__ssvfiscanf_r+0x2b8>)
 800b512:	2203      	movs	r2, #3
 800b514:	f7f4 fe84 	bl	8000220 <memchr>
 800b518:	b140      	cbz	r0, 800b52c <__ssvfiscanf_r+0xd8>
 800b51a:	2301      	movs	r3, #1
 800b51c:	eba0 0009 	sub.w	r0, r0, r9
 800b520:	fa03 f000 	lsl.w	r0, r3, r0
 800b524:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b526:	4318      	orrs	r0, r3
 800b528:	9041      	str	r0, [sp, #260]	; 0x104
 800b52a:	4655      	mov	r5, sl
 800b52c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b530:	2b78      	cmp	r3, #120	; 0x78
 800b532:	d806      	bhi.n	800b542 <__ssvfiscanf_r+0xee>
 800b534:	2b57      	cmp	r3, #87	; 0x57
 800b536:	d810      	bhi.n	800b55a <__ssvfiscanf_r+0x106>
 800b538:	2b25      	cmp	r3, #37	; 0x25
 800b53a:	d0c6      	beq.n	800b4ca <__ssvfiscanf_r+0x76>
 800b53c:	d856      	bhi.n	800b5ec <__ssvfiscanf_r+0x198>
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d064      	beq.n	800b60c <__ssvfiscanf_r+0x1b8>
 800b542:	2303      	movs	r3, #3
 800b544:	9347      	str	r3, [sp, #284]	; 0x11c
 800b546:	230a      	movs	r3, #10
 800b548:	9342      	str	r3, [sp, #264]	; 0x108
 800b54a:	e071      	b.n	800b630 <__ssvfiscanf_r+0x1dc>
 800b54c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b54e:	fb02 1103 	mla	r1, r2, r3, r1
 800b552:	3930      	subs	r1, #48	; 0x30
 800b554:	9143      	str	r1, [sp, #268]	; 0x10c
 800b556:	4655      	mov	r5, sl
 800b558:	e7d3      	b.n	800b502 <__ssvfiscanf_r+0xae>
 800b55a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800b55e:	2a20      	cmp	r2, #32
 800b560:	d8ef      	bhi.n	800b542 <__ssvfiscanf_r+0xee>
 800b562:	a101      	add	r1, pc, #4	; (adr r1, 800b568 <__ssvfiscanf_r+0x114>)
 800b564:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b568:	0800b61b 	.word	0x0800b61b
 800b56c:	0800b543 	.word	0x0800b543
 800b570:	0800b543 	.word	0x0800b543
 800b574:	0800b679 	.word	0x0800b679
 800b578:	0800b543 	.word	0x0800b543
 800b57c:	0800b543 	.word	0x0800b543
 800b580:	0800b543 	.word	0x0800b543
 800b584:	0800b543 	.word	0x0800b543
 800b588:	0800b543 	.word	0x0800b543
 800b58c:	0800b543 	.word	0x0800b543
 800b590:	0800b543 	.word	0x0800b543
 800b594:	0800b68f 	.word	0x0800b68f
 800b598:	0800b665 	.word	0x0800b665
 800b59c:	0800b5f3 	.word	0x0800b5f3
 800b5a0:	0800b5f3 	.word	0x0800b5f3
 800b5a4:	0800b5f3 	.word	0x0800b5f3
 800b5a8:	0800b543 	.word	0x0800b543
 800b5ac:	0800b669 	.word	0x0800b669
 800b5b0:	0800b543 	.word	0x0800b543
 800b5b4:	0800b543 	.word	0x0800b543
 800b5b8:	0800b543 	.word	0x0800b543
 800b5bc:	0800b543 	.word	0x0800b543
 800b5c0:	0800b69f 	.word	0x0800b69f
 800b5c4:	0800b671 	.word	0x0800b671
 800b5c8:	0800b613 	.word	0x0800b613
 800b5cc:	0800b543 	.word	0x0800b543
 800b5d0:	0800b543 	.word	0x0800b543
 800b5d4:	0800b69b 	.word	0x0800b69b
 800b5d8:	0800b543 	.word	0x0800b543
 800b5dc:	0800b665 	.word	0x0800b665
 800b5e0:	0800b543 	.word	0x0800b543
 800b5e4:	0800b543 	.word	0x0800b543
 800b5e8:	0800b61b 	.word	0x0800b61b
 800b5ec:	3b45      	subs	r3, #69	; 0x45
 800b5ee:	2b02      	cmp	r3, #2
 800b5f0:	d8a7      	bhi.n	800b542 <__ssvfiscanf_r+0xee>
 800b5f2:	2305      	movs	r3, #5
 800b5f4:	e01b      	b.n	800b62e <__ssvfiscanf_r+0x1da>
 800b5f6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b5f8:	4621      	mov	r1, r4
 800b5fa:	4630      	mov	r0, r6
 800b5fc:	4798      	blx	r3
 800b5fe:	2800      	cmp	r0, #0
 800b600:	f43f af68 	beq.w	800b4d4 <__ssvfiscanf_r+0x80>
 800b604:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b606:	2800      	cmp	r0, #0
 800b608:	f040 808d 	bne.w	800b726 <__ssvfiscanf_r+0x2d2>
 800b60c:	f04f 30ff 	mov.w	r0, #4294967295
 800b610:	e08f      	b.n	800b732 <__ssvfiscanf_r+0x2de>
 800b612:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b614:	f042 0220 	orr.w	r2, r2, #32
 800b618:	9241      	str	r2, [sp, #260]	; 0x104
 800b61a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b61c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b620:	9241      	str	r2, [sp, #260]	; 0x104
 800b622:	2210      	movs	r2, #16
 800b624:	2b6f      	cmp	r3, #111	; 0x6f
 800b626:	9242      	str	r2, [sp, #264]	; 0x108
 800b628:	bf34      	ite	cc
 800b62a:	2303      	movcc	r3, #3
 800b62c:	2304      	movcs	r3, #4
 800b62e:	9347      	str	r3, [sp, #284]	; 0x11c
 800b630:	6863      	ldr	r3, [r4, #4]
 800b632:	2b00      	cmp	r3, #0
 800b634:	dd42      	ble.n	800b6bc <__ssvfiscanf_r+0x268>
 800b636:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b638:	0659      	lsls	r1, r3, #25
 800b63a:	d404      	bmi.n	800b646 <__ssvfiscanf_r+0x1f2>
 800b63c:	6823      	ldr	r3, [r4, #0]
 800b63e:	781a      	ldrb	r2, [r3, #0]
 800b640:	5cba      	ldrb	r2, [r7, r2]
 800b642:	0712      	lsls	r2, r2, #28
 800b644:	d441      	bmi.n	800b6ca <__ssvfiscanf_r+0x276>
 800b646:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b648:	2b02      	cmp	r3, #2
 800b64a:	dc50      	bgt.n	800b6ee <__ssvfiscanf_r+0x29a>
 800b64c:	466b      	mov	r3, sp
 800b64e:	4622      	mov	r2, r4
 800b650:	a941      	add	r1, sp, #260	; 0x104
 800b652:	4630      	mov	r0, r6
 800b654:	f000 f876 	bl	800b744 <_scanf_chars>
 800b658:	2801      	cmp	r0, #1
 800b65a:	d06e      	beq.n	800b73a <__ssvfiscanf_r+0x2e6>
 800b65c:	2802      	cmp	r0, #2
 800b65e:	f47f af20 	bne.w	800b4a2 <__ssvfiscanf_r+0x4e>
 800b662:	e7cf      	b.n	800b604 <__ssvfiscanf_r+0x1b0>
 800b664:	220a      	movs	r2, #10
 800b666:	e7dd      	b.n	800b624 <__ssvfiscanf_r+0x1d0>
 800b668:	2300      	movs	r3, #0
 800b66a:	9342      	str	r3, [sp, #264]	; 0x108
 800b66c:	2303      	movs	r3, #3
 800b66e:	e7de      	b.n	800b62e <__ssvfiscanf_r+0x1da>
 800b670:	2308      	movs	r3, #8
 800b672:	9342      	str	r3, [sp, #264]	; 0x108
 800b674:	2304      	movs	r3, #4
 800b676:	e7da      	b.n	800b62e <__ssvfiscanf_r+0x1da>
 800b678:	4629      	mov	r1, r5
 800b67a:	4640      	mov	r0, r8
 800b67c:	f000 f9e0 	bl	800ba40 <__sccl>
 800b680:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b686:	9341      	str	r3, [sp, #260]	; 0x104
 800b688:	4605      	mov	r5, r0
 800b68a:	2301      	movs	r3, #1
 800b68c:	e7cf      	b.n	800b62e <__ssvfiscanf_r+0x1da>
 800b68e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b690:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b694:	9341      	str	r3, [sp, #260]	; 0x104
 800b696:	2300      	movs	r3, #0
 800b698:	e7c9      	b.n	800b62e <__ssvfiscanf_r+0x1da>
 800b69a:	2302      	movs	r3, #2
 800b69c:	e7c7      	b.n	800b62e <__ssvfiscanf_r+0x1da>
 800b69e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b6a0:	06c3      	lsls	r3, r0, #27
 800b6a2:	f53f aefe 	bmi.w	800b4a2 <__ssvfiscanf_r+0x4e>
 800b6a6:	9b00      	ldr	r3, [sp, #0]
 800b6a8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b6aa:	1d19      	adds	r1, r3, #4
 800b6ac:	9100      	str	r1, [sp, #0]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f010 0f01 	tst.w	r0, #1
 800b6b4:	bf14      	ite	ne
 800b6b6:	801a      	strhne	r2, [r3, #0]
 800b6b8:	601a      	streq	r2, [r3, #0]
 800b6ba:	e6f2      	b.n	800b4a2 <__ssvfiscanf_r+0x4e>
 800b6bc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b6be:	4621      	mov	r1, r4
 800b6c0:	4630      	mov	r0, r6
 800b6c2:	4798      	blx	r3
 800b6c4:	2800      	cmp	r0, #0
 800b6c6:	d0b6      	beq.n	800b636 <__ssvfiscanf_r+0x1e2>
 800b6c8:	e79c      	b.n	800b604 <__ssvfiscanf_r+0x1b0>
 800b6ca:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b6cc:	3201      	adds	r2, #1
 800b6ce:	9245      	str	r2, [sp, #276]	; 0x114
 800b6d0:	6862      	ldr	r2, [r4, #4]
 800b6d2:	3a01      	subs	r2, #1
 800b6d4:	2a00      	cmp	r2, #0
 800b6d6:	6062      	str	r2, [r4, #4]
 800b6d8:	dd02      	ble.n	800b6e0 <__ssvfiscanf_r+0x28c>
 800b6da:	3301      	adds	r3, #1
 800b6dc:	6023      	str	r3, [r4, #0]
 800b6de:	e7ad      	b.n	800b63c <__ssvfiscanf_r+0x1e8>
 800b6e0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b6e2:	4621      	mov	r1, r4
 800b6e4:	4630      	mov	r0, r6
 800b6e6:	4798      	blx	r3
 800b6e8:	2800      	cmp	r0, #0
 800b6ea:	d0a7      	beq.n	800b63c <__ssvfiscanf_r+0x1e8>
 800b6ec:	e78a      	b.n	800b604 <__ssvfiscanf_r+0x1b0>
 800b6ee:	2b04      	cmp	r3, #4
 800b6f0:	dc0e      	bgt.n	800b710 <__ssvfiscanf_r+0x2bc>
 800b6f2:	466b      	mov	r3, sp
 800b6f4:	4622      	mov	r2, r4
 800b6f6:	a941      	add	r1, sp, #260	; 0x104
 800b6f8:	4630      	mov	r0, r6
 800b6fa:	f000 f87d 	bl	800b7f8 <_scanf_i>
 800b6fe:	e7ab      	b.n	800b658 <__ssvfiscanf_r+0x204>
 800b700:	0800b3a1 	.word	0x0800b3a1
 800b704:	0800b41b 	.word	0x0800b41b
 800b708:	0800c7b1 	.word	0x0800c7b1
 800b70c:	0800cb1a 	.word	0x0800cb1a
 800b710:	4b0b      	ldr	r3, [pc, #44]	; (800b740 <__ssvfiscanf_r+0x2ec>)
 800b712:	2b00      	cmp	r3, #0
 800b714:	f43f aec5 	beq.w	800b4a2 <__ssvfiscanf_r+0x4e>
 800b718:	466b      	mov	r3, sp
 800b71a:	4622      	mov	r2, r4
 800b71c:	a941      	add	r1, sp, #260	; 0x104
 800b71e:	4630      	mov	r0, r6
 800b720:	f7fc fb56 	bl	8007dd0 <_scanf_float>
 800b724:	e798      	b.n	800b658 <__ssvfiscanf_r+0x204>
 800b726:	89a3      	ldrh	r3, [r4, #12]
 800b728:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b72c:	bf18      	it	ne
 800b72e:	f04f 30ff 	movne.w	r0, #4294967295
 800b732:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800b736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b73a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b73c:	e7f9      	b.n	800b732 <__ssvfiscanf_r+0x2de>
 800b73e:	bf00      	nop
 800b740:	08007dd1 	.word	0x08007dd1

0800b744 <_scanf_chars>:
 800b744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b748:	4615      	mov	r5, r2
 800b74a:	688a      	ldr	r2, [r1, #8]
 800b74c:	4680      	mov	r8, r0
 800b74e:	460c      	mov	r4, r1
 800b750:	b932      	cbnz	r2, 800b760 <_scanf_chars+0x1c>
 800b752:	698a      	ldr	r2, [r1, #24]
 800b754:	2a00      	cmp	r2, #0
 800b756:	bf0c      	ite	eq
 800b758:	2201      	moveq	r2, #1
 800b75a:	f04f 32ff 	movne.w	r2, #4294967295
 800b75e:	608a      	str	r2, [r1, #8]
 800b760:	6822      	ldr	r2, [r4, #0]
 800b762:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800b7f4 <_scanf_chars+0xb0>
 800b766:	06d1      	lsls	r1, r2, #27
 800b768:	bf5f      	itttt	pl
 800b76a:	681a      	ldrpl	r2, [r3, #0]
 800b76c:	1d11      	addpl	r1, r2, #4
 800b76e:	6019      	strpl	r1, [r3, #0]
 800b770:	6816      	ldrpl	r6, [r2, #0]
 800b772:	2700      	movs	r7, #0
 800b774:	69a0      	ldr	r0, [r4, #24]
 800b776:	b188      	cbz	r0, 800b79c <_scanf_chars+0x58>
 800b778:	2801      	cmp	r0, #1
 800b77a:	d107      	bne.n	800b78c <_scanf_chars+0x48>
 800b77c:	682a      	ldr	r2, [r5, #0]
 800b77e:	7811      	ldrb	r1, [r2, #0]
 800b780:	6962      	ldr	r2, [r4, #20]
 800b782:	5c52      	ldrb	r2, [r2, r1]
 800b784:	b952      	cbnz	r2, 800b79c <_scanf_chars+0x58>
 800b786:	2f00      	cmp	r7, #0
 800b788:	d031      	beq.n	800b7ee <_scanf_chars+0xaa>
 800b78a:	e022      	b.n	800b7d2 <_scanf_chars+0x8e>
 800b78c:	2802      	cmp	r0, #2
 800b78e:	d120      	bne.n	800b7d2 <_scanf_chars+0x8e>
 800b790:	682b      	ldr	r3, [r5, #0]
 800b792:	781b      	ldrb	r3, [r3, #0]
 800b794:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b798:	071b      	lsls	r3, r3, #28
 800b79a:	d41a      	bmi.n	800b7d2 <_scanf_chars+0x8e>
 800b79c:	6823      	ldr	r3, [r4, #0]
 800b79e:	06da      	lsls	r2, r3, #27
 800b7a0:	bf5e      	ittt	pl
 800b7a2:	682b      	ldrpl	r3, [r5, #0]
 800b7a4:	781b      	ldrbpl	r3, [r3, #0]
 800b7a6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b7aa:	682a      	ldr	r2, [r5, #0]
 800b7ac:	686b      	ldr	r3, [r5, #4]
 800b7ae:	3201      	adds	r2, #1
 800b7b0:	602a      	str	r2, [r5, #0]
 800b7b2:	68a2      	ldr	r2, [r4, #8]
 800b7b4:	3b01      	subs	r3, #1
 800b7b6:	3a01      	subs	r2, #1
 800b7b8:	606b      	str	r3, [r5, #4]
 800b7ba:	3701      	adds	r7, #1
 800b7bc:	60a2      	str	r2, [r4, #8]
 800b7be:	b142      	cbz	r2, 800b7d2 <_scanf_chars+0x8e>
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	dcd7      	bgt.n	800b774 <_scanf_chars+0x30>
 800b7c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b7c8:	4629      	mov	r1, r5
 800b7ca:	4640      	mov	r0, r8
 800b7cc:	4798      	blx	r3
 800b7ce:	2800      	cmp	r0, #0
 800b7d0:	d0d0      	beq.n	800b774 <_scanf_chars+0x30>
 800b7d2:	6823      	ldr	r3, [r4, #0]
 800b7d4:	f013 0310 	ands.w	r3, r3, #16
 800b7d8:	d105      	bne.n	800b7e6 <_scanf_chars+0xa2>
 800b7da:	68e2      	ldr	r2, [r4, #12]
 800b7dc:	3201      	adds	r2, #1
 800b7de:	60e2      	str	r2, [r4, #12]
 800b7e0:	69a2      	ldr	r2, [r4, #24]
 800b7e2:	b102      	cbz	r2, 800b7e6 <_scanf_chars+0xa2>
 800b7e4:	7033      	strb	r3, [r6, #0]
 800b7e6:	6923      	ldr	r3, [r4, #16]
 800b7e8:	443b      	add	r3, r7
 800b7ea:	6123      	str	r3, [r4, #16]
 800b7ec:	2000      	movs	r0, #0
 800b7ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7f2:	bf00      	nop
 800b7f4:	0800c7b1 	.word	0x0800c7b1

0800b7f8 <_scanf_i>:
 800b7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7fc:	4698      	mov	r8, r3
 800b7fe:	4b76      	ldr	r3, [pc, #472]	; (800b9d8 <_scanf_i+0x1e0>)
 800b800:	460c      	mov	r4, r1
 800b802:	4682      	mov	sl, r0
 800b804:	4616      	mov	r6, r2
 800b806:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b80a:	b087      	sub	sp, #28
 800b80c:	ab03      	add	r3, sp, #12
 800b80e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b812:	4b72      	ldr	r3, [pc, #456]	; (800b9dc <_scanf_i+0x1e4>)
 800b814:	69a1      	ldr	r1, [r4, #24]
 800b816:	4a72      	ldr	r2, [pc, #456]	; (800b9e0 <_scanf_i+0x1e8>)
 800b818:	2903      	cmp	r1, #3
 800b81a:	bf18      	it	ne
 800b81c:	461a      	movne	r2, r3
 800b81e:	68a3      	ldr	r3, [r4, #8]
 800b820:	9201      	str	r2, [sp, #4]
 800b822:	1e5a      	subs	r2, r3, #1
 800b824:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b828:	bf88      	it	hi
 800b82a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b82e:	4627      	mov	r7, r4
 800b830:	bf82      	ittt	hi
 800b832:	eb03 0905 	addhi.w	r9, r3, r5
 800b836:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b83a:	60a3      	strhi	r3, [r4, #8]
 800b83c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b840:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b844:	bf98      	it	ls
 800b846:	f04f 0900 	movls.w	r9, #0
 800b84a:	6023      	str	r3, [r4, #0]
 800b84c:	463d      	mov	r5, r7
 800b84e:	f04f 0b00 	mov.w	fp, #0
 800b852:	6831      	ldr	r1, [r6, #0]
 800b854:	ab03      	add	r3, sp, #12
 800b856:	7809      	ldrb	r1, [r1, #0]
 800b858:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b85c:	2202      	movs	r2, #2
 800b85e:	f7f4 fcdf 	bl	8000220 <memchr>
 800b862:	b328      	cbz	r0, 800b8b0 <_scanf_i+0xb8>
 800b864:	f1bb 0f01 	cmp.w	fp, #1
 800b868:	d159      	bne.n	800b91e <_scanf_i+0x126>
 800b86a:	6862      	ldr	r2, [r4, #4]
 800b86c:	b92a      	cbnz	r2, 800b87a <_scanf_i+0x82>
 800b86e:	6822      	ldr	r2, [r4, #0]
 800b870:	2308      	movs	r3, #8
 800b872:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b876:	6063      	str	r3, [r4, #4]
 800b878:	6022      	str	r2, [r4, #0]
 800b87a:	6822      	ldr	r2, [r4, #0]
 800b87c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b880:	6022      	str	r2, [r4, #0]
 800b882:	68a2      	ldr	r2, [r4, #8]
 800b884:	1e51      	subs	r1, r2, #1
 800b886:	60a1      	str	r1, [r4, #8]
 800b888:	b192      	cbz	r2, 800b8b0 <_scanf_i+0xb8>
 800b88a:	6832      	ldr	r2, [r6, #0]
 800b88c:	1c51      	adds	r1, r2, #1
 800b88e:	6031      	str	r1, [r6, #0]
 800b890:	7812      	ldrb	r2, [r2, #0]
 800b892:	f805 2b01 	strb.w	r2, [r5], #1
 800b896:	6872      	ldr	r2, [r6, #4]
 800b898:	3a01      	subs	r2, #1
 800b89a:	2a00      	cmp	r2, #0
 800b89c:	6072      	str	r2, [r6, #4]
 800b89e:	dc07      	bgt.n	800b8b0 <_scanf_i+0xb8>
 800b8a0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b8a4:	4631      	mov	r1, r6
 800b8a6:	4650      	mov	r0, sl
 800b8a8:	4790      	blx	r2
 800b8aa:	2800      	cmp	r0, #0
 800b8ac:	f040 8085 	bne.w	800b9ba <_scanf_i+0x1c2>
 800b8b0:	f10b 0b01 	add.w	fp, fp, #1
 800b8b4:	f1bb 0f03 	cmp.w	fp, #3
 800b8b8:	d1cb      	bne.n	800b852 <_scanf_i+0x5a>
 800b8ba:	6863      	ldr	r3, [r4, #4]
 800b8bc:	b90b      	cbnz	r3, 800b8c2 <_scanf_i+0xca>
 800b8be:	230a      	movs	r3, #10
 800b8c0:	6063      	str	r3, [r4, #4]
 800b8c2:	6863      	ldr	r3, [r4, #4]
 800b8c4:	4947      	ldr	r1, [pc, #284]	; (800b9e4 <_scanf_i+0x1ec>)
 800b8c6:	6960      	ldr	r0, [r4, #20]
 800b8c8:	1ac9      	subs	r1, r1, r3
 800b8ca:	f000 f8b9 	bl	800ba40 <__sccl>
 800b8ce:	f04f 0b00 	mov.w	fp, #0
 800b8d2:	68a3      	ldr	r3, [r4, #8]
 800b8d4:	6822      	ldr	r2, [r4, #0]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d03d      	beq.n	800b956 <_scanf_i+0x15e>
 800b8da:	6831      	ldr	r1, [r6, #0]
 800b8dc:	6960      	ldr	r0, [r4, #20]
 800b8de:	f891 c000 	ldrb.w	ip, [r1]
 800b8e2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b8e6:	2800      	cmp	r0, #0
 800b8e8:	d035      	beq.n	800b956 <_scanf_i+0x15e>
 800b8ea:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b8ee:	d124      	bne.n	800b93a <_scanf_i+0x142>
 800b8f0:	0510      	lsls	r0, r2, #20
 800b8f2:	d522      	bpl.n	800b93a <_scanf_i+0x142>
 800b8f4:	f10b 0b01 	add.w	fp, fp, #1
 800b8f8:	f1b9 0f00 	cmp.w	r9, #0
 800b8fc:	d003      	beq.n	800b906 <_scanf_i+0x10e>
 800b8fe:	3301      	adds	r3, #1
 800b900:	f109 39ff 	add.w	r9, r9, #4294967295
 800b904:	60a3      	str	r3, [r4, #8]
 800b906:	6873      	ldr	r3, [r6, #4]
 800b908:	3b01      	subs	r3, #1
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	6073      	str	r3, [r6, #4]
 800b90e:	dd1b      	ble.n	800b948 <_scanf_i+0x150>
 800b910:	6833      	ldr	r3, [r6, #0]
 800b912:	3301      	adds	r3, #1
 800b914:	6033      	str	r3, [r6, #0]
 800b916:	68a3      	ldr	r3, [r4, #8]
 800b918:	3b01      	subs	r3, #1
 800b91a:	60a3      	str	r3, [r4, #8]
 800b91c:	e7d9      	b.n	800b8d2 <_scanf_i+0xda>
 800b91e:	f1bb 0f02 	cmp.w	fp, #2
 800b922:	d1ae      	bne.n	800b882 <_scanf_i+0x8a>
 800b924:	6822      	ldr	r2, [r4, #0]
 800b926:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b92a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b92e:	d1bf      	bne.n	800b8b0 <_scanf_i+0xb8>
 800b930:	2310      	movs	r3, #16
 800b932:	6063      	str	r3, [r4, #4]
 800b934:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b938:	e7a2      	b.n	800b880 <_scanf_i+0x88>
 800b93a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b93e:	6022      	str	r2, [r4, #0]
 800b940:	780b      	ldrb	r3, [r1, #0]
 800b942:	f805 3b01 	strb.w	r3, [r5], #1
 800b946:	e7de      	b.n	800b906 <_scanf_i+0x10e>
 800b948:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b94c:	4631      	mov	r1, r6
 800b94e:	4650      	mov	r0, sl
 800b950:	4798      	blx	r3
 800b952:	2800      	cmp	r0, #0
 800b954:	d0df      	beq.n	800b916 <_scanf_i+0x11e>
 800b956:	6823      	ldr	r3, [r4, #0]
 800b958:	05db      	lsls	r3, r3, #23
 800b95a:	d50d      	bpl.n	800b978 <_scanf_i+0x180>
 800b95c:	42bd      	cmp	r5, r7
 800b95e:	d909      	bls.n	800b974 <_scanf_i+0x17c>
 800b960:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b964:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b968:	4632      	mov	r2, r6
 800b96a:	4650      	mov	r0, sl
 800b96c:	4798      	blx	r3
 800b96e:	f105 39ff 	add.w	r9, r5, #4294967295
 800b972:	464d      	mov	r5, r9
 800b974:	42bd      	cmp	r5, r7
 800b976:	d02d      	beq.n	800b9d4 <_scanf_i+0x1dc>
 800b978:	6822      	ldr	r2, [r4, #0]
 800b97a:	f012 0210 	ands.w	r2, r2, #16
 800b97e:	d113      	bne.n	800b9a8 <_scanf_i+0x1b0>
 800b980:	702a      	strb	r2, [r5, #0]
 800b982:	6863      	ldr	r3, [r4, #4]
 800b984:	9e01      	ldr	r6, [sp, #4]
 800b986:	4639      	mov	r1, r7
 800b988:	4650      	mov	r0, sl
 800b98a:	47b0      	blx	r6
 800b98c:	6821      	ldr	r1, [r4, #0]
 800b98e:	f8d8 3000 	ldr.w	r3, [r8]
 800b992:	f011 0f20 	tst.w	r1, #32
 800b996:	d013      	beq.n	800b9c0 <_scanf_i+0x1c8>
 800b998:	1d1a      	adds	r2, r3, #4
 800b99a:	f8c8 2000 	str.w	r2, [r8]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	6018      	str	r0, [r3, #0]
 800b9a2:	68e3      	ldr	r3, [r4, #12]
 800b9a4:	3301      	adds	r3, #1
 800b9a6:	60e3      	str	r3, [r4, #12]
 800b9a8:	1bed      	subs	r5, r5, r7
 800b9aa:	44ab      	add	fp, r5
 800b9ac:	6925      	ldr	r5, [r4, #16]
 800b9ae:	445d      	add	r5, fp
 800b9b0:	6125      	str	r5, [r4, #16]
 800b9b2:	2000      	movs	r0, #0
 800b9b4:	b007      	add	sp, #28
 800b9b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9ba:	f04f 0b00 	mov.w	fp, #0
 800b9be:	e7ca      	b.n	800b956 <_scanf_i+0x15e>
 800b9c0:	1d1a      	adds	r2, r3, #4
 800b9c2:	f8c8 2000 	str.w	r2, [r8]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f011 0f01 	tst.w	r1, #1
 800b9cc:	bf14      	ite	ne
 800b9ce:	8018      	strhne	r0, [r3, #0]
 800b9d0:	6018      	streq	r0, [r3, #0]
 800b9d2:	e7e6      	b.n	800b9a2 <_scanf_i+0x1aa>
 800b9d4:	2001      	movs	r0, #1
 800b9d6:	e7ed      	b.n	800b9b4 <_scanf_i+0x1bc>
 800b9d8:	0800c6fc 	.word	0x0800c6fc
 800b9dc:	0800bbbd 	.word	0x0800bbbd
 800b9e0:	080090dd 	.word	0x080090dd
 800b9e4:	0800cb3e 	.word	0x0800cb3e

0800b9e8 <_read_r>:
 800b9e8:	b538      	push	{r3, r4, r5, lr}
 800b9ea:	4d07      	ldr	r5, [pc, #28]	; (800ba08 <_read_r+0x20>)
 800b9ec:	4604      	mov	r4, r0
 800b9ee:	4608      	mov	r0, r1
 800b9f0:	4611      	mov	r1, r2
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	602a      	str	r2, [r5, #0]
 800b9f6:	461a      	mov	r2, r3
 800b9f8:	f7f6 fe5e 	bl	80026b8 <_read>
 800b9fc:	1c43      	adds	r3, r0, #1
 800b9fe:	d102      	bne.n	800ba06 <_read_r+0x1e>
 800ba00:	682b      	ldr	r3, [r5, #0]
 800ba02:	b103      	cbz	r3, 800ba06 <_read_r+0x1e>
 800ba04:	6023      	str	r3, [r4, #0]
 800ba06:	bd38      	pop	{r3, r4, r5, pc}
 800ba08:	2000045c 	.word	0x2000045c
 800ba0c:	00000000 	.word	0x00000000

0800ba10 <nan>:
 800ba10:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ba18 <nan+0x8>
 800ba14:	4770      	bx	lr
 800ba16:	bf00      	nop
 800ba18:	00000000 	.word	0x00000000
 800ba1c:	7ff80000 	.word	0x7ff80000

0800ba20 <_sbrk_r>:
 800ba20:	b538      	push	{r3, r4, r5, lr}
 800ba22:	4d06      	ldr	r5, [pc, #24]	; (800ba3c <_sbrk_r+0x1c>)
 800ba24:	2300      	movs	r3, #0
 800ba26:	4604      	mov	r4, r0
 800ba28:	4608      	mov	r0, r1
 800ba2a:	602b      	str	r3, [r5, #0]
 800ba2c:	f7f6 feb2 	bl	8002794 <_sbrk>
 800ba30:	1c43      	adds	r3, r0, #1
 800ba32:	d102      	bne.n	800ba3a <_sbrk_r+0x1a>
 800ba34:	682b      	ldr	r3, [r5, #0]
 800ba36:	b103      	cbz	r3, 800ba3a <_sbrk_r+0x1a>
 800ba38:	6023      	str	r3, [r4, #0]
 800ba3a:	bd38      	pop	{r3, r4, r5, pc}
 800ba3c:	2000045c 	.word	0x2000045c

0800ba40 <__sccl>:
 800ba40:	b570      	push	{r4, r5, r6, lr}
 800ba42:	780b      	ldrb	r3, [r1, #0]
 800ba44:	4604      	mov	r4, r0
 800ba46:	2b5e      	cmp	r3, #94	; 0x5e
 800ba48:	bf0b      	itete	eq
 800ba4a:	784b      	ldrbeq	r3, [r1, #1]
 800ba4c:	1c48      	addne	r0, r1, #1
 800ba4e:	1c88      	addeq	r0, r1, #2
 800ba50:	2200      	movne	r2, #0
 800ba52:	bf08      	it	eq
 800ba54:	2201      	moveq	r2, #1
 800ba56:	1e61      	subs	r1, r4, #1
 800ba58:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800ba5c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800ba60:	42a9      	cmp	r1, r5
 800ba62:	d1fb      	bne.n	800ba5c <__sccl+0x1c>
 800ba64:	b90b      	cbnz	r3, 800ba6a <__sccl+0x2a>
 800ba66:	3801      	subs	r0, #1
 800ba68:	bd70      	pop	{r4, r5, r6, pc}
 800ba6a:	f082 0201 	eor.w	r2, r2, #1
 800ba6e:	54e2      	strb	r2, [r4, r3]
 800ba70:	4605      	mov	r5, r0
 800ba72:	4628      	mov	r0, r5
 800ba74:	f810 1b01 	ldrb.w	r1, [r0], #1
 800ba78:	292d      	cmp	r1, #45	; 0x2d
 800ba7a:	d006      	beq.n	800ba8a <__sccl+0x4a>
 800ba7c:	295d      	cmp	r1, #93	; 0x5d
 800ba7e:	d0f3      	beq.n	800ba68 <__sccl+0x28>
 800ba80:	b909      	cbnz	r1, 800ba86 <__sccl+0x46>
 800ba82:	4628      	mov	r0, r5
 800ba84:	e7f0      	b.n	800ba68 <__sccl+0x28>
 800ba86:	460b      	mov	r3, r1
 800ba88:	e7f1      	b.n	800ba6e <__sccl+0x2e>
 800ba8a:	786e      	ldrb	r6, [r5, #1]
 800ba8c:	2e5d      	cmp	r6, #93	; 0x5d
 800ba8e:	d0fa      	beq.n	800ba86 <__sccl+0x46>
 800ba90:	42b3      	cmp	r3, r6
 800ba92:	dcf8      	bgt.n	800ba86 <__sccl+0x46>
 800ba94:	3502      	adds	r5, #2
 800ba96:	4619      	mov	r1, r3
 800ba98:	3101      	adds	r1, #1
 800ba9a:	428e      	cmp	r6, r1
 800ba9c:	5462      	strb	r2, [r4, r1]
 800ba9e:	dcfb      	bgt.n	800ba98 <__sccl+0x58>
 800baa0:	1af1      	subs	r1, r6, r3
 800baa2:	3901      	subs	r1, #1
 800baa4:	1c58      	adds	r0, r3, #1
 800baa6:	42b3      	cmp	r3, r6
 800baa8:	bfa8      	it	ge
 800baaa:	2100      	movge	r1, #0
 800baac:	1843      	adds	r3, r0, r1
 800baae:	e7e0      	b.n	800ba72 <__sccl+0x32>

0800bab0 <strncmp>:
 800bab0:	b510      	push	{r4, lr}
 800bab2:	b17a      	cbz	r2, 800bad4 <strncmp+0x24>
 800bab4:	4603      	mov	r3, r0
 800bab6:	3901      	subs	r1, #1
 800bab8:	1884      	adds	r4, r0, r2
 800baba:	f813 0b01 	ldrb.w	r0, [r3], #1
 800babe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bac2:	4290      	cmp	r0, r2
 800bac4:	d101      	bne.n	800baca <strncmp+0x1a>
 800bac6:	42a3      	cmp	r3, r4
 800bac8:	d101      	bne.n	800bace <strncmp+0x1e>
 800baca:	1a80      	subs	r0, r0, r2
 800bacc:	bd10      	pop	{r4, pc}
 800bace:	2800      	cmp	r0, #0
 800bad0:	d1f3      	bne.n	800baba <strncmp+0xa>
 800bad2:	e7fa      	b.n	800baca <strncmp+0x1a>
 800bad4:	4610      	mov	r0, r2
 800bad6:	e7f9      	b.n	800bacc <strncmp+0x1c>

0800bad8 <_strtoul_l.constprop.0>:
 800bad8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800badc:	4f36      	ldr	r7, [pc, #216]	; (800bbb8 <_strtoul_l.constprop.0+0xe0>)
 800bade:	4686      	mov	lr, r0
 800bae0:	460d      	mov	r5, r1
 800bae2:	4628      	mov	r0, r5
 800bae4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bae8:	5de6      	ldrb	r6, [r4, r7]
 800baea:	f016 0608 	ands.w	r6, r6, #8
 800baee:	d1f8      	bne.n	800bae2 <_strtoul_l.constprop.0+0xa>
 800baf0:	2c2d      	cmp	r4, #45	; 0x2d
 800baf2:	d12f      	bne.n	800bb54 <_strtoul_l.constprop.0+0x7c>
 800baf4:	782c      	ldrb	r4, [r5, #0]
 800baf6:	2601      	movs	r6, #1
 800baf8:	1c85      	adds	r5, r0, #2
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d057      	beq.n	800bbae <_strtoul_l.constprop.0+0xd6>
 800bafe:	2b10      	cmp	r3, #16
 800bb00:	d109      	bne.n	800bb16 <_strtoul_l.constprop.0+0x3e>
 800bb02:	2c30      	cmp	r4, #48	; 0x30
 800bb04:	d107      	bne.n	800bb16 <_strtoul_l.constprop.0+0x3e>
 800bb06:	7828      	ldrb	r0, [r5, #0]
 800bb08:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800bb0c:	2858      	cmp	r0, #88	; 0x58
 800bb0e:	d149      	bne.n	800bba4 <_strtoul_l.constprop.0+0xcc>
 800bb10:	786c      	ldrb	r4, [r5, #1]
 800bb12:	2310      	movs	r3, #16
 800bb14:	3502      	adds	r5, #2
 800bb16:	f04f 38ff 	mov.w	r8, #4294967295
 800bb1a:	2700      	movs	r7, #0
 800bb1c:	fbb8 f8f3 	udiv	r8, r8, r3
 800bb20:	fb03 f908 	mul.w	r9, r3, r8
 800bb24:	ea6f 0909 	mvn.w	r9, r9
 800bb28:	4638      	mov	r0, r7
 800bb2a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800bb2e:	f1bc 0f09 	cmp.w	ip, #9
 800bb32:	d814      	bhi.n	800bb5e <_strtoul_l.constprop.0+0x86>
 800bb34:	4664      	mov	r4, ip
 800bb36:	42a3      	cmp	r3, r4
 800bb38:	dd22      	ble.n	800bb80 <_strtoul_l.constprop.0+0xa8>
 800bb3a:	2f00      	cmp	r7, #0
 800bb3c:	db1d      	blt.n	800bb7a <_strtoul_l.constprop.0+0xa2>
 800bb3e:	4580      	cmp	r8, r0
 800bb40:	d31b      	bcc.n	800bb7a <_strtoul_l.constprop.0+0xa2>
 800bb42:	d101      	bne.n	800bb48 <_strtoul_l.constprop.0+0x70>
 800bb44:	45a1      	cmp	r9, r4
 800bb46:	db18      	blt.n	800bb7a <_strtoul_l.constprop.0+0xa2>
 800bb48:	fb00 4003 	mla	r0, r0, r3, r4
 800bb4c:	2701      	movs	r7, #1
 800bb4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bb52:	e7ea      	b.n	800bb2a <_strtoul_l.constprop.0+0x52>
 800bb54:	2c2b      	cmp	r4, #43	; 0x2b
 800bb56:	bf04      	itt	eq
 800bb58:	782c      	ldrbeq	r4, [r5, #0]
 800bb5a:	1c85      	addeq	r5, r0, #2
 800bb5c:	e7cd      	b.n	800bafa <_strtoul_l.constprop.0+0x22>
 800bb5e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800bb62:	f1bc 0f19 	cmp.w	ip, #25
 800bb66:	d801      	bhi.n	800bb6c <_strtoul_l.constprop.0+0x94>
 800bb68:	3c37      	subs	r4, #55	; 0x37
 800bb6a:	e7e4      	b.n	800bb36 <_strtoul_l.constprop.0+0x5e>
 800bb6c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800bb70:	f1bc 0f19 	cmp.w	ip, #25
 800bb74:	d804      	bhi.n	800bb80 <_strtoul_l.constprop.0+0xa8>
 800bb76:	3c57      	subs	r4, #87	; 0x57
 800bb78:	e7dd      	b.n	800bb36 <_strtoul_l.constprop.0+0x5e>
 800bb7a:	f04f 37ff 	mov.w	r7, #4294967295
 800bb7e:	e7e6      	b.n	800bb4e <_strtoul_l.constprop.0+0x76>
 800bb80:	2f00      	cmp	r7, #0
 800bb82:	da07      	bge.n	800bb94 <_strtoul_l.constprop.0+0xbc>
 800bb84:	2322      	movs	r3, #34	; 0x22
 800bb86:	f8ce 3000 	str.w	r3, [lr]
 800bb8a:	f04f 30ff 	mov.w	r0, #4294967295
 800bb8e:	b932      	cbnz	r2, 800bb9e <_strtoul_l.constprop.0+0xc6>
 800bb90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb94:	b106      	cbz	r6, 800bb98 <_strtoul_l.constprop.0+0xc0>
 800bb96:	4240      	negs	r0, r0
 800bb98:	2a00      	cmp	r2, #0
 800bb9a:	d0f9      	beq.n	800bb90 <_strtoul_l.constprop.0+0xb8>
 800bb9c:	b107      	cbz	r7, 800bba0 <_strtoul_l.constprop.0+0xc8>
 800bb9e:	1e69      	subs	r1, r5, #1
 800bba0:	6011      	str	r1, [r2, #0]
 800bba2:	e7f5      	b.n	800bb90 <_strtoul_l.constprop.0+0xb8>
 800bba4:	2430      	movs	r4, #48	; 0x30
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d1b5      	bne.n	800bb16 <_strtoul_l.constprop.0+0x3e>
 800bbaa:	2308      	movs	r3, #8
 800bbac:	e7b3      	b.n	800bb16 <_strtoul_l.constprop.0+0x3e>
 800bbae:	2c30      	cmp	r4, #48	; 0x30
 800bbb0:	d0a9      	beq.n	800bb06 <_strtoul_l.constprop.0+0x2e>
 800bbb2:	230a      	movs	r3, #10
 800bbb4:	e7af      	b.n	800bb16 <_strtoul_l.constprop.0+0x3e>
 800bbb6:	bf00      	nop
 800bbb8:	0800c7b1 	.word	0x0800c7b1

0800bbbc <_strtoul_r>:
 800bbbc:	f7ff bf8c 	b.w	800bad8 <_strtoul_l.constprop.0>

0800bbc0 <__submore>:
 800bbc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbc4:	460c      	mov	r4, r1
 800bbc6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bbc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bbcc:	4299      	cmp	r1, r3
 800bbce:	d11d      	bne.n	800bc0c <__submore+0x4c>
 800bbd0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bbd4:	f7ff fa14 	bl	800b000 <_malloc_r>
 800bbd8:	b918      	cbnz	r0, 800bbe2 <__submore+0x22>
 800bbda:	f04f 30ff 	mov.w	r0, #4294967295
 800bbde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bbe6:	63a3      	str	r3, [r4, #56]	; 0x38
 800bbe8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800bbec:	6360      	str	r0, [r4, #52]	; 0x34
 800bbee:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800bbf2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800bbf6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800bbfa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800bbfe:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800bc02:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800bc06:	6020      	str	r0, [r4, #0]
 800bc08:	2000      	movs	r0, #0
 800bc0a:	e7e8      	b.n	800bbde <__submore+0x1e>
 800bc0c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800bc0e:	0077      	lsls	r7, r6, #1
 800bc10:	463a      	mov	r2, r7
 800bc12:	f000 fa2d 	bl	800c070 <_realloc_r>
 800bc16:	4605      	mov	r5, r0
 800bc18:	2800      	cmp	r0, #0
 800bc1a:	d0de      	beq.n	800bbda <__submore+0x1a>
 800bc1c:	eb00 0806 	add.w	r8, r0, r6
 800bc20:	4601      	mov	r1, r0
 800bc22:	4632      	mov	r2, r6
 800bc24:	4640      	mov	r0, r8
 800bc26:	f7fe fc99 	bl	800a55c <memcpy>
 800bc2a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800bc2e:	f8c4 8000 	str.w	r8, [r4]
 800bc32:	e7e9      	b.n	800bc08 <__submore+0x48>

0800bc34 <__ascii_wctomb>:
 800bc34:	b149      	cbz	r1, 800bc4a <__ascii_wctomb+0x16>
 800bc36:	2aff      	cmp	r2, #255	; 0xff
 800bc38:	bf85      	ittet	hi
 800bc3a:	238a      	movhi	r3, #138	; 0x8a
 800bc3c:	6003      	strhi	r3, [r0, #0]
 800bc3e:	700a      	strbls	r2, [r1, #0]
 800bc40:	f04f 30ff 	movhi.w	r0, #4294967295
 800bc44:	bf98      	it	ls
 800bc46:	2001      	movls	r0, #1
 800bc48:	4770      	bx	lr
 800bc4a:	4608      	mov	r0, r1
 800bc4c:	4770      	bx	lr
	...

0800bc50 <__assert_func>:
 800bc50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bc52:	4614      	mov	r4, r2
 800bc54:	461a      	mov	r2, r3
 800bc56:	4b09      	ldr	r3, [pc, #36]	; (800bc7c <__assert_func+0x2c>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	4605      	mov	r5, r0
 800bc5c:	68d8      	ldr	r0, [r3, #12]
 800bc5e:	b14c      	cbz	r4, 800bc74 <__assert_func+0x24>
 800bc60:	4b07      	ldr	r3, [pc, #28]	; (800bc80 <__assert_func+0x30>)
 800bc62:	9100      	str	r1, [sp, #0]
 800bc64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bc68:	4906      	ldr	r1, [pc, #24]	; (800bc84 <__assert_func+0x34>)
 800bc6a:	462b      	mov	r3, r5
 800bc6c:	f000 f9a6 	bl	800bfbc <fiprintf>
 800bc70:	f000 fc46 	bl	800c500 <abort>
 800bc74:	4b04      	ldr	r3, [pc, #16]	; (800bc88 <__assert_func+0x38>)
 800bc76:	461c      	mov	r4, r3
 800bc78:	e7f3      	b.n	800bc62 <__assert_func+0x12>
 800bc7a:	bf00      	nop
 800bc7c:	2000000c 	.word	0x2000000c
 800bc80:	0800cb40 	.word	0x0800cb40
 800bc84:	0800cb4d 	.word	0x0800cb4d
 800bc88:	0800cb7b 	.word	0x0800cb7b

0800bc8c <__sflush_r>:
 800bc8c:	898a      	ldrh	r2, [r1, #12]
 800bc8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc92:	4605      	mov	r5, r0
 800bc94:	0710      	lsls	r0, r2, #28
 800bc96:	460c      	mov	r4, r1
 800bc98:	d458      	bmi.n	800bd4c <__sflush_r+0xc0>
 800bc9a:	684b      	ldr	r3, [r1, #4]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	dc05      	bgt.n	800bcac <__sflush_r+0x20>
 800bca0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	dc02      	bgt.n	800bcac <__sflush_r+0x20>
 800bca6:	2000      	movs	r0, #0
 800bca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bcae:	2e00      	cmp	r6, #0
 800bcb0:	d0f9      	beq.n	800bca6 <__sflush_r+0x1a>
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bcb8:	682f      	ldr	r7, [r5, #0]
 800bcba:	602b      	str	r3, [r5, #0]
 800bcbc:	d032      	beq.n	800bd24 <__sflush_r+0x98>
 800bcbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bcc0:	89a3      	ldrh	r3, [r4, #12]
 800bcc2:	075a      	lsls	r2, r3, #29
 800bcc4:	d505      	bpl.n	800bcd2 <__sflush_r+0x46>
 800bcc6:	6863      	ldr	r3, [r4, #4]
 800bcc8:	1ac0      	subs	r0, r0, r3
 800bcca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bccc:	b10b      	cbz	r3, 800bcd2 <__sflush_r+0x46>
 800bcce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bcd0:	1ac0      	subs	r0, r0, r3
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	4602      	mov	r2, r0
 800bcd6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bcd8:	6a21      	ldr	r1, [r4, #32]
 800bcda:	4628      	mov	r0, r5
 800bcdc:	47b0      	blx	r6
 800bcde:	1c43      	adds	r3, r0, #1
 800bce0:	89a3      	ldrh	r3, [r4, #12]
 800bce2:	d106      	bne.n	800bcf2 <__sflush_r+0x66>
 800bce4:	6829      	ldr	r1, [r5, #0]
 800bce6:	291d      	cmp	r1, #29
 800bce8:	d82c      	bhi.n	800bd44 <__sflush_r+0xb8>
 800bcea:	4a2a      	ldr	r2, [pc, #168]	; (800bd94 <__sflush_r+0x108>)
 800bcec:	40ca      	lsrs	r2, r1
 800bcee:	07d6      	lsls	r6, r2, #31
 800bcf0:	d528      	bpl.n	800bd44 <__sflush_r+0xb8>
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	6062      	str	r2, [r4, #4]
 800bcf6:	04d9      	lsls	r1, r3, #19
 800bcf8:	6922      	ldr	r2, [r4, #16]
 800bcfa:	6022      	str	r2, [r4, #0]
 800bcfc:	d504      	bpl.n	800bd08 <__sflush_r+0x7c>
 800bcfe:	1c42      	adds	r2, r0, #1
 800bd00:	d101      	bne.n	800bd06 <__sflush_r+0x7a>
 800bd02:	682b      	ldr	r3, [r5, #0]
 800bd04:	b903      	cbnz	r3, 800bd08 <__sflush_r+0x7c>
 800bd06:	6560      	str	r0, [r4, #84]	; 0x54
 800bd08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd0a:	602f      	str	r7, [r5, #0]
 800bd0c:	2900      	cmp	r1, #0
 800bd0e:	d0ca      	beq.n	800bca6 <__sflush_r+0x1a>
 800bd10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd14:	4299      	cmp	r1, r3
 800bd16:	d002      	beq.n	800bd1e <__sflush_r+0x92>
 800bd18:	4628      	mov	r0, r5
 800bd1a:	f7ff f905 	bl	800af28 <_free_r>
 800bd1e:	2000      	movs	r0, #0
 800bd20:	6360      	str	r0, [r4, #52]	; 0x34
 800bd22:	e7c1      	b.n	800bca8 <__sflush_r+0x1c>
 800bd24:	6a21      	ldr	r1, [r4, #32]
 800bd26:	2301      	movs	r3, #1
 800bd28:	4628      	mov	r0, r5
 800bd2a:	47b0      	blx	r6
 800bd2c:	1c41      	adds	r1, r0, #1
 800bd2e:	d1c7      	bne.n	800bcc0 <__sflush_r+0x34>
 800bd30:	682b      	ldr	r3, [r5, #0]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d0c4      	beq.n	800bcc0 <__sflush_r+0x34>
 800bd36:	2b1d      	cmp	r3, #29
 800bd38:	d001      	beq.n	800bd3e <__sflush_r+0xb2>
 800bd3a:	2b16      	cmp	r3, #22
 800bd3c:	d101      	bne.n	800bd42 <__sflush_r+0xb6>
 800bd3e:	602f      	str	r7, [r5, #0]
 800bd40:	e7b1      	b.n	800bca6 <__sflush_r+0x1a>
 800bd42:	89a3      	ldrh	r3, [r4, #12]
 800bd44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd48:	81a3      	strh	r3, [r4, #12]
 800bd4a:	e7ad      	b.n	800bca8 <__sflush_r+0x1c>
 800bd4c:	690f      	ldr	r7, [r1, #16]
 800bd4e:	2f00      	cmp	r7, #0
 800bd50:	d0a9      	beq.n	800bca6 <__sflush_r+0x1a>
 800bd52:	0793      	lsls	r3, r2, #30
 800bd54:	680e      	ldr	r6, [r1, #0]
 800bd56:	bf08      	it	eq
 800bd58:	694b      	ldreq	r3, [r1, #20]
 800bd5a:	600f      	str	r7, [r1, #0]
 800bd5c:	bf18      	it	ne
 800bd5e:	2300      	movne	r3, #0
 800bd60:	eba6 0807 	sub.w	r8, r6, r7
 800bd64:	608b      	str	r3, [r1, #8]
 800bd66:	f1b8 0f00 	cmp.w	r8, #0
 800bd6a:	dd9c      	ble.n	800bca6 <__sflush_r+0x1a>
 800bd6c:	6a21      	ldr	r1, [r4, #32]
 800bd6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bd70:	4643      	mov	r3, r8
 800bd72:	463a      	mov	r2, r7
 800bd74:	4628      	mov	r0, r5
 800bd76:	47b0      	blx	r6
 800bd78:	2800      	cmp	r0, #0
 800bd7a:	dc06      	bgt.n	800bd8a <__sflush_r+0xfe>
 800bd7c:	89a3      	ldrh	r3, [r4, #12]
 800bd7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd82:	81a3      	strh	r3, [r4, #12]
 800bd84:	f04f 30ff 	mov.w	r0, #4294967295
 800bd88:	e78e      	b.n	800bca8 <__sflush_r+0x1c>
 800bd8a:	4407      	add	r7, r0
 800bd8c:	eba8 0800 	sub.w	r8, r8, r0
 800bd90:	e7e9      	b.n	800bd66 <__sflush_r+0xda>
 800bd92:	bf00      	nop
 800bd94:	20400001 	.word	0x20400001

0800bd98 <_fflush_r>:
 800bd98:	b538      	push	{r3, r4, r5, lr}
 800bd9a:	690b      	ldr	r3, [r1, #16]
 800bd9c:	4605      	mov	r5, r0
 800bd9e:	460c      	mov	r4, r1
 800bda0:	b913      	cbnz	r3, 800bda8 <_fflush_r+0x10>
 800bda2:	2500      	movs	r5, #0
 800bda4:	4628      	mov	r0, r5
 800bda6:	bd38      	pop	{r3, r4, r5, pc}
 800bda8:	b118      	cbz	r0, 800bdb2 <_fflush_r+0x1a>
 800bdaa:	6983      	ldr	r3, [r0, #24]
 800bdac:	b90b      	cbnz	r3, 800bdb2 <_fflush_r+0x1a>
 800bdae:	f000 f887 	bl	800bec0 <__sinit>
 800bdb2:	4b14      	ldr	r3, [pc, #80]	; (800be04 <_fflush_r+0x6c>)
 800bdb4:	429c      	cmp	r4, r3
 800bdb6:	d11b      	bne.n	800bdf0 <_fflush_r+0x58>
 800bdb8:	686c      	ldr	r4, [r5, #4]
 800bdba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d0ef      	beq.n	800bda2 <_fflush_r+0xa>
 800bdc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bdc4:	07d0      	lsls	r0, r2, #31
 800bdc6:	d404      	bmi.n	800bdd2 <_fflush_r+0x3a>
 800bdc8:	0599      	lsls	r1, r3, #22
 800bdca:	d402      	bmi.n	800bdd2 <_fflush_r+0x3a>
 800bdcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bdce:	f000 f927 	bl	800c020 <__retarget_lock_acquire_recursive>
 800bdd2:	4628      	mov	r0, r5
 800bdd4:	4621      	mov	r1, r4
 800bdd6:	f7ff ff59 	bl	800bc8c <__sflush_r>
 800bdda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bddc:	07da      	lsls	r2, r3, #31
 800bdde:	4605      	mov	r5, r0
 800bde0:	d4e0      	bmi.n	800bda4 <_fflush_r+0xc>
 800bde2:	89a3      	ldrh	r3, [r4, #12]
 800bde4:	059b      	lsls	r3, r3, #22
 800bde6:	d4dd      	bmi.n	800bda4 <_fflush_r+0xc>
 800bde8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bdea:	f000 f91a 	bl	800c022 <__retarget_lock_release_recursive>
 800bdee:	e7d9      	b.n	800bda4 <_fflush_r+0xc>
 800bdf0:	4b05      	ldr	r3, [pc, #20]	; (800be08 <_fflush_r+0x70>)
 800bdf2:	429c      	cmp	r4, r3
 800bdf4:	d101      	bne.n	800bdfa <_fflush_r+0x62>
 800bdf6:	68ac      	ldr	r4, [r5, #8]
 800bdf8:	e7df      	b.n	800bdba <_fflush_r+0x22>
 800bdfa:	4b04      	ldr	r3, [pc, #16]	; (800be0c <_fflush_r+0x74>)
 800bdfc:	429c      	cmp	r4, r3
 800bdfe:	bf08      	it	eq
 800be00:	68ec      	ldreq	r4, [r5, #12]
 800be02:	e7da      	b.n	800bdba <_fflush_r+0x22>
 800be04:	0800cb9c 	.word	0x0800cb9c
 800be08:	0800cbbc 	.word	0x0800cbbc
 800be0c:	0800cb7c 	.word	0x0800cb7c

0800be10 <std>:
 800be10:	2300      	movs	r3, #0
 800be12:	b510      	push	{r4, lr}
 800be14:	4604      	mov	r4, r0
 800be16:	e9c0 3300 	strd	r3, r3, [r0]
 800be1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be1e:	6083      	str	r3, [r0, #8]
 800be20:	8181      	strh	r1, [r0, #12]
 800be22:	6643      	str	r3, [r0, #100]	; 0x64
 800be24:	81c2      	strh	r2, [r0, #14]
 800be26:	6183      	str	r3, [r0, #24]
 800be28:	4619      	mov	r1, r3
 800be2a:	2208      	movs	r2, #8
 800be2c:	305c      	adds	r0, #92	; 0x5c
 800be2e:	f7fb fb5d 	bl	80074ec <memset>
 800be32:	4b05      	ldr	r3, [pc, #20]	; (800be48 <std+0x38>)
 800be34:	6263      	str	r3, [r4, #36]	; 0x24
 800be36:	4b05      	ldr	r3, [pc, #20]	; (800be4c <std+0x3c>)
 800be38:	62a3      	str	r3, [r4, #40]	; 0x28
 800be3a:	4b05      	ldr	r3, [pc, #20]	; (800be50 <std+0x40>)
 800be3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800be3e:	4b05      	ldr	r3, [pc, #20]	; (800be54 <std+0x44>)
 800be40:	6224      	str	r4, [r4, #32]
 800be42:	6323      	str	r3, [r4, #48]	; 0x30
 800be44:	bd10      	pop	{r4, pc}
 800be46:	bf00      	nop
 800be48:	080082fd 	.word	0x080082fd
 800be4c:	08008323 	.word	0x08008323
 800be50:	0800835b 	.word	0x0800835b
 800be54:	0800837f 	.word	0x0800837f

0800be58 <_cleanup_r>:
 800be58:	4901      	ldr	r1, [pc, #4]	; (800be60 <_cleanup_r+0x8>)
 800be5a:	f000 b8c1 	b.w	800bfe0 <_fwalk_reent>
 800be5e:	bf00      	nop
 800be60:	0800bd99 	.word	0x0800bd99

0800be64 <__sfmoreglue>:
 800be64:	b570      	push	{r4, r5, r6, lr}
 800be66:	2268      	movs	r2, #104	; 0x68
 800be68:	1e4d      	subs	r5, r1, #1
 800be6a:	4355      	muls	r5, r2
 800be6c:	460e      	mov	r6, r1
 800be6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800be72:	f7ff f8c5 	bl	800b000 <_malloc_r>
 800be76:	4604      	mov	r4, r0
 800be78:	b140      	cbz	r0, 800be8c <__sfmoreglue+0x28>
 800be7a:	2100      	movs	r1, #0
 800be7c:	e9c0 1600 	strd	r1, r6, [r0]
 800be80:	300c      	adds	r0, #12
 800be82:	60a0      	str	r0, [r4, #8]
 800be84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800be88:	f7fb fb30 	bl	80074ec <memset>
 800be8c:	4620      	mov	r0, r4
 800be8e:	bd70      	pop	{r4, r5, r6, pc}

0800be90 <__sfp_lock_acquire>:
 800be90:	4801      	ldr	r0, [pc, #4]	; (800be98 <__sfp_lock_acquire+0x8>)
 800be92:	f000 b8c5 	b.w	800c020 <__retarget_lock_acquire_recursive>
 800be96:	bf00      	nop
 800be98:	20000461 	.word	0x20000461

0800be9c <__sfp_lock_release>:
 800be9c:	4801      	ldr	r0, [pc, #4]	; (800bea4 <__sfp_lock_release+0x8>)
 800be9e:	f000 b8c0 	b.w	800c022 <__retarget_lock_release_recursive>
 800bea2:	bf00      	nop
 800bea4:	20000461 	.word	0x20000461

0800bea8 <__sinit_lock_acquire>:
 800bea8:	4801      	ldr	r0, [pc, #4]	; (800beb0 <__sinit_lock_acquire+0x8>)
 800beaa:	f000 b8b9 	b.w	800c020 <__retarget_lock_acquire_recursive>
 800beae:	bf00      	nop
 800beb0:	20000462 	.word	0x20000462

0800beb4 <__sinit_lock_release>:
 800beb4:	4801      	ldr	r0, [pc, #4]	; (800bebc <__sinit_lock_release+0x8>)
 800beb6:	f000 b8b4 	b.w	800c022 <__retarget_lock_release_recursive>
 800beba:	bf00      	nop
 800bebc:	20000462 	.word	0x20000462

0800bec0 <__sinit>:
 800bec0:	b510      	push	{r4, lr}
 800bec2:	4604      	mov	r4, r0
 800bec4:	f7ff fff0 	bl	800bea8 <__sinit_lock_acquire>
 800bec8:	69a3      	ldr	r3, [r4, #24]
 800beca:	b11b      	cbz	r3, 800bed4 <__sinit+0x14>
 800becc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bed0:	f7ff bff0 	b.w	800beb4 <__sinit_lock_release>
 800bed4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bed8:	6523      	str	r3, [r4, #80]	; 0x50
 800beda:	4b13      	ldr	r3, [pc, #76]	; (800bf28 <__sinit+0x68>)
 800bedc:	4a13      	ldr	r2, [pc, #76]	; (800bf2c <__sinit+0x6c>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	62a2      	str	r2, [r4, #40]	; 0x28
 800bee2:	42a3      	cmp	r3, r4
 800bee4:	bf04      	itt	eq
 800bee6:	2301      	moveq	r3, #1
 800bee8:	61a3      	streq	r3, [r4, #24]
 800beea:	4620      	mov	r0, r4
 800beec:	f000 f820 	bl	800bf30 <__sfp>
 800bef0:	6060      	str	r0, [r4, #4]
 800bef2:	4620      	mov	r0, r4
 800bef4:	f000 f81c 	bl	800bf30 <__sfp>
 800bef8:	60a0      	str	r0, [r4, #8]
 800befa:	4620      	mov	r0, r4
 800befc:	f000 f818 	bl	800bf30 <__sfp>
 800bf00:	2200      	movs	r2, #0
 800bf02:	60e0      	str	r0, [r4, #12]
 800bf04:	2104      	movs	r1, #4
 800bf06:	6860      	ldr	r0, [r4, #4]
 800bf08:	f7ff ff82 	bl	800be10 <std>
 800bf0c:	68a0      	ldr	r0, [r4, #8]
 800bf0e:	2201      	movs	r2, #1
 800bf10:	2109      	movs	r1, #9
 800bf12:	f7ff ff7d 	bl	800be10 <std>
 800bf16:	68e0      	ldr	r0, [r4, #12]
 800bf18:	2202      	movs	r2, #2
 800bf1a:	2112      	movs	r1, #18
 800bf1c:	f7ff ff78 	bl	800be10 <std>
 800bf20:	2301      	movs	r3, #1
 800bf22:	61a3      	str	r3, [r4, #24]
 800bf24:	e7d2      	b.n	800becc <__sinit+0xc>
 800bf26:	bf00      	nop
 800bf28:	0800c720 	.word	0x0800c720
 800bf2c:	0800be59 	.word	0x0800be59

0800bf30 <__sfp>:
 800bf30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf32:	4607      	mov	r7, r0
 800bf34:	f7ff ffac 	bl	800be90 <__sfp_lock_acquire>
 800bf38:	4b1e      	ldr	r3, [pc, #120]	; (800bfb4 <__sfp+0x84>)
 800bf3a:	681e      	ldr	r6, [r3, #0]
 800bf3c:	69b3      	ldr	r3, [r6, #24]
 800bf3e:	b913      	cbnz	r3, 800bf46 <__sfp+0x16>
 800bf40:	4630      	mov	r0, r6
 800bf42:	f7ff ffbd 	bl	800bec0 <__sinit>
 800bf46:	3648      	adds	r6, #72	; 0x48
 800bf48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bf4c:	3b01      	subs	r3, #1
 800bf4e:	d503      	bpl.n	800bf58 <__sfp+0x28>
 800bf50:	6833      	ldr	r3, [r6, #0]
 800bf52:	b30b      	cbz	r3, 800bf98 <__sfp+0x68>
 800bf54:	6836      	ldr	r6, [r6, #0]
 800bf56:	e7f7      	b.n	800bf48 <__sfp+0x18>
 800bf58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bf5c:	b9d5      	cbnz	r5, 800bf94 <__sfp+0x64>
 800bf5e:	4b16      	ldr	r3, [pc, #88]	; (800bfb8 <__sfp+0x88>)
 800bf60:	60e3      	str	r3, [r4, #12]
 800bf62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bf66:	6665      	str	r5, [r4, #100]	; 0x64
 800bf68:	f000 f859 	bl	800c01e <__retarget_lock_init_recursive>
 800bf6c:	f7ff ff96 	bl	800be9c <__sfp_lock_release>
 800bf70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bf74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bf78:	6025      	str	r5, [r4, #0]
 800bf7a:	61a5      	str	r5, [r4, #24]
 800bf7c:	2208      	movs	r2, #8
 800bf7e:	4629      	mov	r1, r5
 800bf80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bf84:	f7fb fab2 	bl	80074ec <memset>
 800bf88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bf8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bf90:	4620      	mov	r0, r4
 800bf92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf94:	3468      	adds	r4, #104	; 0x68
 800bf96:	e7d9      	b.n	800bf4c <__sfp+0x1c>
 800bf98:	2104      	movs	r1, #4
 800bf9a:	4638      	mov	r0, r7
 800bf9c:	f7ff ff62 	bl	800be64 <__sfmoreglue>
 800bfa0:	4604      	mov	r4, r0
 800bfa2:	6030      	str	r0, [r6, #0]
 800bfa4:	2800      	cmp	r0, #0
 800bfa6:	d1d5      	bne.n	800bf54 <__sfp+0x24>
 800bfa8:	f7ff ff78 	bl	800be9c <__sfp_lock_release>
 800bfac:	230c      	movs	r3, #12
 800bfae:	603b      	str	r3, [r7, #0]
 800bfb0:	e7ee      	b.n	800bf90 <__sfp+0x60>
 800bfb2:	bf00      	nop
 800bfb4:	0800c720 	.word	0x0800c720
 800bfb8:	ffff0001 	.word	0xffff0001

0800bfbc <fiprintf>:
 800bfbc:	b40e      	push	{r1, r2, r3}
 800bfbe:	b503      	push	{r0, r1, lr}
 800bfc0:	4601      	mov	r1, r0
 800bfc2:	ab03      	add	r3, sp, #12
 800bfc4:	4805      	ldr	r0, [pc, #20]	; (800bfdc <fiprintf+0x20>)
 800bfc6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfca:	6800      	ldr	r0, [r0, #0]
 800bfcc:	9301      	str	r3, [sp, #4]
 800bfce:	f000 f8a7 	bl	800c120 <_vfiprintf_r>
 800bfd2:	b002      	add	sp, #8
 800bfd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bfd8:	b003      	add	sp, #12
 800bfda:	4770      	bx	lr
 800bfdc:	2000000c 	.word	0x2000000c

0800bfe0 <_fwalk_reent>:
 800bfe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfe4:	4606      	mov	r6, r0
 800bfe6:	4688      	mov	r8, r1
 800bfe8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bfec:	2700      	movs	r7, #0
 800bfee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bff2:	f1b9 0901 	subs.w	r9, r9, #1
 800bff6:	d505      	bpl.n	800c004 <_fwalk_reent+0x24>
 800bff8:	6824      	ldr	r4, [r4, #0]
 800bffa:	2c00      	cmp	r4, #0
 800bffc:	d1f7      	bne.n	800bfee <_fwalk_reent+0xe>
 800bffe:	4638      	mov	r0, r7
 800c000:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c004:	89ab      	ldrh	r3, [r5, #12]
 800c006:	2b01      	cmp	r3, #1
 800c008:	d907      	bls.n	800c01a <_fwalk_reent+0x3a>
 800c00a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c00e:	3301      	adds	r3, #1
 800c010:	d003      	beq.n	800c01a <_fwalk_reent+0x3a>
 800c012:	4629      	mov	r1, r5
 800c014:	4630      	mov	r0, r6
 800c016:	47c0      	blx	r8
 800c018:	4307      	orrs	r7, r0
 800c01a:	3568      	adds	r5, #104	; 0x68
 800c01c:	e7e9      	b.n	800bff2 <_fwalk_reent+0x12>

0800c01e <__retarget_lock_init_recursive>:
 800c01e:	4770      	bx	lr

0800c020 <__retarget_lock_acquire_recursive>:
 800c020:	4770      	bx	lr

0800c022 <__retarget_lock_release_recursive>:
 800c022:	4770      	bx	lr

0800c024 <memmove>:
 800c024:	4288      	cmp	r0, r1
 800c026:	b510      	push	{r4, lr}
 800c028:	eb01 0402 	add.w	r4, r1, r2
 800c02c:	d902      	bls.n	800c034 <memmove+0x10>
 800c02e:	4284      	cmp	r4, r0
 800c030:	4623      	mov	r3, r4
 800c032:	d807      	bhi.n	800c044 <memmove+0x20>
 800c034:	1e43      	subs	r3, r0, #1
 800c036:	42a1      	cmp	r1, r4
 800c038:	d008      	beq.n	800c04c <memmove+0x28>
 800c03a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c03e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c042:	e7f8      	b.n	800c036 <memmove+0x12>
 800c044:	4402      	add	r2, r0
 800c046:	4601      	mov	r1, r0
 800c048:	428a      	cmp	r2, r1
 800c04a:	d100      	bne.n	800c04e <memmove+0x2a>
 800c04c:	bd10      	pop	{r4, pc}
 800c04e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c052:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c056:	e7f7      	b.n	800c048 <memmove+0x24>

0800c058 <__malloc_lock>:
 800c058:	4801      	ldr	r0, [pc, #4]	; (800c060 <__malloc_lock+0x8>)
 800c05a:	f7ff bfe1 	b.w	800c020 <__retarget_lock_acquire_recursive>
 800c05e:	bf00      	nop
 800c060:	20000460 	.word	0x20000460

0800c064 <__malloc_unlock>:
 800c064:	4801      	ldr	r0, [pc, #4]	; (800c06c <__malloc_unlock+0x8>)
 800c066:	f7ff bfdc 	b.w	800c022 <__retarget_lock_release_recursive>
 800c06a:	bf00      	nop
 800c06c:	20000460 	.word	0x20000460

0800c070 <_realloc_r>:
 800c070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c074:	4680      	mov	r8, r0
 800c076:	4614      	mov	r4, r2
 800c078:	460e      	mov	r6, r1
 800c07a:	b921      	cbnz	r1, 800c086 <_realloc_r+0x16>
 800c07c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c080:	4611      	mov	r1, r2
 800c082:	f7fe bfbd 	b.w	800b000 <_malloc_r>
 800c086:	b92a      	cbnz	r2, 800c094 <_realloc_r+0x24>
 800c088:	f7fe ff4e 	bl	800af28 <_free_r>
 800c08c:	4625      	mov	r5, r4
 800c08e:	4628      	mov	r0, r5
 800c090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c094:	f000 faa0 	bl	800c5d8 <_malloc_usable_size_r>
 800c098:	4284      	cmp	r4, r0
 800c09a:	4607      	mov	r7, r0
 800c09c:	d802      	bhi.n	800c0a4 <_realloc_r+0x34>
 800c09e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c0a2:	d812      	bhi.n	800c0ca <_realloc_r+0x5a>
 800c0a4:	4621      	mov	r1, r4
 800c0a6:	4640      	mov	r0, r8
 800c0a8:	f7fe ffaa 	bl	800b000 <_malloc_r>
 800c0ac:	4605      	mov	r5, r0
 800c0ae:	2800      	cmp	r0, #0
 800c0b0:	d0ed      	beq.n	800c08e <_realloc_r+0x1e>
 800c0b2:	42bc      	cmp	r4, r7
 800c0b4:	4622      	mov	r2, r4
 800c0b6:	4631      	mov	r1, r6
 800c0b8:	bf28      	it	cs
 800c0ba:	463a      	movcs	r2, r7
 800c0bc:	f7fe fa4e 	bl	800a55c <memcpy>
 800c0c0:	4631      	mov	r1, r6
 800c0c2:	4640      	mov	r0, r8
 800c0c4:	f7fe ff30 	bl	800af28 <_free_r>
 800c0c8:	e7e1      	b.n	800c08e <_realloc_r+0x1e>
 800c0ca:	4635      	mov	r5, r6
 800c0cc:	e7df      	b.n	800c08e <_realloc_r+0x1e>

0800c0ce <__sfputc_r>:
 800c0ce:	6893      	ldr	r3, [r2, #8]
 800c0d0:	3b01      	subs	r3, #1
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	b410      	push	{r4}
 800c0d6:	6093      	str	r3, [r2, #8]
 800c0d8:	da08      	bge.n	800c0ec <__sfputc_r+0x1e>
 800c0da:	6994      	ldr	r4, [r2, #24]
 800c0dc:	42a3      	cmp	r3, r4
 800c0de:	db01      	blt.n	800c0e4 <__sfputc_r+0x16>
 800c0e0:	290a      	cmp	r1, #10
 800c0e2:	d103      	bne.n	800c0ec <__sfputc_r+0x1e>
 800c0e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c0e8:	f000 b94a 	b.w	800c380 <__swbuf_r>
 800c0ec:	6813      	ldr	r3, [r2, #0]
 800c0ee:	1c58      	adds	r0, r3, #1
 800c0f0:	6010      	str	r0, [r2, #0]
 800c0f2:	7019      	strb	r1, [r3, #0]
 800c0f4:	4608      	mov	r0, r1
 800c0f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c0fa:	4770      	bx	lr

0800c0fc <__sfputs_r>:
 800c0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0fe:	4606      	mov	r6, r0
 800c100:	460f      	mov	r7, r1
 800c102:	4614      	mov	r4, r2
 800c104:	18d5      	adds	r5, r2, r3
 800c106:	42ac      	cmp	r4, r5
 800c108:	d101      	bne.n	800c10e <__sfputs_r+0x12>
 800c10a:	2000      	movs	r0, #0
 800c10c:	e007      	b.n	800c11e <__sfputs_r+0x22>
 800c10e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c112:	463a      	mov	r2, r7
 800c114:	4630      	mov	r0, r6
 800c116:	f7ff ffda 	bl	800c0ce <__sfputc_r>
 800c11a:	1c43      	adds	r3, r0, #1
 800c11c:	d1f3      	bne.n	800c106 <__sfputs_r+0xa>
 800c11e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c120 <_vfiprintf_r>:
 800c120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c124:	460d      	mov	r5, r1
 800c126:	b09d      	sub	sp, #116	; 0x74
 800c128:	4614      	mov	r4, r2
 800c12a:	4698      	mov	r8, r3
 800c12c:	4606      	mov	r6, r0
 800c12e:	b118      	cbz	r0, 800c138 <_vfiprintf_r+0x18>
 800c130:	6983      	ldr	r3, [r0, #24]
 800c132:	b90b      	cbnz	r3, 800c138 <_vfiprintf_r+0x18>
 800c134:	f7ff fec4 	bl	800bec0 <__sinit>
 800c138:	4b89      	ldr	r3, [pc, #548]	; (800c360 <_vfiprintf_r+0x240>)
 800c13a:	429d      	cmp	r5, r3
 800c13c:	d11b      	bne.n	800c176 <_vfiprintf_r+0x56>
 800c13e:	6875      	ldr	r5, [r6, #4]
 800c140:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c142:	07d9      	lsls	r1, r3, #31
 800c144:	d405      	bmi.n	800c152 <_vfiprintf_r+0x32>
 800c146:	89ab      	ldrh	r3, [r5, #12]
 800c148:	059a      	lsls	r2, r3, #22
 800c14a:	d402      	bmi.n	800c152 <_vfiprintf_r+0x32>
 800c14c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c14e:	f7ff ff67 	bl	800c020 <__retarget_lock_acquire_recursive>
 800c152:	89ab      	ldrh	r3, [r5, #12]
 800c154:	071b      	lsls	r3, r3, #28
 800c156:	d501      	bpl.n	800c15c <_vfiprintf_r+0x3c>
 800c158:	692b      	ldr	r3, [r5, #16]
 800c15a:	b9eb      	cbnz	r3, 800c198 <_vfiprintf_r+0x78>
 800c15c:	4629      	mov	r1, r5
 800c15e:	4630      	mov	r0, r6
 800c160:	f000 f960 	bl	800c424 <__swsetup_r>
 800c164:	b1c0      	cbz	r0, 800c198 <_vfiprintf_r+0x78>
 800c166:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c168:	07dc      	lsls	r4, r3, #31
 800c16a:	d50e      	bpl.n	800c18a <_vfiprintf_r+0x6a>
 800c16c:	f04f 30ff 	mov.w	r0, #4294967295
 800c170:	b01d      	add	sp, #116	; 0x74
 800c172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c176:	4b7b      	ldr	r3, [pc, #492]	; (800c364 <_vfiprintf_r+0x244>)
 800c178:	429d      	cmp	r5, r3
 800c17a:	d101      	bne.n	800c180 <_vfiprintf_r+0x60>
 800c17c:	68b5      	ldr	r5, [r6, #8]
 800c17e:	e7df      	b.n	800c140 <_vfiprintf_r+0x20>
 800c180:	4b79      	ldr	r3, [pc, #484]	; (800c368 <_vfiprintf_r+0x248>)
 800c182:	429d      	cmp	r5, r3
 800c184:	bf08      	it	eq
 800c186:	68f5      	ldreq	r5, [r6, #12]
 800c188:	e7da      	b.n	800c140 <_vfiprintf_r+0x20>
 800c18a:	89ab      	ldrh	r3, [r5, #12]
 800c18c:	0598      	lsls	r0, r3, #22
 800c18e:	d4ed      	bmi.n	800c16c <_vfiprintf_r+0x4c>
 800c190:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c192:	f7ff ff46 	bl	800c022 <__retarget_lock_release_recursive>
 800c196:	e7e9      	b.n	800c16c <_vfiprintf_r+0x4c>
 800c198:	2300      	movs	r3, #0
 800c19a:	9309      	str	r3, [sp, #36]	; 0x24
 800c19c:	2320      	movs	r3, #32
 800c19e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c1a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c1a6:	2330      	movs	r3, #48	; 0x30
 800c1a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c36c <_vfiprintf_r+0x24c>
 800c1ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c1b0:	f04f 0901 	mov.w	r9, #1
 800c1b4:	4623      	mov	r3, r4
 800c1b6:	469a      	mov	sl, r3
 800c1b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1bc:	b10a      	cbz	r2, 800c1c2 <_vfiprintf_r+0xa2>
 800c1be:	2a25      	cmp	r2, #37	; 0x25
 800c1c0:	d1f9      	bne.n	800c1b6 <_vfiprintf_r+0x96>
 800c1c2:	ebba 0b04 	subs.w	fp, sl, r4
 800c1c6:	d00b      	beq.n	800c1e0 <_vfiprintf_r+0xc0>
 800c1c8:	465b      	mov	r3, fp
 800c1ca:	4622      	mov	r2, r4
 800c1cc:	4629      	mov	r1, r5
 800c1ce:	4630      	mov	r0, r6
 800c1d0:	f7ff ff94 	bl	800c0fc <__sfputs_r>
 800c1d4:	3001      	adds	r0, #1
 800c1d6:	f000 80aa 	beq.w	800c32e <_vfiprintf_r+0x20e>
 800c1da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c1dc:	445a      	add	r2, fp
 800c1de:	9209      	str	r2, [sp, #36]	; 0x24
 800c1e0:	f89a 3000 	ldrb.w	r3, [sl]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	f000 80a2 	beq.w	800c32e <_vfiprintf_r+0x20e>
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	f04f 32ff 	mov.w	r2, #4294967295
 800c1f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1f4:	f10a 0a01 	add.w	sl, sl, #1
 800c1f8:	9304      	str	r3, [sp, #16]
 800c1fa:	9307      	str	r3, [sp, #28]
 800c1fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c200:	931a      	str	r3, [sp, #104]	; 0x68
 800c202:	4654      	mov	r4, sl
 800c204:	2205      	movs	r2, #5
 800c206:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c20a:	4858      	ldr	r0, [pc, #352]	; (800c36c <_vfiprintf_r+0x24c>)
 800c20c:	f7f4 f808 	bl	8000220 <memchr>
 800c210:	9a04      	ldr	r2, [sp, #16]
 800c212:	b9d8      	cbnz	r0, 800c24c <_vfiprintf_r+0x12c>
 800c214:	06d1      	lsls	r1, r2, #27
 800c216:	bf44      	itt	mi
 800c218:	2320      	movmi	r3, #32
 800c21a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c21e:	0713      	lsls	r3, r2, #28
 800c220:	bf44      	itt	mi
 800c222:	232b      	movmi	r3, #43	; 0x2b
 800c224:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c228:	f89a 3000 	ldrb.w	r3, [sl]
 800c22c:	2b2a      	cmp	r3, #42	; 0x2a
 800c22e:	d015      	beq.n	800c25c <_vfiprintf_r+0x13c>
 800c230:	9a07      	ldr	r2, [sp, #28]
 800c232:	4654      	mov	r4, sl
 800c234:	2000      	movs	r0, #0
 800c236:	f04f 0c0a 	mov.w	ip, #10
 800c23a:	4621      	mov	r1, r4
 800c23c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c240:	3b30      	subs	r3, #48	; 0x30
 800c242:	2b09      	cmp	r3, #9
 800c244:	d94e      	bls.n	800c2e4 <_vfiprintf_r+0x1c4>
 800c246:	b1b0      	cbz	r0, 800c276 <_vfiprintf_r+0x156>
 800c248:	9207      	str	r2, [sp, #28]
 800c24a:	e014      	b.n	800c276 <_vfiprintf_r+0x156>
 800c24c:	eba0 0308 	sub.w	r3, r0, r8
 800c250:	fa09 f303 	lsl.w	r3, r9, r3
 800c254:	4313      	orrs	r3, r2
 800c256:	9304      	str	r3, [sp, #16]
 800c258:	46a2      	mov	sl, r4
 800c25a:	e7d2      	b.n	800c202 <_vfiprintf_r+0xe2>
 800c25c:	9b03      	ldr	r3, [sp, #12]
 800c25e:	1d19      	adds	r1, r3, #4
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	9103      	str	r1, [sp, #12]
 800c264:	2b00      	cmp	r3, #0
 800c266:	bfbb      	ittet	lt
 800c268:	425b      	neglt	r3, r3
 800c26a:	f042 0202 	orrlt.w	r2, r2, #2
 800c26e:	9307      	strge	r3, [sp, #28]
 800c270:	9307      	strlt	r3, [sp, #28]
 800c272:	bfb8      	it	lt
 800c274:	9204      	strlt	r2, [sp, #16]
 800c276:	7823      	ldrb	r3, [r4, #0]
 800c278:	2b2e      	cmp	r3, #46	; 0x2e
 800c27a:	d10c      	bne.n	800c296 <_vfiprintf_r+0x176>
 800c27c:	7863      	ldrb	r3, [r4, #1]
 800c27e:	2b2a      	cmp	r3, #42	; 0x2a
 800c280:	d135      	bne.n	800c2ee <_vfiprintf_r+0x1ce>
 800c282:	9b03      	ldr	r3, [sp, #12]
 800c284:	1d1a      	adds	r2, r3, #4
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	9203      	str	r2, [sp, #12]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	bfb8      	it	lt
 800c28e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c292:	3402      	adds	r4, #2
 800c294:	9305      	str	r3, [sp, #20]
 800c296:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c37c <_vfiprintf_r+0x25c>
 800c29a:	7821      	ldrb	r1, [r4, #0]
 800c29c:	2203      	movs	r2, #3
 800c29e:	4650      	mov	r0, sl
 800c2a0:	f7f3 ffbe 	bl	8000220 <memchr>
 800c2a4:	b140      	cbz	r0, 800c2b8 <_vfiprintf_r+0x198>
 800c2a6:	2340      	movs	r3, #64	; 0x40
 800c2a8:	eba0 000a 	sub.w	r0, r0, sl
 800c2ac:	fa03 f000 	lsl.w	r0, r3, r0
 800c2b0:	9b04      	ldr	r3, [sp, #16]
 800c2b2:	4303      	orrs	r3, r0
 800c2b4:	3401      	adds	r4, #1
 800c2b6:	9304      	str	r3, [sp, #16]
 800c2b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2bc:	482c      	ldr	r0, [pc, #176]	; (800c370 <_vfiprintf_r+0x250>)
 800c2be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c2c2:	2206      	movs	r2, #6
 800c2c4:	f7f3 ffac 	bl	8000220 <memchr>
 800c2c8:	2800      	cmp	r0, #0
 800c2ca:	d03f      	beq.n	800c34c <_vfiprintf_r+0x22c>
 800c2cc:	4b29      	ldr	r3, [pc, #164]	; (800c374 <_vfiprintf_r+0x254>)
 800c2ce:	bb1b      	cbnz	r3, 800c318 <_vfiprintf_r+0x1f8>
 800c2d0:	9b03      	ldr	r3, [sp, #12]
 800c2d2:	3307      	adds	r3, #7
 800c2d4:	f023 0307 	bic.w	r3, r3, #7
 800c2d8:	3308      	adds	r3, #8
 800c2da:	9303      	str	r3, [sp, #12]
 800c2dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2de:	443b      	add	r3, r7
 800c2e0:	9309      	str	r3, [sp, #36]	; 0x24
 800c2e2:	e767      	b.n	800c1b4 <_vfiprintf_r+0x94>
 800c2e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c2e8:	460c      	mov	r4, r1
 800c2ea:	2001      	movs	r0, #1
 800c2ec:	e7a5      	b.n	800c23a <_vfiprintf_r+0x11a>
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	3401      	adds	r4, #1
 800c2f2:	9305      	str	r3, [sp, #20]
 800c2f4:	4619      	mov	r1, r3
 800c2f6:	f04f 0c0a 	mov.w	ip, #10
 800c2fa:	4620      	mov	r0, r4
 800c2fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c300:	3a30      	subs	r2, #48	; 0x30
 800c302:	2a09      	cmp	r2, #9
 800c304:	d903      	bls.n	800c30e <_vfiprintf_r+0x1ee>
 800c306:	2b00      	cmp	r3, #0
 800c308:	d0c5      	beq.n	800c296 <_vfiprintf_r+0x176>
 800c30a:	9105      	str	r1, [sp, #20]
 800c30c:	e7c3      	b.n	800c296 <_vfiprintf_r+0x176>
 800c30e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c312:	4604      	mov	r4, r0
 800c314:	2301      	movs	r3, #1
 800c316:	e7f0      	b.n	800c2fa <_vfiprintf_r+0x1da>
 800c318:	ab03      	add	r3, sp, #12
 800c31a:	9300      	str	r3, [sp, #0]
 800c31c:	462a      	mov	r2, r5
 800c31e:	4b16      	ldr	r3, [pc, #88]	; (800c378 <_vfiprintf_r+0x258>)
 800c320:	a904      	add	r1, sp, #16
 800c322:	4630      	mov	r0, r6
 800c324:	f7fb f98a 	bl	800763c <_printf_float>
 800c328:	4607      	mov	r7, r0
 800c32a:	1c78      	adds	r0, r7, #1
 800c32c:	d1d6      	bne.n	800c2dc <_vfiprintf_r+0x1bc>
 800c32e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c330:	07d9      	lsls	r1, r3, #31
 800c332:	d405      	bmi.n	800c340 <_vfiprintf_r+0x220>
 800c334:	89ab      	ldrh	r3, [r5, #12]
 800c336:	059a      	lsls	r2, r3, #22
 800c338:	d402      	bmi.n	800c340 <_vfiprintf_r+0x220>
 800c33a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c33c:	f7ff fe71 	bl	800c022 <__retarget_lock_release_recursive>
 800c340:	89ab      	ldrh	r3, [r5, #12]
 800c342:	065b      	lsls	r3, r3, #25
 800c344:	f53f af12 	bmi.w	800c16c <_vfiprintf_r+0x4c>
 800c348:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c34a:	e711      	b.n	800c170 <_vfiprintf_r+0x50>
 800c34c:	ab03      	add	r3, sp, #12
 800c34e:	9300      	str	r3, [sp, #0]
 800c350:	462a      	mov	r2, r5
 800c352:	4b09      	ldr	r3, [pc, #36]	; (800c378 <_vfiprintf_r+0x258>)
 800c354:	a904      	add	r1, sp, #16
 800c356:	4630      	mov	r0, r6
 800c358:	f7fb fc14 	bl	8007b84 <_printf_i>
 800c35c:	e7e4      	b.n	800c328 <_vfiprintf_r+0x208>
 800c35e:	bf00      	nop
 800c360:	0800cb9c 	.word	0x0800cb9c
 800c364:	0800cbbc 	.word	0x0800cbbc
 800c368:	0800cb7c 	.word	0x0800cb7c
 800c36c:	0800cb14 	.word	0x0800cb14
 800c370:	0800cb1e 	.word	0x0800cb1e
 800c374:	0800763d 	.word	0x0800763d
 800c378:	0800c0fd 	.word	0x0800c0fd
 800c37c:	0800cb1a 	.word	0x0800cb1a

0800c380 <__swbuf_r>:
 800c380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c382:	460e      	mov	r6, r1
 800c384:	4614      	mov	r4, r2
 800c386:	4605      	mov	r5, r0
 800c388:	b118      	cbz	r0, 800c392 <__swbuf_r+0x12>
 800c38a:	6983      	ldr	r3, [r0, #24]
 800c38c:	b90b      	cbnz	r3, 800c392 <__swbuf_r+0x12>
 800c38e:	f7ff fd97 	bl	800bec0 <__sinit>
 800c392:	4b21      	ldr	r3, [pc, #132]	; (800c418 <__swbuf_r+0x98>)
 800c394:	429c      	cmp	r4, r3
 800c396:	d12b      	bne.n	800c3f0 <__swbuf_r+0x70>
 800c398:	686c      	ldr	r4, [r5, #4]
 800c39a:	69a3      	ldr	r3, [r4, #24]
 800c39c:	60a3      	str	r3, [r4, #8]
 800c39e:	89a3      	ldrh	r3, [r4, #12]
 800c3a0:	071a      	lsls	r2, r3, #28
 800c3a2:	d52f      	bpl.n	800c404 <__swbuf_r+0x84>
 800c3a4:	6923      	ldr	r3, [r4, #16]
 800c3a6:	b36b      	cbz	r3, 800c404 <__swbuf_r+0x84>
 800c3a8:	6923      	ldr	r3, [r4, #16]
 800c3aa:	6820      	ldr	r0, [r4, #0]
 800c3ac:	1ac0      	subs	r0, r0, r3
 800c3ae:	6963      	ldr	r3, [r4, #20]
 800c3b0:	b2f6      	uxtb	r6, r6
 800c3b2:	4283      	cmp	r3, r0
 800c3b4:	4637      	mov	r7, r6
 800c3b6:	dc04      	bgt.n	800c3c2 <__swbuf_r+0x42>
 800c3b8:	4621      	mov	r1, r4
 800c3ba:	4628      	mov	r0, r5
 800c3bc:	f7ff fcec 	bl	800bd98 <_fflush_r>
 800c3c0:	bb30      	cbnz	r0, 800c410 <__swbuf_r+0x90>
 800c3c2:	68a3      	ldr	r3, [r4, #8]
 800c3c4:	3b01      	subs	r3, #1
 800c3c6:	60a3      	str	r3, [r4, #8]
 800c3c8:	6823      	ldr	r3, [r4, #0]
 800c3ca:	1c5a      	adds	r2, r3, #1
 800c3cc:	6022      	str	r2, [r4, #0]
 800c3ce:	701e      	strb	r6, [r3, #0]
 800c3d0:	6963      	ldr	r3, [r4, #20]
 800c3d2:	3001      	adds	r0, #1
 800c3d4:	4283      	cmp	r3, r0
 800c3d6:	d004      	beq.n	800c3e2 <__swbuf_r+0x62>
 800c3d8:	89a3      	ldrh	r3, [r4, #12]
 800c3da:	07db      	lsls	r3, r3, #31
 800c3dc:	d506      	bpl.n	800c3ec <__swbuf_r+0x6c>
 800c3de:	2e0a      	cmp	r6, #10
 800c3e0:	d104      	bne.n	800c3ec <__swbuf_r+0x6c>
 800c3e2:	4621      	mov	r1, r4
 800c3e4:	4628      	mov	r0, r5
 800c3e6:	f7ff fcd7 	bl	800bd98 <_fflush_r>
 800c3ea:	b988      	cbnz	r0, 800c410 <__swbuf_r+0x90>
 800c3ec:	4638      	mov	r0, r7
 800c3ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3f0:	4b0a      	ldr	r3, [pc, #40]	; (800c41c <__swbuf_r+0x9c>)
 800c3f2:	429c      	cmp	r4, r3
 800c3f4:	d101      	bne.n	800c3fa <__swbuf_r+0x7a>
 800c3f6:	68ac      	ldr	r4, [r5, #8]
 800c3f8:	e7cf      	b.n	800c39a <__swbuf_r+0x1a>
 800c3fa:	4b09      	ldr	r3, [pc, #36]	; (800c420 <__swbuf_r+0xa0>)
 800c3fc:	429c      	cmp	r4, r3
 800c3fe:	bf08      	it	eq
 800c400:	68ec      	ldreq	r4, [r5, #12]
 800c402:	e7ca      	b.n	800c39a <__swbuf_r+0x1a>
 800c404:	4621      	mov	r1, r4
 800c406:	4628      	mov	r0, r5
 800c408:	f000 f80c 	bl	800c424 <__swsetup_r>
 800c40c:	2800      	cmp	r0, #0
 800c40e:	d0cb      	beq.n	800c3a8 <__swbuf_r+0x28>
 800c410:	f04f 37ff 	mov.w	r7, #4294967295
 800c414:	e7ea      	b.n	800c3ec <__swbuf_r+0x6c>
 800c416:	bf00      	nop
 800c418:	0800cb9c 	.word	0x0800cb9c
 800c41c:	0800cbbc 	.word	0x0800cbbc
 800c420:	0800cb7c 	.word	0x0800cb7c

0800c424 <__swsetup_r>:
 800c424:	4b32      	ldr	r3, [pc, #200]	; (800c4f0 <__swsetup_r+0xcc>)
 800c426:	b570      	push	{r4, r5, r6, lr}
 800c428:	681d      	ldr	r5, [r3, #0]
 800c42a:	4606      	mov	r6, r0
 800c42c:	460c      	mov	r4, r1
 800c42e:	b125      	cbz	r5, 800c43a <__swsetup_r+0x16>
 800c430:	69ab      	ldr	r3, [r5, #24]
 800c432:	b913      	cbnz	r3, 800c43a <__swsetup_r+0x16>
 800c434:	4628      	mov	r0, r5
 800c436:	f7ff fd43 	bl	800bec0 <__sinit>
 800c43a:	4b2e      	ldr	r3, [pc, #184]	; (800c4f4 <__swsetup_r+0xd0>)
 800c43c:	429c      	cmp	r4, r3
 800c43e:	d10f      	bne.n	800c460 <__swsetup_r+0x3c>
 800c440:	686c      	ldr	r4, [r5, #4]
 800c442:	89a3      	ldrh	r3, [r4, #12]
 800c444:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c448:	0719      	lsls	r1, r3, #28
 800c44a:	d42c      	bmi.n	800c4a6 <__swsetup_r+0x82>
 800c44c:	06dd      	lsls	r5, r3, #27
 800c44e:	d411      	bmi.n	800c474 <__swsetup_r+0x50>
 800c450:	2309      	movs	r3, #9
 800c452:	6033      	str	r3, [r6, #0]
 800c454:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c458:	81a3      	strh	r3, [r4, #12]
 800c45a:	f04f 30ff 	mov.w	r0, #4294967295
 800c45e:	e03e      	b.n	800c4de <__swsetup_r+0xba>
 800c460:	4b25      	ldr	r3, [pc, #148]	; (800c4f8 <__swsetup_r+0xd4>)
 800c462:	429c      	cmp	r4, r3
 800c464:	d101      	bne.n	800c46a <__swsetup_r+0x46>
 800c466:	68ac      	ldr	r4, [r5, #8]
 800c468:	e7eb      	b.n	800c442 <__swsetup_r+0x1e>
 800c46a:	4b24      	ldr	r3, [pc, #144]	; (800c4fc <__swsetup_r+0xd8>)
 800c46c:	429c      	cmp	r4, r3
 800c46e:	bf08      	it	eq
 800c470:	68ec      	ldreq	r4, [r5, #12]
 800c472:	e7e6      	b.n	800c442 <__swsetup_r+0x1e>
 800c474:	0758      	lsls	r0, r3, #29
 800c476:	d512      	bpl.n	800c49e <__swsetup_r+0x7a>
 800c478:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c47a:	b141      	cbz	r1, 800c48e <__swsetup_r+0x6a>
 800c47c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c480:	4299      	cmp	r1, r3
 800c482:	d002      	beq.n	800c48a <__swsetup_r+0x66>
 800c484:	4630      	mov	r0, r6
 800c486:	f7fe fd4f 	bl	800af28 <_free_r>
 800c48a:	2300      	movs	r3, #0
 800c48c:	6363      	str	r3, [r4, #52]	; 0x34
 800c48e:	89a3      	ldrh	r3, [r4, #12]
 800c490:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c494:	81a3      	strh	r3, [r4, #12]
 800c496:	2300      	movs	r3, #0
 800c498:	6063      	str	r3, [r4, #4]
 800c49a:	6923      	ldr	r3, [r4, #16]
 800c49c:	6023      	str	r3, [r4, #0]
 800c49e:	89a3      	ldrh	r3, [r4, #12]
 800c4a0:	f043 0308 	orr.w	r3, r3, #8
 800c4a4:	81a3      	strh	r3, [r4, #12]
 800c4a6:	6923      	ldr	r3, [r4, #16]
 800c4a8:	b94b      	cbnz	r3, 800c4be <__swsetup_r+0x9a>
 800c4aa:	89a3      	ldrh	r3, [r4, #12]
 800c4ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c4b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c4b4:	d003      	beq.n	800c4be <__swsetup_r+0x9a>
 800c4b6:	4621      	mov	r1, r4
 800c4b8:	4630      	mov	r0, r6
 800c4ba:	f000 f84d 	bl	800c558 <__smakebuf_r>
 800c4be:	89a0      	ldrh	r0, [r4, #12]
 800c4c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c4c4:	f010 0301 	ands.w	r3, r0, #1
 800c4c8:	d00a      	beq.n	800c4e0 <__swsetup_r+0xbc>
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	60a3      	str	r3, [r4, #8]
 800c4ce:	6963      	ldr	r3, [r4, #20]
 800c4d0:	425b      	negs	r3, r3
 800c4d2:	61a3      	str	r3, [r4, #24]
 800c4d4:	6923      	ldr	r3, [r4, #16]
 800c4d6:	b943      	cbnz	r3, 800c4ea <__swsetup_r+0xc6>
 800c4d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c4dc:	d1ba      	bne.n	800c454 <__swsetup_r+0x30>
 800c4de:	bd70      	pop	{r4, r5, r6, pc}
 800c4e0:	0781      	lsls	r1, r0, #30
 800c4e2:	bf58      	it	pl
 800c4e4:	6963      	ldrpl	r3, [r4, #20]
 800c4e6:	60a3      	str	r3, [r4, #8]
 800c4e8:	e7f4      	b.n	800c4d4 <__swsetup_r+0xb0>
 800c4ea:	2000      	movs	r0, #0
 800c4ec:	e7f7      	b.n	800c4de <__swsetup_r+0xba>
 800c4ee:	bf00      	nop
 800c4f0:	2000000c 	.word	0x2000000c
 800c4f4:	0800cb9c 	.word	0x0800cb9c
 800c4f8:	0800cbbc 	.word	0x0800cbbc
 800c4fc:	0800cb7c 	.word	0x0800cb7c

0800c500 <abort>:
 800c500:	b508      	push	{r3, lr}
 800c502:	2006      	movs	r0, #6
 800c504:	f000 f898 	bl	800c638 <raise>
 800c508:	2001      	movs	r0, #1
 800c50a:	f7f6 f8cb 	bl	80026a4 <_exit>

0800c50e <__swhatbuf_r>:
 800c50e:	b570      	push	{r4, r5, r6, lr}
 800c510:	460e      	mov	r6, r1
 800c512:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c516:	2900      	cmp	r1, #0
 800c518:	b096      	sub	sp, #88	; 0x58
 800c51a:	4614      	mov	r4, r2
 800c51c:	461d      	mov	r5, r3
 800c51e:	da08      	bge.n	800c532 <__swhatbuf_r+0x24>
 800c520:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c524:	2200      	movs	r2, #0
 800c526:	602a      	str	r2, [r5, #0]
 800c528:	061a      	lsls	r2, r3, #24
 800c52a:	d410      	bmi.n	800c54e <__swhatbuf_r+0x40>
 800c52c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c530:	e00e      	b.n	800c550 <__swhatbuf_r+0x42>
 800c532:	466a      	mov	r2, sp
 800c534:	f000 f89c 	bl	800c670 <_fstat_r>
 800c538:	2800      	cmp	r0, #0
 800c53a:	dbf1      	blt.n	800c520 <__swhatbuf_r+0x12>
 800c53c:	9a01      	ldr	r2, [sp, #4]
 800c53e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c542:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c546:	425a      	negs	r2, r3
 800c548:	415a      	adcs	r2, r3
 800c54a:	602a      	str	r2, [r5, #0]
 800c54c:	e7ee      	b.n	800c52c <__swhatbuf_r+0x1e>
 800c54e:	2340      	movs	r3, #64	; 0x40
 800c550:	2000      	movs	r0, #0
 800c552:	6023      	str	r3, [r4, #0]
 800c554:	b016      	add	sp, #88	; 0x58
 800c556:	bd70      	pop	{r4, r5, r6, pc}

0800c558 <__smakebuf_r>:
 800c558:	898b      	ldrh	r3, [r1, #12]
 800c55a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c55c:	079d      	lsls	r5, r3, #30
 800c55e:	4606      	mov	r6, r0
 800c560:	460c      	mov	r4, r1
 800c562:	d507      	bpl.n	800c574 <__smakebuf_r+0x1c>
 800c564:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c568:	6023      	str	r3, [r4, #0]
 800c56a:	6123      	str	r3, [r4, #16]
 800c56c:	2301      	movs	r3, #1
 800c56e:	6163      	str	r3, [r4, #20]
 800c570:	b002      	add	sp, #8
 800c572:	bd70      	pop	{r4, r5, r6, pc}
 800c574:	ab01      	add	r3, sp, #4
 800c576:	466a      	mov	r2, sp
 800c578:	f7ff ffc9 	bl	800c50e <__swhatbuf_r>
 800c57c:	9900      	ldr	r1, [sp, #0]
 800c57e:	4605      	mov	r5, r0
 800c580:	4630      	mov	r0, r6
 800c582:	f7fe fd3d 	bl	800b000 <_malloc_r>
 800c586:	b948      	cbnz	r0, 800c59c <__smakebuf_r+0x44>
 800c588:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c58c:	059a      	lsls	r2, r3, #22
 800c58e:	d4ef      	bmi.n	800c570 <__smakebuf_r+0x18>
 800c590:	f023 0303 	bic.w	r3, r3, #3
 800c594:	f043 0302 	orr.w	r3, r3, #2
 800c598:	81a3      	strh	r3, [r4, #12]
 800c59a:	e7e3      	b.n	800c564 <__smakebuf_r+0xc>
 800c59c:	4b0d      	ldr	r3, [pc, #52]	; (800c5d4 <__smakebuf_r+0x7c>)
 800c59e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c5a0:	89a3      	ldrh	r3, [r4, #12]
 800c5a2:	6020      	str	r0, [r4, #0]
 800c5a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5a8:	81a3      	strh	r3, [r4, #12]
 800c5aa:	9b00      	ldr	r3, [sp, #0]
 800c5ac:	6163      	str	r3, [r4, #20]
 800c5ae:	9b01      	ldr	r3, [sp, #4]
 800c5b0:	6120      	str	r0, [r4, #16]
 800c5b2:	b15b      	cbz	r3, 800c5cc <__smakebuf_r+0x74>
 800c5b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5b8:	4630      	mov	r0, r6
 800c5ba:	f000 f86b 	bl	800c694 <_isatty_r>
 800c5be:	b128      	cbz	r0, 800c5cc <__smakebuf_r+0x74>
 800c5c0:	89a3      	ldrh	r3, [r4, #12]
 800c5c2:	f023 0303 	bic.w	r3, r3, #3
 800c5c6:	f043 0301 	orr.w	r3, r3, #1
 800c5ca:	81a3      	strh	r3, [r4, #12]
 800c5cc:	89a0      	ldrh	r0, [r4, #12]
 800c5ce:	4305      	orrs	r5, r0
 800c5d0:	81a5      	strh	r5, [r4, #12]
 800c5d2:	e7cd      	b.n	800c570 <__smakebuf_r+0x18>
 800c5d4:	0800be59 	.word	0x0800be59

0800c5d8 <_malloc_usable_size_r>:
 800c5d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5dc:	1f18      	subs	r0, r3, #4
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	bfbc      	itt	lt
 800c5e2:	580b      	ldrlt	r3, [r1, r0]
 800c5e4:	18c0      	addlt	r0, r0, r3
 800c5e6:	4770      	bx	lr

0800c5e8 <_raise_r>:
 800c5e8:	291f      	cmp	r1, #31
 800c5ea:	b538      	push	{r3, r4, r5, lr}
 800c5ec:	4604      	mov	r4, r0
 800c5ee:	460d      	mov	r5, r1
 800c5f0:	d904      	bls.n	800c5fc <_raise_r+0x14>
 800c5f2:	2316      	movs	r3, #22
 800c5f4:	6003      	str	r3, [r0, #0]
 800c5f6:	f04f 30ff 	mov.w	r0, #4294967295
 800c5fa:	bd38      	pop	{r3, r4, r5, pc}
 800c5fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c5fe:	b112      	cbz	r2, 800c606 <_raise_r+0x1e>
 800c600:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c604:	b94b      	cbnz	r3, 800c61a <_raise_r+0x32>
 800c606:	4620      	mov	r0, r4
 800c608:	f000 f830 	bl	800c66c <_getpid_r>
 800c60c:	462a      	mov	r2, r5
 800c60e:	4601      	mov	r1, r0
 800c610:	4620      	mov	r0, r4
 800c612:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c616:	f000 b817 	b.w	800c648 <_kill_r>
 800c61a:	2b01      	cmp	r3, #1
 800c61c:	d00a      	beq.n	800c634 <_raise_r+0x4c>
 800c61e:	1c59      	adds	r1, r3, #1
 800c620:	d103      	bne.n	800c62a <_raise_r+0x42>
 800c622:	2316      	movs	r3, #22
 800c624:	6003      	str	r3, [r0, #0]
 800c626:	2001      	movs	r0, #1
 800c628:	e7e7      	b.n	800c5fa <_raise_r+0x12>
 800c62a:	2400      	movs	r4, #0
 800c62c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c630:	4628      	mov	r0, r5
 800c632:	4798      	blx	r3
 800c634:	2000      	movs	r0, #0
 800c636:	e7e0      	b.n	800c5fa <_raise_r+0x12>

0800c638 <raise>:
 800c638:	4b02      	ldr	r3, [pc, #8]	; (800c644 <raise+0xc>)
 800c63a:	4601      	mov	r1, r0
 800c63c:	6818      	ldr	r0, [r3, #0]
 800c63e:	f7ff bfd3 	b.w	800c5e8 <_raise_r>
 800c642:	bf00      	nop
 800c644:	2000000c 	.word	0x2000000c

0800c648 <_kill_r>:
 800c648:	b538      	push	{r3, r4, r5, lr}
 800c64a:	4d07      	ldr	r5, [pc, #28]	; (800c668 <_kill_r+0x20>)
 800c64c:	2300      	movs	r3, #0
 800c64e:	4604      	mov	r4, r0
 800c650:	4608      	mov	r0, r1
 800c652:	4611      	mov	r1, r2
 800c654:	602b      	str	r3, [r5, #0]
 800c656:	f7f6 f815 	bl	8002684 <_kill>
 800c65a:	1c43      	adds	r3, r0, #1
 800c65c:	d102      	bne.n	800c664 <_kill_r+0x1c>
 800c65e:	682b      	ldr	r3, [r5, #0]
 800c660:	b103      	cbz	r3, 800c664 <_kill_r+0x1c>
 800c662:	6023      	str	r3, [r4, #0]
 800c664:	bd38      	pop	{r3, r4, r5, pc}
 800c666:	bf00      	nop
 800c668:	2000045c 	.word	0x2000045c

0800c66c <_getpid_r>:
 800c66c:	f7f6 b802 	b.w	8002674 <_getpid>

0800c670 <_fstat_r>:
 800c670:	b538      	push	{r3, r4, r5, lr}
 800c672:	4d07      	ldr	r5, [pc, #28]	; (800c690 <_fstat_r+0x20>)
 800c674:	2300      	movs	r3, #0
 800c676:	4604      	mov	r4, r0
 800c678:	4608      	mov	r0, r1
 800c67a:	4611      	mov	r1, r2
 800c67c:	602b      	str	r3, [r5, #0]
 800c67e:	f7f6 f860 	bl	8002742 <_fstat>
 800c682:	1c43      	adds	r3, r0, #1
 800c684:	d102      	bne.n	800c68c <_fstat_r+0x1c>
 800c686:	682b      	ldr	r3, [r5, #0]
 800c688:	b103      	cbz	r3, 800c68c <_fstat_r+0x1c>
 800c68a:	6023      	str	r3, [r4, #0]
 800c68c:	bd38      	pop	{r3, r4, r5, pc}
 800c68e:	bf00      	nop
 800c690:	2000045c 	.word	0x2000045c

0800c694 <_isatty_r>:
 800c694:	b538      	push	{r3, r4, r5, lr}
 800c696:	4d06      	ldr	r5, [pc, #24]	; (800c6b0 <_isatty_r+0x1c>)
 800c698:	2300      	movs	r3, #0
 800c69a:	4604      	mov	r4, r0
 800c69c:	4608      	mov	r0, r1
 800c69e:	602b      	str	r3, [r5, #0]
 800c6a0:	f7f6 f85f 	bl	8002762 <_isatty>
 800c6a4:	1c43      	adds	r3, r0, #1
 800c6a6:	d102      	bne.n	800c6ae <_isatty_r+0x1a>
 800c6a8:	682b      	ldr	r3, [r5, #0]
 800c6aa:	b103      	cbz	r3, 800c6ae <_isatty_r+0x1a>
 800c6ac:	6023      	str	r3, [r4, #0]
 800c6ae:	bd38      	pop	{r3, r4, r5, pc}
 800c6b0:	2000045c 	.word	0x2000045c

0800c6b4 <_init>:
 800c6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6b6:	bf00      	nop
 800c6b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6ba:	bc08      	pop	{r3}
 800c6bc:	469e      	mov	lr, r3
 800c6be:	4770      	bx	lr

0800c6c0 <_fini>:
 800c6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6c2:	bf00      	nop
 800c6c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6c6:	bc08      	pop	{r3}
 800c6c8:	469e      	mov	lr, r3
 800c6ca:	4770      	bx	lr
